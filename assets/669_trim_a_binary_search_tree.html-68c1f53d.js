const e=JSON.parse(`{"key":"v-7b791641","path":"/algorithm/leetcode/binary_tree/669_trim_a_binary_search_tree.html","title":"669, Trim a Binary Search Tree","lang":"en-US","frontmatter":{"title":"669, Trim a Binary Search Tree","icon":"discover","date":"2024-01-18T00:00:00.000Z","order":36,"sticky":true,"category":"binary tree","tag":["medium","binary tree","binary search tree","depth first search"],"description":"I Problem Given the root of a binary search tree and the lowest and highest boundaries as low and high, trim the tree so that all its elements lies in [low, high]. Trimming the tree should not change the relative structure of the elements that will remain in the tree (i.e., any node's descendant should remain a descendant). It can be proven that there is a unique answer.","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://thecodedmike.github.io/zh/algorithm/leetcode/binary_tree/669_trim_a_binary_search_tree.html"}],["meta",{"property":"og:url","content":"https://thecodedmike.github.io/algorithm/leetcode/binary_tree/669_trim_a_binary_search_tree.html"}],["meta",{"property":"og:site_name","content":"Mike's Blog"}],["meta",{"property":"og:title","content":"669, Trim a Binary Search Tree"}],["meta",{"property":"og:description","content":"I Problem Given the root of a binary search tree and the lowest and highest boundaries as low and high, trim the tree so that all its elements lies in [low, high]. Trimming the tree should not change the relative structure of the elements that will remain in the tree (i.e., any node's descendant should remain a descendant). It can be proven that there is a unique answer."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-18T13:15:38.000Z"}],["meta",{"property":"article:author","content":"Mike"}],["meta",{"property":"article:tag","content":"medium"}],["meta",{"property":"article:tag","content":"binary tree"}],["meta",{"property":"article:tag","content":"binary search tree"}],["meta",{"property":"article:tag","content":"depth first search"}],["meta",{"property":"article:published_time","content":"2024-01-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-18T13:15:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"669, Trim a Binary Search Tree\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-18T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-18T13:15:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mike\\"}]}"]]},"headers":[{"level":2,"title":"I Problem","slug":"i-problem","link":"#i-problem","children":[]},{"level":2,"title":"II Solution","slug":"ii-solution","link":"#ii-solution","children":[{"level":3,"title":"Approach 1: Recursion","slug":"approach-1-recursion","link":"#approach-1-recursion","children":[]},{"level":3,"title":"Approach 2: Iteration","slug":"approach-2-iteration","link":"#approach-2-iteration","children":[]}]}],"git":{"createdTime":1705583738000,"updatedTime":1705583738000,"contributors":[{"name":"mike","email":"lixiaofeng1115@outlook.com","commits":1}]},"readingTime":{"minutes":2.18,"words":655},"filePathRelative":"algorithm/leetcode/binary_tree/669_trim_a_binary_search_tree.md","localizedDate":"January 18, 2024","excerpt":"<h2> I Problem</h2>\\n<p>Given the <code>root</code> of a binary search tree and the lowest and highest boundaries as <code>low</code> and <code>high</code>, trim the tree so that all its elements lies in <code>[low, high]</code>. Trimming the tree should <strong>not</strong> change the relative structure of the elements that will remain in the tree (i.e., any node's descendant should remain a descendant). It can be proven that there is a <strong>unique answer</strong>.</p>","autoDesc":true}`);export{e as data};
