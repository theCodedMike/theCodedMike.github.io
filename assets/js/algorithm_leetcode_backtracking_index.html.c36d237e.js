"use strict";(self.webpackChunkmike_blog=self.webpackChunkmike_blog||[]).push([[46997],{75726:(e,t)=>{t.A=(e,t)=>{const a=e.__vccOpts||e;for(const[e,n]of t)a[e]=n;return a}},77218:(e,t,a)=>{a.r(t),a.d(t,{comp:()=>l,data:()=>s});var n=a(60362);const i={},l=(0,a(75726).A)(i,[["render",function(e,t){const a=(0,n.g2)("RouteLink");return(0,n.uX)(),(0,n.CE)("div",null,[t[28]||(t[28]=(0,n.Fv)('<h2 id="backtracking" tabindex="-1"><a class="header-anchor" href="#backtracking"><span>Backtracking</span></a></h2><p><strong>Backtracking</strong> is an algorithmic technique for solving problems recursively by trying to build a solution incrementally, one piece at a time, removing those solutions that fail to satisfy the constraints of the problem at any point of time (by time, here, is referred to the time elapsed till reaching any level of the search tree).</p><p>There are three types of problems in backtracking:</p><ul><li><strong>Decision Problem</strong>: In this, we search for a feasible solution.</li><li><strong>Optimization Problem</strong>: In this, we search for the best solution.</li><li><strong>Enumeration Problem</strong>: In this, we find all feasible solutions.</li></ul><p>The backtracking algorithm template is as follows:</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>void backtracking(params) {</span></span>\n<span class="line"><span>    if (terminate condition) {</span></span>\n<span class="line"><span>        store result;</span></span>\n<span class="line"><span>        return;</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    for (elem : elems) {</span></span>\n<span class="line"><span>        process elem;</span></span>\n<span class="line"><span>        backtracking(params); // recursion</span></span>\n<span class="line"><span>        backtracking;</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="exercise" tabindex="-1"><a class="header-anchor" href="#exercise"><span>Exercise</span></a></h2><h3 id="combinations" tabindex="-1"><a class="header-anchor" href="#combinations"><span>Combinations</span></a></h3>',8)),(0,n.Lk)("p",null,[(0,n.bF)(a,{to:"/algorithm/leetcode/backtracking/77_combinations.html"},{default:(0,n.k6)(()=>[...t[0]||(t[0]=[(0,n.eW)("77: Combinations",-1)])]),_:1}),t[5]||(t[5]=(0,n.Lk)("br",null,null,-1)),(0,n.bF)(a,{to:"/algorithm/leetcode/backtracking/17_letter_combinations_of_a_phone_number.html"},{default:(0,n.k6)(()=>[...t[1]||(t[1]=[(0,n.eW)("17: Letter Combinations of a Phone Number",-1)])]),_:1}),t[6]||(t[6]=(0,n.Lk)("br",null,null,-1)),(0,n.bF)(a,{to:"/algorithm/leetcode/backtracking/39_combination_sum.html"},{default:(0,n.k6)(()=>[...t[2]||(t[2]=[(0,n.eW)("39: Combination Sum",-1)])]),_:1}),t[7]||(t[7]=(0,n.Lk)("br",null,null,-1)),(0,n.bF)(a,{to:"/algorithm/leetcode/backtracking/40_combination_sum_ii.html"},{default:(0,n.k6)(()=>[...t[3]||(t[3]=[(0,n.eW)("40: Combination Sum II",-1)])]),_:1}),t[8]||(t[8]=(0,n.Lk)("br",null,null,-1)),(0,n.bF)(a,{to:"/algorithm/leetcode/backtracking/216_combination_sum_iii.html"},{default:(0,n.k6)(()=>[...t[4]||(t[4]=[(0,n.eW)("216: Combination Sum III",-1)])]),_:1})]),t[29]||(t[29]=(0,n.Lk)("h3",{id:"partitioning",tabindex:"-1"},[(0,n.Lk)("a",{class:"header-anchor",href:"#partitioning"},[(0,n.Lk)("span",null,"Partitioning")])],-1)),(0,n.Lk)("p",null,[(0,n.bF)(a,{to:"/algorithm/leetcode/backtracking/131_palindrome_partitioning.html"},{default:(0,n.k6)(()=>[...t[9]||(t[9]=[(0,n.eW)("131: Palindrome Partitioning",-1)])]),_:1}),t[11]||(t[11]=(0,n.Lk)("br",null,null,-1)),(0,n.bF)(a,{to:"/algorithm/leetcode/backtracking/93_restore_ip_addresses.html"},{default:(0,n.k6)(()=>[...t[10]||(t[10]=[(0,n.eW)("93: Restore IP Addresses",-1)])]),_:1})]),t[30]||(t[30]=(0,n.Lk)("h3",{id:"subsets",tabindex:"-1"},[(0,n.Lk)("a",{class:"header-anchor",href:"#subsets"},[(0,n.Lk)("span",null,"Subsets")])],-1)),(0,n.Lk)("p",null,[(0,n.bF)(a,{to:"/algorithm/leetcode/backtracking/78_subsets.html"},{default:(0,n.k6)(()=>[...t[12]||(t[12]=[(0,n.eW)("78: Subsets",-1)])]),_:1}),t[14]||(t[14]=(0,n.Lk)("br",null,null,-1)),(0,n.bF)(a,{to:"/algorithm/leetcode/backtracking/90_subsets_ii.html"},{default:(0,n.k6)(()=>[...t[13]||(t[13]=[(0,n.eW)("90: Subsets II",-1)])]),_:1})]),t[31]||(t[31]=(0,n.Lk)("h3",{id:"permutations",tabindex:"-1"},[(0,n.Lk)("a",{class:"header-anchor",href:"#permutations"},[(0,n.Lk)("span",null,"Permutations")])],-1)),(0,n.Lk)("p",null,[(0,n.bF)(a,{to:"/algorithm/leetcode/backtracking/46_permutations.html"},{default:(0,n.k6)(()=>[...t[15]||(t[15]=[(0,n.eW)("46: Permutations",-1)])]),_:1}),t[17]||(t[17]=(0,n.Lk)("br",null,null,-1)),(0,n.bF)(a,{to:"/algorithm/leetcode/backtracking/47_permutations_ii.html"},{default:(0,n.k6)(()=>[...t[16]||(t[16]=[(0,n.eW)("47: Permutations II",-1)])]),_:1})]),t[32]||(t[32]=(0,n.Lk)("h3",{id:"chessboard",tabindex:"-1"},[(0,n.Lk)("a",{class:"header-anchor",href:"#chessboard"},[(0,n.Lk)("span",null,"Chessboard")])],-1)),(0,n.Lk)("p",null,[(0,n.bF)(a,{to:"/algorithm/leetcode/backtracking/51_n_queens.html"},{default:(0,n.k6)(()=>[...t[18]||(t[18]=[(0,n.eW)("51: N-Queens",-1)])]),_:1}),t[22]||(t[22]=(0,n.Lk)("br",null,null,-1)),(0,n.bF)(a,{to:"/algorithm/leetcode/backtracking/52_n_queens_ii.html"},{default:(0,n.k6)(()=>[...t[19]||(t[19]=[(0,n.eW)("52: N-Queens II",-1)])]),_:1}),t[23]||(t[23]=(0,n.Lk)("br",null,null,-1)),(0,n.bF)(a,{to:"/algorithm/leetcode/backtracking/36_valid_sudoku.html"},{default:(0,n.k6)(()=>[...t[20]||(t[20]=[(0,n.eW)("36: Valid Sudoku",-1)])]),_:1}),t[24]||(t[24]=(0,n.Lk)("br",null,null,-1)),(0,n.bF)(a,{to:"/algorithm/leetcode/backtracking/37_sudoku_solver.html"},{default:(0,n.k6)(()=>[...t[21]||(t[21]=[(0,n.eW)("37: Sudoku Solver",-1)])]),_:1})]),t[33]||(t[33]=(0,n.Lk)("h3",{id:"other",tabindex:"-1"},[(0,n.Lk)("a",{class:"header-anchor",href:"#other"},[(0,n.Lk)("span",null,"Other")])],-1)),(0,n.Lk)("p",null,[(0,n.bF)(a,{to:"/algorithm/leetcode/backtracking/491_non_decreasing_subsequences.html"},{default:(0,n.k6)(()=>[...t[25]||(t[25]=[(0,n.eW)("491: Non-decreasing Subsequences",-1)])]),_:1}),t[27]||(t[27]=(0,n.Lk)("br",null,null,-1)),(0,n.bF)(a,{to:"/algorithm/leetcode/backtracking/332_reconstruct_itinerary.html"},{default:(0,n.k6)(()=>[...t[26]||(t[26]=[(0,n.eW)("332: Reconstruct Itinerary",-1)])]),_:1})]),t[34]||(t[34]=(0,n.Lk)("h2",{id:"summary",tabindex:"-1"},[(0,n.Lk)("a",{class:"header-anchor",href:"#summary"},[(0,n.Lk)("span",null,"Summary")])],-1))])}]]),s=JSON.parse('{"path":"/algorithm/leetcode/backtracking/","title":"Backtracking","lang":"en-US","frontmatter":{"title":"Backtracking","icon":"discover","date":"2024-01-25T00:00:00.000Z","dir":{"order":8},"category":"leetcode","tag":"backtracking","sticky":false,"description":"Backtracking Backtracking is an algorithmic technique for solving problems recursively by trying to build a solution incrementally, one piece at a time, removing those solutions...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Backtracking\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-25T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-20T13:11:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mike\\"}]}"],["meta",{"property":"og:url","content":"https://thecodedmike.github.io/algorithm/leetcode/backtracking/"}],["meta",{"property":"og:site_name","content":"Mike\'s Blog"}],["meta",{"property":"og:title","content":"Backtracking"}],["meta",{"property":"og:description","content":"Backtracking Backtracking is an algorithmic technique for solving problems recursively by trying to build a solution incrementally, one piece at a time, removing those solutions..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-20T13:11:45.000Z"}],["meta",{"property":"article:tag","content":"backtracking"}],["meta",{"property":"article:published_time","content":"2024-01-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-20T13:11:45.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://thecodedmike.github.io/zh/algorithm/leetcode/backtracking/"}]]},"git":{"createdTime":1705928357000,"updatedTime":1708434705000,"contributors":[{"name":"mike","username":"mike","email":"lixiaofeng1115@outlook.com","commits":19,"url":"https://github.com/mike"}]},"readingTime":{"minutes":0.73,"words":220},"filePathRelative":"algorithm/leetcode/backtracking/README.md","excerpt":"<h2>Backtracking</h2>\\n<p><strong>Backtracking</strong> is an algorithmic technique for solving problems recursively by trying to build a solution incrementally, one piece at a time, removing those solutions that fail to satisfy the constraints of the problem at any point of time (by time, here, is referred to the time elapsed till reaching any level of the search tree).</p>","autoDesc":true}')}}]);