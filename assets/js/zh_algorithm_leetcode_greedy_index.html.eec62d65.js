"use strict";(self.webpackChunkmike_blog=self.webpackChunkmike_blog||[]).push([[3e4],{36318:(e,t,l)=>{l.r(t),l.d(t,{comp:()=>a,data:()=>n});var o=l(60362);const r={},a=(0,l(75726).A)(r,[["render",function(e,t){const l=(0,o.g2)("RouteLink");return(0,o.uX)(),(0,o.CE)("div",null,[t[35]||(t[35]=(0,o.Fv)('<h2 id="贪心算法" tabindex="-1"><a class="header-anchor" href="#贪心算法"><span>贪心算法</span></a></h2><p><strong>贪心算法</strong>（greedy algorithm，又称<strong>贪婪算法</strong>）是指，在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，算法得到的是在某种意义上的局部最优解。</p><p>贪心算法不是对所有问题都能得到整体最优解，关键是贪心策略的选择。</p><p>贪心算法一般分为如下四步：</p><ul><li>将问题分解为若干个子问题</li><li>找出适合的贪心策略</li><li>求解每一个子问题的最优解</li><li>将局部最优解堆叠成全局最优解</li></ul><p>贪心算法没有套路，说白了就是常识性推导加上举反例。</p><h2 id="习题" tabindex="-1"><a class="header-anchor" href="#习题"><span>习题</span></a></h2>',7)),(0,o.Lk)("p",null,[(0,o.bF)(l,{to:"/zh/algorithm/leetcode/greedy/455_assign_cookies.html"},{default:(0,o.k6)(()=>[...t[0]||(t[0]=[(0,o.eW)("455: 分发饼干",-1)])]),_:1}),t[18]||(t[18]=(0,o.Lk)("br",null,null,-1)),(0,o.bF)(l,{to:"/zh/algorithm/leetcode/greedy/1005_maximize_sum_of_array_after_k_negations.html"},{default:(0,o.k6)(()=>[...t[1]||(t[1]=[(0,o.eW)("1005: K次取反后最大化的数组和",-1)])]),_:1}),t[19]||(t[19]=(0,o.Lk)("br",null,null,-1)),(0,o.bF)(l,{to:"/zh/algorithm/leetcode/greedy/860_lemonade_change.html"},{default:(0,o.k6)(()=>[...t[2]||(t[2]=[(0,o.eW)("860: 柠檬水找零",-1)])]),_:1}),t[20]||(t[20]=(0,o.Lk)("br",null,null,-1)),(0,o.bF)(l,{to:"/zh/algorithm/leetcode/greedy/376_wiggle_subsequence.html"},{default:(0,o.k6)(()=>[...t[3]||(t[3]=[(0,o.eW)("376: 摆动序列",-1)])]),_:1}),t[21]||(t[21]=(0,o.Lk)("br",null,null,-1)),(0,o.bF)(l,{to:"/zh/algorithm/leetcode/greedy/738_monotone_increasing_digits.html"},{default:(0,o.k6)(()=>[...t[4]||(t[4]=[(0,o.eW)("738: 单调递增的数字",-1)])]),_:1}),t[22]||(t[22]=(0,o.Lk)("br",null,null,-1)),(0,o.bF)(l,{to:"/zh/algorithm/leetcode/greedy/122_best_time_to_buy_and_sell_stock_ii.html"},{default:(0,o.k6)(()=>[...t[5]||(t[5]=[(0,o.eW)("122: 买卖股票的最佳时机II",-1)])]),_:1}),t[23]||(t[23]=(0,o.Lk)("br",null,null,-1)),(0,o.bF)(l,{to:"/zh/algorithm/leetcode/greedy/714_best_time_to_buy_and_sell_stock_with_transaction_fee.html"},{default:(0,o.k6)(()=>[...t[6]||(t[6]=[(0,o.eW)("714: 买卖股票的最佳时机含手续费",-1)])]),_:1}),t[24]||(t[24]=(0,o.Lk)("br",null,null,-1)),(0,o.bF)(l,{to:"/zh/algorithm/leetcode/greedy/135_candy.html"},{default:(0,o.k6)(()=>[...t[7]||(t[7]=[(0,o.eW)("135: 分发糖果",-1)])]),_:1}),t[25]||(t[25]=(0,o.Lk)("br",null,null,-1)),(0,o.bF)(l,{to:"/zh/algorithm/leetcode/greedy/406_queue_reconstruction_by_height.html"},{default:(0,o.k6)(()=>[...t[8]||(t[8]=[(0,o.eW)("406: 根据身高重建队列",-1)])]),_:1}),t[26]||(t[26]=(0,o.Lk)("br",null,null,-1)),(0,o.bF)(l,{to:"/zh/algorithm/leetcode/greedy/55_jump_game.html"},{default:(0,o.k6)(()=>[...t[9]||(t[9]=[(0,o.eW)("55: 跳跃游戏",-1)])]),_:1}),t[27]||(t[27]=(0,o.Lk)("br",null,null,-1)),(0,o.bF)(l,{to:"/zh/algorithm/leetcode/greedy/45_jump_game_ii.html"},{default:(0,o.k6)(()=>[...t[10]||(t[10]=[(0,o.eW)("45: 跳跃游戏II",-1)])]),_:1}),t[28]||(t[28]=(0,o.Lk)("br",null,null,-1)),(0,o.bF)(l,{to:"/zh/algorithm/leetcode/greedy/452_minimum_number_of_arrows_to_burst_balloons.html"},{default:(0,o.k6)(()=>[...t[11]||(t[11]=[(0,o.eW)("452: 用最少数量的箭引爆气球",-1)])]),_:1}),t[29]||(t[29]=(0,o.Lk)("br",null,null,-1)),(0,o.bF)(l,{to:"/zh/algorithm/leetcode/greedy/435_non_overlapping_intervals.html"},{default:(0,o.k6)(()=>[...t[12]||(t[12]=[(0,o.eW)("435: 无重叠区间",-1)])]),_:1}),t[30]||(t[30]=(0,o.Lk)("br",null,null,-1)),(0,o.bF)(l,{to:"/zh/algorithm/leetcode/greedy/763_partition_labels.html"},{default:(0,o.k6)(()=>[...t[13]||(t[13]=[(0,o.eW)("763: 划分字母区间",-1)])]),_:1}),t[31]||(t[31]=(0,o.Lk)("br",null,null,-1)),(0,o.bF)(l,{to:"/zh/algorithm/leetcode/greedy/56_merge_intervals.html"},{default:(0,o.k6)(()=>[...t[14]||(t[14]=[(0,o.eW)("56: 合并区间",-1)])]),_:1}),t[32]||(t[32]=(0,o.Lk)("br",null,null,-1)),(0,o.bF)(l,{to:"/zh/algorithm/leetcode/greedy/53_maximum_subarray.html"},{default:(0,o.k6)(()=>[...t[15]||(t[15]=[(0,o.eW)("53: 最大子序和",-1)])]),_:1}),t[33]||(t[33]=(0,o.Lk)("br",null,null,-1)),(0,o.bF)(l,{to:"/zh/algorithm/leetcode/greedy/134_gas_station.html"},{default:(0,o.k6)(()=>[...t[16]||(t[16]=[(0,o.eW)("134: 加油站",-1)])]),_:1}),t[34]||(t[34]=(0,o.Lk)("br",null,null,-1)),(0,o.bF)(l,{to:"/zh/algorithm/leetcode/greedy/968_binary_tree_cameras.html"},{default:(0,o.k6)(()=>[...t[17]||(t[17]=[(0,o.eW)("968: 监控二叉树",-1)])]),_:1})]),t[36]||(t[36]=(0,o.Lk)("h2",{id:"总结",tabindex:"-1"},[(0,o.Lk)("a",{class:"header-anchor",href:"#总结"},[(0,o.Lk)("span",null,"总结")])],-1))])}]]),n=JSON.parse('{"path":"/zh/algorithm/leetcode/greedy/","title":"贪心算法","lang":"zh-CN","frontmatter":{"title":"贪心算法","icon":"discover","date":"2024-02-25T00:00:00.000Z","dir":{"order":9},"category":"leetcode","tag":"greedy","sticky":false,"description":"贪心算法 贪心算法（greedy algorithm，又称贪婪算法）是指，在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，算法得到的是在某种意义上的局部最优解。 贪心算法不是对所有问题都能得到整体最优解，关键是贪心策略的选择。 贪心算法一般分为如下四步： 将问题分解为若干个子问题 找出适合的贪心策略 求解每一个子问题的...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"贪心算法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-02-25T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-26T15:28:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mike\\"}]}"],["meta",{"property":"og:url","content":"https://thecodedmike.github.io/zh/algorithm/leetcode/greedy/"}],["meta",{"property":"og:site_name","content":"Mike的博客"}],["meta",{"property":"og:title","content":"贪心算法"}],["meta",{"property":"og:description","content":"贪心算法 贪心算法（greedy algorithm，又称贪婪算法）是指，在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，算法得到的是在某种意义上的局部最优解。 贪心算法不是对所有问题都能得到整体最优解，关键是贪心策略的选择。 贪心算法一般分为如下四步： 将问题分解为若干个子问题 找出适合的贪心策略 求解每一个子问题的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-03-26T15:28:57.000Z"}],["meta",{"property":"article:tag","content":"greedy"}],["meta",{"property":"article:published_time","content":"2024-02-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-26T15:28:57.000Z"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://thecodedmike.github.io/algorithm/leetcode/greedy/"}]]},"git":{"createdTime":1695811035000,"updatedTime":1711466937000,"contributors":[{"name":"mike","username":"mike","email":"lixiaofeng1115@outlook.com","commits":19,"url":"https://github.com/mike"}]},"readingTime":{"minutes":1.2,"words":360},"filePathRelative":"zh/algorithm/leetcode/greedy/README.md","excerpt":"<h2>贪心算法</h2>\\n<p><strong>贪心算法</strong>（greedy algorithm，又称<strong>贪婪算法</strong>）是指，在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，算法得到的是在某种意义上的局部最优解。</p>\\n<p>贪心算法不是对所有问题都能得到整体最优解，关键是贪心策略的选择。</p>\\n<p>贪心算法一般分为如下四步：</p>\\n<ul>\\n<li>将问题分解为若干个子问题</li>\\n<li>找出适合的贪心策略</li>\\n<li>求解每一个子问题的最优解</li>\\n<li>将局部最优解堆叠成全局最优解</li>\\n</ul>","autoDesc":true}')},75726:(e,t)=>{t.A=(e,t)=>{const l=e.__vccOpts||e;for(const[e,o]of t)l[e]=o;return l}}}]);