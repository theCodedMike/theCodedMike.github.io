"use strict";(self.webpackChunkmike_blog=self.webpackChunkmike_blog||[]).push([[93227],{6460:(e,n,r)=>{e.exports=r.p+"assets/img/bfs.ae37eac2.png"},10613:(e,n,r)=>{r.r(n),r.d(n,{comp:()=>_,data:()=>g});var a=r(60362),t=r(32785),i=r(53223),l=r(67319),s=r(28153),o=r(19404),d=r(73700),c=r(60876),h=r(55983),p=r(14288),u=r(11794),k=r(21442),b=r(6460);const m={},_=(0,r(75726).A)(m,[["render",function(e,n){const r=(0,a.g2)("CodeTabs"),m=(0,a.g2)("RouteLink");return(0,a.uX)(),(0,a.CE)("div",null,[n[88]||(n[88]=(0,a.Fv)('<h2 id="binary-tree" tabindex="-1"><a class="header-anchor" href="#binary-tree"><span>Binary Tree</span></a></h2><h3 id="definition" tabindex="-1"><a class="header-anchor" href="#definition"><span>Definition</span></a></h3><p>In computer science, a <a href="https://en.wikipedia.org/wiki/Binary_tree" target="_blank" rel="noopener noreferrer"><strong>binary tree</strong></a> is a tree data structure in which each node has at most two children, referred to as the <code>left child</code> and the <code>right child</code>. That is, it is a <a href="https://en.wikipedia.org/wiki/M-ary_tree" target="_blank" rel="noopener noreferrer"><strong>k-ary tree</strong></a> with k = 2. A <em>recursive definition</em> using set theory is that a binary tree is a tuple (L, S, R), where L and R are binary trees or the empty set and S is a singleton set containing the root.<br><img src="'+t+'" alt="binary_tree" loading="lazy"></p><h3 id="definition-in-graph-theory" tabindex="-1"><a class="header-anchor" href="#definition-in-graph-theory"><span>Definition in Graph Theory</span></a></h3><p>From a graph theory perspective, binary trees as defined here are <strong>arborescences</strong>. A binary tree may thus be also called a <strong>bifurcating arborescence</strong>, a term which appears in some very old programming books before the modern computer science terminology prevailed. It is also possible to interpret a binary tree as an undirected, rather than directed graph, in which case a binary tree is an ordered, rooted tree. Some authors use rooted binary tree instead of binary tree to emphasize the fact that the tree is rooted, but as defined above, a binary tree is always rooted.</p><h3 id="types-of-binary-trees" tabindex="-1"><a class="header-anchor" href="#types-of-binary-trees"><span>Types of Binary Trees</span></a></h3><ol><li><p><strong>Full Binary Tree</strong>: A full binary tree (sometimes referred to as a <strong>proper</strong>, <strong>plane</strong>, or <strong>strict</strong> binary tree) is a tree in which every node has either 0 or 2 children. Another way of defining a full binary tree is a recursive definition. A full binary tree is either:</p><ul><li>A single vertex (a single node as the root node).</li><li>A tree whose root node has two subtrees, both of which are full binary trees.<br><img src="'+i+'" alt="full binary tree" loading="lazy"></li></ul></li><li><p><strong>Perfect Binary Tree</strong>: A perfect binary tree is a binary tree in which all interior nodes have two children and all leaves have the same depth or same level (the level of a node defined as the number of edges or links from the root node to a node). A perfect binary tree is a full binary tree.<br><img src="'+l+'" alt="perfect binary tree" loading="lazy"></p></li><li><p><strong>Complete Binary Tree</strong>: A complete binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2^h nodes at the last level h. A perfect tree is therefore always complete but a complete tree is not always perfect.<br><img src="'+s+'" alt="complete binary tree, not full binary tree" loading="lazy"></p></li><li><p><strong>Degenerate Tree</strong>: A degenerate (or <strong>pathological</strong>) tree is where each parent node has only one associated child node. This means that the tree will behave like a linked list data structure.<br><img src="'+o+'" alt="degenerate tree" loading="lazy"></p></li><li><p><a href="https://en.wikipedia.org/wiki/Binary_search_tree" target="_blank" rel="noopener noreferrer"><strong>Binary Search Tree</strong></a>: an ordered or sorted binary tree, is a rooted binary tree data structure with the key of each internal node being greater than all the keys in the respective node&#39;s left subtree and less than the ones in its right subtree.<br><img src="'+d+'" alt="BST" loading="lazy"></p></li><li><p><a href="https://en.wikipedia.org/wiki/AVL_tree" target="_blank" rel="noopener noreferrer"><strong>AVL</strong></a>: an AVL tree (named after inventors Adelson-Velsky and Landis) is a <strong>self-balancing binary search tree</strong>. In an AVL tree, the heights of the two child subtrees of any node differ by at most one; if at any time they differ by more than one, <strong>rebalancing</strong> is done to restore this property.<br><img src="'+c+'" alt="AVL" loading="lazy"></p></li><li><p><a href="https://en.wikipedia.org/wiki/Red%E2%80%93black_tree" target="_blank" rel="noopener noreferrer"><strong>Red Black Tree</strong></a>: a red–black tree is a specialised binary search tree, compared to other self-balancing binary search trees, the nodes in a red-black tree hold an extra bit called &quot;color&quot; representing &quot;red&quot; and &quot;black&quot; which is used when re-organising the tree to ensure that it is always approximately balanced. It has the following properties:</p><ul><li>Every node is either red or black.</li><li>All NIL nodes are considered black.</li><li>A red node does not have a red child.</li><li>Every path from a given node to any of its descendant NIL nodes goes through the same number of black nodes.</li><li>If a node N has exactly one child, it must be a red child.<br><img src="'+h+'" alt="RBT" loading="lazy"></li></ul></li></ol><h3 id="properties-of-binary-trees" tabindex="-1"><a class="header-anchor" href="#properties-of-binary-trees"><span>Properties of Binary Trees</span></a></h3><ul><li><p>The number of nodes <code>n</code> in a full binary tree is at least <code>2ℎ + 1</code> and at most <code>2^(ℎ+1) − 1</code> (i.e., the number of nodes in a perfect binary tree), where <code>ℎ</code> is the height of the tree. A tree consisting of only a root node has a height of 0. For a perfect tree, the number of nodes is <code>1 + 2 + 4 + … + 2^ℎ = 2^(ℎ+1) − 1</code>.</p></li><li><p>The number of leaf nodes <code>l</code> in a perfect binary tree is <code>(n + 1) / 2</code> (where <code>n</code> is the number of nodes in the tree).</p></li><li><p>For any non-empty binary tree with <code>l</code> leaf nodes and <code>i2</code> nodes of degree 2 (internal nodes with two child nodes), <code>l = i2 + 1</code>.</p></li><li><p>With given <code>n</code> nodes, the minimum possible tree height is <code>ℎ = log2(n + 1) − 1</code> with which the tree is a balanced full tree or perfect tree.</p></li><li><p>A binary Tree with <code>l</code> leaves has at least the height <code>ℎ = log2(l)</code>.</p></li><li><p>In a non-empty binary tree, if <code>n</code> is the total number of nodes and <code>e</code> is the total number of edges, then <code>e = n − 1</code>.</p></li><li><p>The number of null links (i.e., absent children of the nodes) in a binary tree of <code>n</code> nodes is <code>(n + 1)</code>.</p></li><li><p>The number of internal nodes in a complete binary tree of <code>n</code> nodes is <code>⌊n/2⌋</code>.</p></li></ul><h3 id="operations-of-binary-trees" tabindex="-1"><a class="header-anchor" href="#operations-of-binary-trees"><span>Operations of Binary Trees</span></a></h3><h4 id="insertion" tabindex="-1"><a class="header-anchor" href="#insertion"><span>Insertion</span></a></h4><ul><li>Leaf nodes</li><li>Internal nodes<br><img src="'+p+'" alt="The process of inserting a node into a binary tree" loading="lazy"></li></ul><h4 id="deletion" tabindex="-1"><a class="header-anchor" href="#deletion"><span>Deletion</span></a></h4><ul><li>Node with zero or one children</li><li>Node with two children<br><img src="'+u+'" alt="The process of deleting an internal node in a binary tree" loading="lazy"></li></ul><h4 id="traversal" tabindex="-1"><a class="header-anchor" href="#traversal"><span>Traversal</span></a></h4><h5 id="depth-first-search-dfs" tabindex="-1"><a class="header-anchor" href="#depth-first-search-dfs"><span>Depth First Search(DFS)</span></a></h5><figure><img src="'+k+'" alt="depth first traversal of a binary tree" tabindex="0" loading="lazy"><figcaption>depth first traversal of a binary tree</figcaption></figure><ul><li>Pre-order(NLR), node visited at position red ●: F, B, A, D, C, E, G, I, H</li></ul>',18)),(0,a.bF)(r,{data:[{id:"Recursive Impl"},{id:"Iterative Impl"}]},{title0:(0,a.k6)(({value:e,isActive:r})=>[...n[0]||(n[0]=[(0,a.eW)("Recursive Impl",-1)])]),title1:(0,a.k6)(({value:e,isActive:r})=>[...n[1]||(n[1]=[(0,a.eW)("Iterative Impl",-1)])]),tab0:(0,a.k6)(({value:e,isActive:r})=>[...n[2]||(n[2]=[(0,a.Lk)("div",{class:"language-text line-numbers-mode","data-highlighter":"shiki","data-ext":"text",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[(0,a.Lk)("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[(0,a.Lk)("code",{class:"language-text"},[(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"procedure pre_order(node)")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"    if node = null")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"        return")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"    visit(node)")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"    pre_order(node.left)")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"    pre_order(node.right)")])])]),(0,a.Lk)("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"})])],-1)])]),tab1:(0,a.k6)(({value:e,isActive:r})=>[...n[3]||(n[3]=[(0,a.Lk)("div",{class:"language-text line-numbers-mode","data-highlighter":"shiki","data-ext":"text",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[(0,a.Lk)("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[(0,a.Lk)("code",{class:"language-text"},[(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"procedure pre_order(node)")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"    if node = null")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"        return")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"    stack ← empty stack")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"    stack.push(node)")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"    while not stack.isEmpty()")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"        node ← stack.pop()")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"        visit(node)")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"        // right child is pushed first so that left is processed first")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"        if node.right ≠ null")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"            stack.push(node.right)")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"        if node.left ≠ null")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"            stack.push(node.left)")])])]),(0,a.Lk)("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"})])],-1)])]),_:1}),n[89]||(n[89]=(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,"In-order(LNR), node visited at position green ●: A, B, C, D, E, F, G, H, I")],-1)),(0,a.bF)(r,{data:[{id:"Recursive Impl"},{id:"Iterative Impl"}]},{title0:(0,a.k6)(({value:e,isActive:r})=>[...n[4]||(n[4]=[(0,a.eW)("Recursive Impl",-1)])]),title1:(0,a.k6)(({value:e,isActive:r})=>[...n[5]||(n[5]=[(0,a.eW)("Iterative Impl",-1)])]),tab0:(0,a.k6)(({value:e,isActive:r})=>[...n[6]||(n[6]=[(0,a.Lk)("div",{class:"language-text line-numbers-mode","data-highlighter":"shiki","data-ext":"text",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[(0,a.Lk)("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[(0,a.Lk)("code",{class:"language-text"},[(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"procedure in_order(node)")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"    if node = null")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"        return")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"    in_order(node.left)")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"    visit(node)")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"    in_order(node.right)")])])]),(0,a.Lk)("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"})])],-1)])]),tab1:(0,a.k6)(({value:e,isActive:r})=>[...n[7]||(n[7]=[(0,a.Lk)("div",{class:"language-text line-numbers-mode","data-highlighter":"shiki","data-ext":"text",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[(0,a.Lk)("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[(0,a.Lk)("code",{class:"language-text"},[(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"procedure in_order(node)")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"    stack ← empty stack")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"    while not stack.isEmpty() or node ≠ null")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"        if node ≠ null")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"            stack.push(node)")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"            node ← node.left")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"        else")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"            node ← stack.pop()")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"            visit(node)")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"            node ← node.right")])])]),(0,a.Lk)("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"})])],-1)])]),_:1}),n[90]||(n[90]=(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,"Post-order(LRN), node visited at position blue ●: A, C, E, D, B, H, I, G, F")],-1)),(0,a.bF)(r,{data:[{id:"Recursive Impl"},{id:"Iterative Impl"}]},{title0:(0,a.k6)(({value:e,isActive:r})=>[...n[8]||(n[8]=[(0,a.eW)("Recursive Impl",-1)])]),title1:(0,a.k6)(({value:e,isActive:r})=>[...n[9]||(n[9]=[(0,a.eW)("Iterative Impl",-1)])]),tab0:(0,a.k6)(({value:e,isActive:r})=>[...n[10]||(n[10]=[(0,a.Lk)("div",{class:"language-text line-numbers-mode","data-highlighter":"shiki","data-ext":"text",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[(0,a.Lk)("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[(0,a.Lk)("code",{class:"language-text"},[(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"procedure post_order(node)")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"    if node = null")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"        return")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"    post_order(node.left)")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"    post_order(node.right)")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"    visit(node)")])])]),(0,a.Lk)("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"})])],-1)])]),tab1:(0,a.k6)(({value:e,isActive:r})=>[...n[11]||(n[11]=[(0,a.Lk)("div",{class:"language-text line-numbers-mode","data-highlighter":"shiki","data-ext":"text",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[(0,a.Lk)("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[(0,a.Lk)("code",{class:"language-text"},[(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"procedure post_order(node)")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"    stack ← empty stack")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"    lastNodeVisited ← null")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"    while not stack.isEmpty() or node ≠ null")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"        if node ≠ null")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"            stack.push(node)")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"            node ← node.left")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"        else")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"            peekNode ← stack.peek()")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"            // if right child exists and traversing node")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"            // from left child, then move right")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"            if peekNode.right ≠ null and lastNodeVisited ≠ peekNode.right")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"                node ← peekNode.right")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"            else")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"                visit(peekNode)")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"                lastNodeVisited ← stack.pop()")])])]),(0,a.Lk)("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"})])],-1)])]),_:1}),n[91]||(n[91]=(0,a.Lk)("h5",{id:"breadth-first-search-bfs",tabindex:"-1"},[(0,a.Lk)("a",{class:"header-anchor",href:"#breadth-first-search-bfs"},[(0,a.Lk)("span",null,"Breadth First Search(BFS)")])],-1)),n[92]||(n[92]=(0,a.Lk)("figure",null,[(0,a.Lk)("img",{src:b,alt:"breadth first search",tabindex:"0",loading:"lazy"}),(0,a.Lk)("figcaption",null,"breadth first search")],-1)),n[93]||(n[93]=(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,"Level-order: F, B, G, A, D, I, C, E, H")],-1)),(0,a.bF)(r,{data:[{id:"Iterative Impl"}]},{title0:(0,a.k6)(({value:e,isActive:r})=>[...n[12]||(n[12]=[(0,a.eW)("Iterative Impl",-1)])]),tab0:(0,a.k6)(({value:e,isActive:r})=>[...n[13]||(n[13]=[(0,a.Lk)("div",{class:"language-text line-numbers-mode","data-highlighter":"shiki","data-ext":"text",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[(0,a.Lk)("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[(0,a.Lk)("code",{class:"language-text"},[(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"procedure level_order(node)")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"    queue ← empty queue")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"    queue.enqueue(node)")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"    while not queue.isEmpty()")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"        node ← queue.dequeue()")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"        visit(node)")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"        if node.left ≠ null")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"            queue.enqueue(node.left)")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"        if node.right ≠ null")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"            queue.enqueue(node.right)")])])]),(0,a.Lk)("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"})])],-1)])]),_:1}),n[94]||(n[94]=(0,a.Fv)('<h3 id="complexity-in-big-o-notation" tabindex="-1"><a class="header-anchor" href="#complexity-in-big-o-notation"><span>Complexity in Big O Notation</span></a></h3><h4 id="time-complexity" tabindex="-1"><a class="header-anchor" href="#time-complexity"><span>Time Complexity</span></a></h4><table><thead><tr><th>Operation</th><th>Average</th><th>Worst case</th></tr></thead><tbody><tr><td>Search</td><td>O(log(n))</td><td>O(n)</td></tr><tr><td>Insert</td><td>O(log(n))</td><td>O(n)</td></tr><tr><td>Delete</td><td>O(log(n))</td><td>O(n)</td></tr></tbody></table><h4 id="space-complexity" tabindex="-1"><a class="header-anchor" href="#space-complexity"><span>Space Complexity</span></a></h4><table><thead><tr><th>Operation</th><th>Average</th><th>Worst case</th></tr></thead><tbody><tr><td>Space</td><td>O(n)</td><td>O(n)</td></tr></tbody></table><h2 id="exercise" tabindex="-1"><a class="header-anchor" href="#exercise"><span>Exercise</span></a></h2><h3 id="traversal-of-binary-trees" tabindex="-1"><a class="header-anchor" href="#traversal-of-binary-trees"><span>Traversal of Binary Trees</span></a></h3>',7)),(0,a.Lk)("p",null,[(0,a.bF)(m,{to:"/algorithm/leetcode/binary_tree/144_binary_tree_pre_order_traversal.html"},{default:(0,a.k6)(()=>[...n[14]||(n[14]=[(0,a.eW)("144: Binary Tree Pre-order Traversal",-1)])]),_:1}),n[18]||(n[18]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(m,{to:"/algorithm/leetcode/binary_tree/94_binary_tree_in_order_traversal.html"},{default:(0,a.k6)(()=>[...n[15]||(n[15]=[(0,a.eW)("94: Binary Tree In-order Traversal",-1)])]),_:1}),n[19]||(n[19]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(m,{to:"/algorithm/leetcode/binary_tree/145_binary_tree_post_order_traversal.html"},{default:(0,a.k6)(()=>[...n[16]||(n[16]=[(0,a.eW)("145: Binary Tree Post-order Traversal",-1)])]),_:1}),n[20]||(n[20]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(m,{to:"/algorithm/leetcode/binary_tree/102_binary_tree_level_order_traversal.html"},{default:(0,a.k6)(()=>[...n[17]||(n[17]=[(0,a.eW)("102: Binary Tree Level Order Traversal",-1)])]),_:1})]),n[95]||(n[95]=(0,a.Lk)("h3",{id:"level-order-traversal",tabindex:"-1"},[(0,a.Lk)("a",{class:"header-anchor",href:"#level-order-traversal"},[(0,a.Lk)("span",null,"Level Order Traversal")])],-1)),(0,a.Lk)("p",null,[(0,a.bF)(m,{to:"/algorithm/leetcode/binary_tree/107_binary_tree_level_order_traversal_ii.html"},{default:(0,a.k6)(()=>[...n[21]||(n[21]=[(0,a.eW)("107: Binary Tree Level Order Traversal II",-1)])]),_:1}),n[28]||(n[28]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(m,{to:"/algorithm/leetcode/binary_tree/199_binary_tree_right_side_view.html"},{default:(0,a.k6)(()=>[...n[22]||(n[22]=[(0,a.eW)("199: Binary Tree Right Side View",-1)])]),_:1}),n[29]||(n[29]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(m,{to:"/algorithm/leetcode/binary_tree/637_average_of_levels_in_binary_tree.html"},{default:(0,a.k6)(()=>[...n[23]||(n[23]=[(0,a.eW)("637: Average of Levels in Binary Tree",-1)])]),_:1}),n[30]||(n[30]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(m,{to:"/algorithm/leetcode/binary_tree/429_n_ary_tree_level_order_traversal.html"},{default:(0,a.k6)(()=>[...n[24]||(n[24]=[(0,a.eW)("429: N-ary Tree Level Order Traversal",-1)])]),_:1}),n[31]||(n[31]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(m,{to:"/algorithm/leetcode/binary_tree/515_find_largest_value_in_each_tree_row.html"},{default:(0,a.k6)(()=>[...n[25]||(n[25]=[(0,a.eW)("515: Find Largest Value in Each Tree Row",-1)])]),_:1}),n[32]||(n[32]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(m,{to:"/algorithm/leetcode/binary_tree/116_populating_next_right_pointers_in_each_node.html"},{default:(0,a.k6)(()=>[...n[26]||(n[26]=[(0,a.eW)("116: Populating Next Right Pointers in Each Node",-1)])]),_:1}),n[33]||(n[33]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(m,{to:"/algorithm/leetcode/binary_tree/117_populating_next_right_pointers_in_each_node_ii.html"},{default:(0,a.k6)(()=>[...n[27]||(n[27]=[(0,a.eW)("117: Populating Next Right Pointers in Each Node II",-1)])]),_:1})]),n[96]||(n[96]=(0,a.Lk)("h3",{id:"properties-of-binary-trees-1",tabindex:"-1"},[(0,a.Lk)("a",{class:"header-anchor",href:"#properties-of-binary-trees-1"},[(0,a.Lk)("span",null,"Properties of Binary Trees")])],-1)),(0,a.Lk)("p",null,[(0,a.bF)(m,{to:"/algorithm/leetcode/binary_tree/101_symmetric_tree.html"},{default:(0,a.k6)(()=>[...n[34]||(n[34]=[(0,a.eW)("101: Symmetric Tree",-1)])]),_:1}),n[44]||(n[44]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(m,{to:"/algorithm/leetcode/binary_tree/104_maximum_depth_of_binary_tree.html"},{default:(0,a.k6)(()=>[...n[35]||(n[35]=[(0,a.eW)("104: Maximum Depth of Binary Tree",-1)])]),_:1}),n[45]||(n[45]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(m,{to:"/algorithm/leetcode/binary_tree/111_minimum_depth_of_binary_tree.html"},{default:(0,a.k6)(()=>[...n[36]||(n[36]=[(0,a.eW)("111: Minimum Depth of Binary Tree",-1)])]),_:1}),n[46]||(n[46]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(m,{to:"/algorithm/leetcode/binary_tree/222_count_complete_tree_nodes.html"},{default:(0,a.k6)(()=>[...n[37]||(n[37]=[(0,a.eW)("222: Count Complete Tree Nodes",-1)])]),_:1}),n[47]||(n[47]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(m,{to:"/algorithm/leetcode/binary_tree/110_balanced_binary_tree.html"},{default:(0,a.k6)(()=>[...n[38]||(n[38]=[(0,a.eW)("110: Balanced Binary Tree",-1)])]),_:1}),n[48]||(n[48]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(m,{to:"/algorithm/leetcode/binary_tree/257_binary_tree_paths.html"},{default:(0,a.k6)(()=>[...n[39]||(n[39]=[(0,a.eW)("257: Binary Tree Paths",-1)])]),_:1}),n[49]||(n[49]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(m,{to:"/algorithm/leetcode/binary_tree/404_sum_of_left_leaves.html"},{default:(0,a.k6)(()=>[...n[40]||(n[40]=[(0,a.eW)("404: Sum of Left Leaves",-1)])]),_:1}),n[50]||(n[50]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(m,{to:"/algorithm/leetcode/binary_tree/513_find_bottom_left_tree_value.html"},{default:(0,a.k6)(()=>[...n[41]||(n[41]=[(0,a.eW)("513: Find Bottom Left Tree Value",-1)])]),_:1}),n[51]||(n[51]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(m,{to:"/algorithm/leetcode/binary_tree/112_path_sum.html"},{default:(0,a.k6)(()=>[...n[42]||(n[42]=[(0,a.eW)("112: Path Sum",-1)])]),_:1}),n[52]||(n[52]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(m,{to:"/algorithm/leetcode/binary_tree/113_path_sum_ii.html"},{default:(0,a.k6)(()=>[...n[43]||(n[43]=[(0,a.eW)("113: Path Sum II",-1)])]),_:1})]),n[97]||(n[97]=(0,a.Lk)("h3",{id:"operations-of-binary-trees-1",tabindex:"-1"},[(0,a.Lk)("a",{class:"header-anchor",href:"#operations-of-binary-trees-1"},[(0,a.Lk)("span",null,"Operations of Binary Trees")])],-1)),(0,a.Lk)("p",null,[(0,a.bF)(m,{to:"/algorithm/leetcode/binary_tree/226_invert_binary_tree.html"},{default:(0,a.k6)(()=>[...n[53]||(n[53]=[(0,a.eW)("226: Invert Binary Tree",-1)])]),_:1}),n[58]||(n[58]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(m,{to:"/algorithm/leetcode/binary_tree/105_construct_binary_tree_from_preorder_and_inorder_traversal.html"},{default:(0,a.k6)(()=>[...n[54]||(n[54]=[(0,a.eW)("105: Construct Binary Tree from Pre-order and In-order Traversal",-1)])]),_:1}),n[59]||(n[59]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(m,{to:"/algorithm/leetcode/binary_tree/106_construct_binary_tree_from_post_order_and_in_order_traversal.html"},{default:(0,a.k6)(()=>[...n[55]||(n[55]=[(0,a.eW)("106: Construct Binary Tree from Post-order and In-order Traversal",-1)])]),_:1}),n[60]||(n[60]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(m,{to:"/algorithm/leetcode/binary_tree/654_maximum_binary_tree.html"},{default:(0,a.k6)(()=>[...n[56]||(n[56]=[(0,a.eW)("654: Maximum Binary Tree",-1)])]),_:1}),n[61]||(n[61]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(m,{to:"/algorithm/leetcode/binary_tree/617_merge_two_binary_trees.html"},{default:(0,a.k6)(()=>[...n[57]||(n[57]=[(0,a.eW)("617: Merge Two Binary Trees",-1)])]),_:1})]),n[98]||(n[98]=(0,a.Lk)("h3",{id:"properties-of-binary-search-trees",tabindex:"-1"},[(0,a.Lk)("a",{class:"header-anchor",href:"#properties-of-binary-search-trees"},[(0,a.Lk)("span",null,"Properties of Binary Search Trees")])],-1)),(0,a.Lk)("p",null,[(0,a.bF)(m,{to:"/algorithm/leetcode/binary_tree/700_search_in_a_binary_search_tree.html"},{default:(0,a.k6)(()=>[...n[62]||(n[62]=[(0,a.eW)("700: Search in a Binary Search Tree",-1)])]),_:1}),n[67]||(n[67]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(m,{to:"/algorithm/leetcode/binary_tree/98_validate_binary_search_tree.html"},{default:(0,a.k6)(()=>[...n[63]||(n[63]=[(0,a.eW)("98: Validate Binary Search Tree",-1)])]),_:1}),n[68]||(n[68]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(m,{to:"/algorithm/leetcode/binary_tree/530_minimum_absolute_difference_in_bst.html"},{default:(0,a.k6)(()=>[...n[64]||(n[64]=[(0,a.eW)("530: Minimum Absolute Difference in BST",-1)])]),_:1}),n[69]||(n[69]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(m,{to:"/algorithm/leetcode/binary_tree/501_find_mode_in_binary_search_tree.html"},{default:(0,a.k6)(()=>[...n[65]||(n[65]=[(0,a.eW)("501: Find Mode in Binary Search Tree",-1)])]),_:1}),n[70]||(n[70]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(m,{to:"/algorithm/leetcode/binary_tree/538_convert_bst_to_greater_tree.html"},{default:(0,a.k6)(()=>[...n[66]||(n[66]=[(0,a.eW)("538: Convert BST to Greater Tree",-1)])]),_:1})]),n[99]||(n[99]=(0,a.Lk)("h3",{id:"common-ancestor-of-binary-trees",tabindex:"-1"},[(0,a.Lk)("a",{class:"header-anchor",href:"#common-ancestor-of-binary-trees"},[(0,a.Lk)("span",null,"Common Ancestor of Binary Trees")])],-1)),(0,a.Lk)("p",null,[(0,a.bF)(m,{to:"/algorithm/leetcode/binary_tree/236_lowest_common_ancestor_of_a_binary_tree.html"},{default:(0,a.k6)(()=>[...n[71]||(n[71]=[(0,a.eW)("236: Lowest Common Ancestor of a Binary Tree",-1)])]),_:1}),n[73]||(n[73]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(m,{to:"/algorithm/leetcode/binary_tree/235_lowest_common_ancestor_of_a_binary_search_tree.html"},{default:(0,a.k6)(()=>[...n[72]||(n[72]=[(0,a.eW)("235: Lowest Common Ancestor of a Binary Search Tree",-1)])]),_:1})]),n[100]||(n[100]=(0,a.Lk)("h3",{id:"operations-of-binary-search-trees",tabindex:"-1"},[(0,a.Lk)("a",{class:"header-anchor",href:"#operations-of-binary-search-trees"},[(0,a.Lk)("span",null,"Operations of Binary Search Trees")])],-1)),(0,a.Lk)("p",null,[(0,a.bF)(m,{to:"/algorithm/leetcode/binary_tree/701_insert_into_a_binary_search_tree.html"},{default:(0,a.k6)(()=>[...n[74]||(n[74]=[(0,a.eW)("701: Insert into a Binary Search Tree",-1)])]),_:1}),n[79]||(n[79]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(m,{to:"/algorithm/leetcode/binary_tree/450_delete_node_in_a_bst.html"},{default:(0,a.k6)(()=>[...n[75]||(n[75]=[(0,a.eW)("450: Delete Node in a BST",-1)])]),_:1}),n[80]||(n[80]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(m,{to:"/algorithm/leetcode/binary_tree/669_trim_a_binary_search_tree.html"},{default:(0,a.k6)(()=>[...n[76]||(n[76]=[(0,a.eW)("669: Trim a Binary Search Tree",-1)])]),_:1}),n[81]||(n[81]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(m,{to:"/algorithm/leetcode/binary_tree/108_convert_sorted_array_to_binary_search_tree.html"},{default:(0,a.k6)(()=>[...n[77]||(n[77]=[(0,a.eW)("108: Convert Sorted Array to Binary Search Tree",-1)])]),_:1}),n[82]||(n[82]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(m,{to:"/algorithm/leetcode/binary_tree/109_convert_sorted_list_to_binary_search_tree.html"},{default:(0,a.k6)(()=>[...n[78]||(n[78]=[(0,a.eW)("109: Convert Sorted List to Binary Search Tree",-1)])]),_:1})]),n[101]||(n[101]=(0,a.Lk)("h3",{id:"other",tabindex:"-1"},[(0,a.Lk)("a",{class:"header-anchor",href:"#other"},[(0,a.Lk)("span",null,"Other")])],-1)),(0,a.Lk)("p",null,[(0,a.bF)(m,{to:"/algorithm/leetcode/binary_tree/100_same_tree.html"},{default:(0,a.k6)(()=>[...n[83]||(n[83]=[(0,a.eW)("100: Same Tree",-1)])]),_:1}),n[86]||(n[86]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(m,{to:"/algorithm/leetcode/binary_tree/572_subtree_of_another_tree.html"},{default:(0,a.k6)(()=>[...n[84]||(n[84]=[(0,a.eW)("572: Subtree of Another Tree",-1)])]),_:1}),n[87]||(n[87]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(m,{to:"/algorithm/leetcode/binary_tree/559_maximum_depth_of_n_ary_tree.html"},{default:(0,a.k6)(()=>[...n[85]||(n[85]=[(0,a.eW)("559: Maximum Depth of N-ary Tree",-1)])]),_:1})]),n[102]||(n[102]=(0,a.Lk)("h2",{id:"summary",tabindex:"-1"},[(0,a.Lk)("a",{class:"header-anchor",href:"#summary"},[(0,a.Lk)("span",null,"Summary")])],-1))])}]]),g=JSON.parse('{"path":"/algorithm/leetcode/binary_tree/","title":"Binary Tree","lang":"en-US","frontmatter":{"title":"Binary Tree","icon":"discover","date":"2023-12-05T00:00:00.000Z","dir":{"order":7},"category":"leetcode","tag":"binary tree","sticky":false,"description":"Binary Tree Definition In computer science, a binary tree is a tree data structure in which each node has at most two children, referred to as the left child and the right child...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Binary Tree\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-12-05T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-25T10:00:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mike\\"}]}"],["meta",{"property":"og:url","content":"https://thecodedmike.github.io/algorithm/leetcode/binary_tree/"}],["meta",{"property":"og:site_name","content":"Mike\'s Blog"}],["meta",{"property":"og:title","content":"Binary Tree"}],["meta",{"property":"og:description","content":"Binary Tree Definition In computer science, a binary tree is a tree data structure in which each node has at most two children, referred to as the left child and the right child..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-25T10:00:12.000Z"}],["meta",{"property":"article:tag","content":"binary tree"}],["meta",{"property":"article:published_time","content":"2023-12-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-25T10:00:12.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://thecodedmike.github.io/zh/algorithm/leetcode/binary_tree/"}]]},"git":{"createdTime":1695811035000,"updatedTime":1706176812000,"contributors":[{"name":"mike","username":"mike","email":"lixiaofeng1115@outlook.com","commits":44,"url":"https://github.com/mike"}]},"readingTime":{"minutes":5.51,"words":1653},"filePathRelative":"algorithm/leetcode/binary_tree/README.md","excerpt":"<h2>Binary Tree</h2>\\n<h3>Definition</h3>\\n<p>In computer science, a <a href=\\"https://en.wikipedia.org/wiki/Binary_tree\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><strong>binary tree</strong></a> is a tree data structure in which each node has at most two children, referred to as the <code>left child</code> and the <code>right child</code>. That is, it is a <a href=\\"https://en.wikipedia.org/wiki/M-ary_tree\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><strong>k-ary tree</strong></a> with k = 2. A <em>recursive definition</em> using set theory is that a binary tree is a tuple (L, S, R), where L and R are binary trees or the empty set and S is a singleton set containing the root.<br>\\n</p>","autoDesc":true}')},11794:(e,n,r)=>{e.exports=r.p+"assets/img/delete_node_in_a_tree.99d0a798.png"},14288:(e,n,r)=>{e.exports=r.p+"assets/img/insert_node_in_a_tree.cc42468b.png"},19404:(e,n,r)=>{e.exports=r.p+"assets/img/degenerate_tree.b2a26899.png"},21442:(e,n,r)=>{e.exports=r.p+"assets/img/dfs.185c1323.png"},28153:(e,n,r)=>{e.exports=r.p+"assets/img/complete_binary_tree.7ef3d299.png"},32785:(e,n,r)=>{e.exports=r.p+"assets/img/binary_tree.cbf68e7c.png"},53223:(e,n,r)=>{e.exports=r.p+"assets/img/full_binary_tree.b7408a9c.png"},55983:(e,n,r)=>{e.exports=r.p+"assets/img/rbt.9772ba20.png"},60876:(e,n,r)=>{e.exports=r.p+"assets/img/avl.2b8b3b37.png"},67319:(e,n,r)=>{e.exports=r.p+"assets/img/perfect_binary_tree.1a0e6830.png"},73700:(e,n,r)=>{e.exports=r.p+"assets/img/bst.32e6f716.png"},75726:(e,n)=>{n.A=(e,n)=>{const r=e.__vccOpts||e;for(const[e,a]of n)r[e]=a;return r}}}]);