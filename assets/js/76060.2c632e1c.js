"use strict";(self.webpackChunkmike_blog=self.webpackChunkmike_blog||[]).push([[76060],{76060:(t,e,r)=>{r.d(e,{diagram:()=>kt});var a=r(94708),n=r(54851),i=r(91144),o=(r(69075),r(5758),r(74723),r(75140),r(44608),r(58742),r(23066)),c=(r(50491),r(1913)),s=r(91089),h=(r(709),r(56371),r(30543),r(57824),r(51899),r(47661)),d={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},l=c.i.gitGraph,m=(0,h.a)(()=>(0,o.l)({...l,...(0,c.q)().gitGraph}),"getConfig"),$=new i.a(()=>{let t=m(),e=t.mainBranchName,r=t.mainBranchOrder;return{mainBranchName:e,commits:new Map,head:null,branchConfig:new Map([[e,{name:e,order:r}]]),branches:new Map([[e,null]]),currBranch:e,direction:"LR",seq:0,options:{}}});function g(){return(0,o.f)({length:7})}function y(t,e){let r=Object.create(null);return t.reduce((t,a)=>{let n=e(a);return r[n]||(r[n]=!0,t.push(a)),t},[])}(0,h.a)(g,"getID"),(0,h.a)(y,"uniqBy");var p=(0,h.a)(function(t){$.records.direction=t},"setDirection"),x=(0,h.a)(function(t){s.b.debug("options str",t),t=t?.trim(),t=t||"{}";try{$.records.options=JSON.parse(t)}catch(t){s.b.error("error while parsing gitGraph options",t.message)}},"setOptions"),f=(0,h.a)(function(){return $.records.options},"getOptions"),u=(0,h.a)(function(t){let e=t.msg,r=t.id,a=t.type,n=t.tags;s.b.info("commit",e,r,a,n),s.b.debug("Entering commit:",e,r,a,n);let i=m();r=c.D.sanitizeText(r,i),e=c.D.sanitizeText(e,i),n=n?.map(t=>c.D.sanitizeText(t,i));let o={id:r||$.records.seq+"-"+g(),message:e,seq:$.records.seq++,type:a??d.NORMAL,tags:n??[],parents:null==$.records.head?[]:[$.records.head.id],branch:$.records.currBranch};$.records.head=o,s.b.info("main branch",i.mainBranchName),$.records.commits.has(o.id)&&s.b.warn(`Commit ID ${o.id} already exists`),$.records.commits.set(o.id,o),$.records.branches.set($.records.currBranch,o.id),s.b.debug("in pushCommit "+o.id)},"commit"),b=(0,h.a)(function(t){let e=t.name,r=t.order;if(e=c.D.sanitizeText(e,m()),$.records.branches.has(e))throw new Error(`Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout ${e}")`);$.records.branches.set(e,null!=$.records.head?$.records.head.id:null),$.records.branchConfig.set(e,{name:e,order:r}),E(e),s.b.debug("in createBranch")},"branch"),w=(0,h.a)(t=>{let e=t.branch,r=t.id,a=t.type,n=t.tags,i=m();e=c.D.sanitizeText(e,i),r&&(r=c.D.sanitizeText(r,i));let o=$.records.branches.get($.records.currBranch),h=$.records.branches.get(e),l=o?$.records.commits.get(o):void 0,y=h?$.records.commits.get(h):void 0;if(l&&y&&l.branch===e)throw new Error(`Cannot merge branch '${e}' into itself.`);if($.records.currBranch===e){let t=new Error('Incorrect usage of "merge". Cannot merge a branch to itself');throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:["branch abc"]},t}if(void 0===l||!l){let t=new Error(`Incorrect usage of "merge". Current branch (${$.records.currBranch})has no commits`);throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:["commit"]},t}if(!$.records.branches.has(e)){let t=new Error('Incorrect usage of "merge". Branch to be merged ('+e+") does not exist");throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:[`branch ${e}`]},t}if(void 0===y||!y){let t=new Error('Incorrect usage of "merge". Branch to be merged ('+e+") has no commits");throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:['"commit"']},t}if(l===y){let t=new Error('Incorrect usage of "merge". Both branches have same head');throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:["branch abc"]},t}if(r&&$.records.commits.has(r)){let t=new Error('Incorrect usage of "merge". Commit with id:'+r+" already exists, use different custom id");throw t.hash={text:`merge ${e} ${r} ${a} ${n?.join(" ")}`,token:`merge ${e} ${r} ${a} ${n?.join(" ")}`,expected:[`merge ${e} ${r}_UNIQUE ${a} ${n?.join(" ")}`]},t}let p=h||"",x={id:r||`${$.records.seq}-${g()}`,message:`merged branch ${e} into ${$.records.currBranch}`,seq:$.records.seq++,parents:null==$.records.head?[]:[$.records.head.id,p],branch:$.records.currBranch,type:d.MERGE,customType:a,customId:!!r,tags:n??[]};$.records.head=x,$.records.commits.set(x.id,x),$.records.branches.set($.records.currBranch,x.id),s.b.debug($.records.branches),s.b.debug("in mergeBranch")},"merge"),B=(0,h.a)(function(t){let e=t.id,r=t.targetId,a=t.tags,n=t.parent;s.b.debug("Entering cherryPick:",e,r,a);let i=m();if(e=c.D.sanitizeText(e,i),r=c.D.sanitizeText(r,i),a=a?.map(t=>c.D.sanitizeText(t,i)),n=c.D.sanitizeText(n,i),!e||!$.records.commits.has(e)){let t=new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');throw t.hash={text:`cherryPick ${e} ${r}`,token:`cherryPick ${e} ${r}`,expected:["cherry-pick abc"]},t}let o=$.records.commits.get(e);if(void 0===o||!o)throw new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');if(n&&(!Array.isArray(o.parents)||!o.parents.includes(n)))throw new Error("Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.");let h=o.branch;if(o.type===d.MERGE&&!n)throw new Error("Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.");if(!r||!$.records.commits.has(r)){if(h===$.records.currBranch){let t=new Error('Incorrect usage of "cherryPick". Source commit is already on current branch');throw t.hash={text:`cherryPick ${e} ${r}`,token:`cherryPick ${e} ${r}`,expected:["cherry-pick abc"]},t}let t=$.records.branches.get($.records.currBranch);if(void 0===t||!t){let t=new Error(`Incorrect usage of "cherry-pick". Current branch (${$.records.currBranch})has no commits`);throw t.hash={text:`cherryPick ${e} ${r}`,token:`cherryPick ${e} ${r}`,expected:["cherry-pick abc"]},t}let i=$.records.commits.get(t);if(void 0===i||!i){let t=new Error(`Incorrect usage of "cherry-pick". Current branch (${$.records.currBranch})has no commits`);throw t.hash={text:`cherryPick ${e} ${r}`,token:`cherryPick ${e} ${r}`,expected:["cherry-pick abc"]},t}let c={id:$.records.seq+"-"+g(),message:`cherry-picked ${o?.message} into ${$.records.currBranch}`,seq:$.records.seq++,parents:null==$.records.head?[]:[$.records.head.id,o.id],branch:$.records.currBranch,type:d.CHERRY_PICK,tags:a?a.filter(Boolean):[`cherry-pick:${o.id}${o.type===d.MERGE?`|parent:${n}`:""}`]};$.records.head=c,$.records.commits.set(c.id,c),$.records.branches.set($.records.currBranch,c.id),s.b.debug($.records.branches),s.b.debug("in cherryPick")}},"cherryPick"),E=(0,h.a)(function(t){if(t=c.D.sanitizeText(t,m()),!$.records.branches.has(t)){let e=new Error(`Trying to checkout branch which is not yet created. (Help try using "branch ${t}")`);throw e.hash={text:`checkout ${t}`,token:`checkout ${t}`,expected:[`branch ${t}`]},e}{$.records.currBranch=t;let e=$.records.branches.get($.records.currBranch);$.records.head=void 0!==e&&e?$.records.commits.get(e)??null:null}},"checkout");function k(t,e,r){let a=t.indexOf(e);-1===a?t.push(r):t.splice(a,1,r)}function C(t){let e=t.reduce((t,e)=>t.seq>e.seq?t:e,t[0]),r="";t.forEach(function(t){r+=t===e?"\t*":"\t|"});let a=[r,e.id,e.seq];for(let t in $.records.branches)$.records.branches.get(t)===e.id&&a.push(t);if(s.b.debug(a.join(" ")),e.parents&&2==e.parents.length&&e.parents[0]&&e.parents[1]){let r=$.records.commits.get(e.parents[0]);k(t,e,r),e.parents[1]&&t.push($.records.commits.get(e.parents[1]))}else{if(0==e.parents.length)return;if(e.parents[0]){let r=$.records.commits.get(e.parents[0]);k(t,e,r)}}C(t=y(t,t=>t.id))}(0,h.a)(k,"upsert"),(0,h.a)(C,"prettyPrintCommitHistory");var T=(0,h.a)(function(){s.b.debug($.records.commits),C([R()[0]])},"prettyPrint"),L=(0,h.a)(function(){$.reset(),(0,c.O)()},"clear"),M=(0,h.a)(function(){return[...$.records.branchConfig.values()].map((t,e)=>null!==t.order&&void 0!==t.order?t:{...t,order:parseFloat(`0.${e}`)}).sort((t,e)=>(t.order??0)-(e.order??0)).map(({name:t})=>({name:t}))},"getBranchesAsObjArray"),v=(0,h.a)(function(){return $.records.branches},"getBranches"),P=(0,h.a)(function(){return $.records.commits},"getCommits"),R=(0,h.a)(function(){let t=[...$.records.commits.values()];return t.forEach(function(t){s.b.debug(t.id)}),t.sort((t,e)=>t.seq-e.seq),t},"getCommitsArray"),A=(0,h.a)(function(){return $.records.currBranch},"getCurrentBranch"),I=(0,h.a)(function(){return $.records.direction},"getDirection"),G=(0,h.a)(function(){return $.records.head},"getHead"),D={commitType:d,getConfig:m,setDirection:p,setOptions:x,getOptions:f,commit:u,branch:b,merge:w,cherryPick:B,checkout:E,prettyPrint:T,clear:L,getBranchesAsObjArray:M,getBranches:v,getCommits:P,getCommitsArray:R,getCurrentBranch:A,getDirection:I,getHead:G,setAccTitle:c.P,getAccTitle:c.Q,getAccDescription:c.S,setAccDescription:c.R,setDiagramTitle:c.T,getDiagramTitle:c.U},O=(0,h.a)((t,e)=>{(0,a.a)(t,e),t.dir&&e.setDirection(t.dir);for(let r of t.statements)q(r,e)},"populate"),q=(0,h.a)((t,e)=>{let r={Commit:(0,h.a)(t=>e.commit(H(t)),"Commit"),Branch:(0,h.a)(t=>e.branch(z(t)),"Branch"),Merge:(0,h.a)(t=>e.merge(S(t)),"Merge"),Checkout:(0,h.a)(t=>e.checkout(N(t)),"Checkout"),CherryPicking:(0,h.a)(t=>e.cherryPick(W(t)),"CherryPicking")}[t.$type];r?r(t):s.b.error(`Unknown statement type: ${t.$type}`)},"parseStatement"),H=(0,h.a)(t=>({id:t.id,msg:t.message??"",type:void 0!==t.type?d[t.type]:d.NORMAL,tags:t.tags??void 0}),"parseCommit"),z=(0,h.a)(t=>({name:t.name,order:t.order??0}),"parseBranch"),S=(0,h.a)(t=>({branch:t.branch,id:t.id??"",type:void 0!==t.type?d[t.type]:void 0,tags:t.tags??void 0}),"parseMerge"),N=(0,h.a)(t=>t.branch,"parseCheckout"),W=(0,h.a)(t=>({id:t.id,targetId:"",tags:0===t.tags?.length?void 0:t.tags,parent:t.parent}),"parseCherryPicking"),j={parse:(0,h.a)(async t=>{let e=await(0,n.a)("gitGraph",t);s.b.debug(e),O(e,D)},"parse")},_=(0,c.W)(),F=_?.gitGraph,K=10,Y=40,U=new Map,V=new Map,Q=new Map,J=[],X=0,Z="LR",tt=(0,h.a)(()=>{U.clear(),V.clear(),Q.clear(),X=0,J=[],Z="LR"},"clear"),et=(0,h.a)(t=>{let e=document.createElementNS("http://www.w3.org/2000/svg","text");return("string"==typeof t?t.split(/\\n|\n|<br\s*\/?>/gi):t).forEach(t=>{let r=document.createElementNS("http://www.w3.org/2000/svg","tspan");r.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),r.setAttribute("dy","1em"),r.setAttribute("x","0"),r.setAttribute("class","row"),r.textContent=t.trim(),e.appendChild(r)}),e},"drawText"),rt=(0,h.a)(t=>{let e,r,a;return"BT"===Z?(r=(0,h.a)((t,e)=>t<=e,"comparisonFunc"),a=1/0):(r=(0,h.a)((t,e)=>t>=e,"comparisonFunc"),a=0),t.forEach(t=>{let n="TB"===Z||"BT"==Z?V.get(t)?.y:V.get(t)?.x;void 0!==n&&r(n,a)&&(e=t,a=n)}),e},"findClosestParent"),at=(0,h.a)(t=>{let e="",r=1/0;return t.forEach(t=>{let a=V.get(t).y;a<=r&&(e=t,r=a)}),e||void 0},"findClosestParentBT"),nt=(0,h.a)((t,e,r)=>{let a=r,n=r,i=[];t.forEach(t=>{let r=e.get(t);if(!r)throw new Error(`Commit not found for key ${t}`);r.parents.length?(a=ot(r),n=Math.max(a,n)):i.push(r),ct(r,a)}),a=n,i.forEach(t=>{st(t,a,r)}),t.forEach(t=>{let r=e.get(t);if(r?.parents.length){let t=at(r.parents);a=V.get(t).y-Y,a<=n&&(n=a);let e=U.get(r.branch).pos,i=a-K;V.set(r.id,{x:e,y:i})}})},"setParallelBTPos"),it=(0,h.a)(t=>{let e=rt(t.parents.filter(t=>null!==t));if(!e)throw new Error(`Closest parent not found for commit ${t.id}`);let r=V.get(e)?.y;if(void 0===r)throw new Error(`Closest parent position not found for commit ${t.id}`);return r},"findClosestParentPos"),ot=(0,h.a)(t=>it(t)+Y,"calculateCommitPosition"),ct=(0,h.a)((t,e)=>{let r=U.get(t.branch);if(!r)throw new Error(`Branch not found for commit ${t.id}`);let a=r.pos,n=e+K;return V.set(t.id,{x:a,y:n}),{x:a,y:n}},"setCommitPosition"),st=(0,h.a)((t,e,r)=>{let a=U.get(t.branch);if(!a)throw new Error(`Branch not found for commit ${t.id}`);let n=e+r,i=a.pos;V.set(t.id,{x:i,y:n})},"setRootPosition"),ht=(0,h.a)((t,e,r,a,n,i)=>{if(i===d.HIGHLIGHT)t.append("rect").attr("x",r.x-10).attr("y",r.y-10).attr("width",20).attr("height",20).attr("class",`commit ${e.id} commit-highlight${n%8} ${a}-outer`),t.append("rect").attr("x",r.x-6).attr("y",r.y-6).attr("width",12).attr("height",12).attr("class",`commit ${e.id} commit${n%8} ${a}-inner`);else if(i===d.CHERRY_PICK)t.append("circle").attr("cx",r.x).attr("cy",r.y).attr("r",10).attr("class",`commit ${e.id} ${a}`),t.append("circle").attr("cx",r.x-3).attr("cy",r.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${e.id} ${a}`),t.append("circle").attr("cx",r.x+3).attr("cy",r.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${e.id} ${a}`),t.append("line").attr("x1",r.x+3).attr("y1",r.y+1).attr("x2",r.x).attr("y2",r.y-5).attr("stroke","#fff").attr("class",`commit ${e.id} ${a}`),t.append("line").attr("x1",r.x-3).attr("y1",r.y+1).attr("x2",r.x).attr("y2",r.y-5).attr("stroke","#fff").attr("class",`commit ${e.id} ${a}`);else{let o=t.append("circle");if(o.attr("cx",r.x),o.attr("cy",r.y),o.attr("r",e.type===d.MERGE?9:10),o.attr("class",`commit ${e.id} commit${n%8}`),i===d.MERGE){let i=t.append("circle");i.attr("cx",r.x),i.attr("cy",r.y),i.attr("r",6),i.attr("class",`commit ${a} ${e.id} commit${n%8}`)}i===d.REVERSE&&t.append("path").attr("d",`M ${r.x-5},${r.y-5}L${r.x+5},${r.y+5}M${r.x-5},${r.y+5}L${r.x+5},${r.y-5}`).attr("class",`commit ${a} ${e.id} commit${n%8}`)}},"drawCommitBullet"),dt=(0,h.a)((t,e,r,a)=>{if(e.type!==d.CHERRY_PICK&&(e.customId&&e.type===d.MERGE||e.type!==d.MERGE)&&F?.showCommitLabel){let n=t.append("g"),i=n.insert("rect").attr("class","commit-label-bkg"),o=n.append("text").attr("x",a).attr("y",r.y+25).attr("class","commit-label").text(e.id),c=o.node()?.getBBox();if(c&&(i.attr("x",r.posWithOffset-c.width/2-2).attr("y",r.y+13.5).attr("width",c.width+4).attr("height",c.height+4),"TB"===Z||"BT"===Z?(i.attr("x",r.x-(c.width+16+5)).attr("y",r.y-12),o.attr("x",r.x-(c.width+16)).attr("y",r.y+c.height-12)):o.attr("x",r.posWithOffset-c.width/2),F.rotateCommitLabel))if("TB"===Z||"BT"===Z)o.attr("transform","rotate(-45, "+r.x+", "+r.y+")"),i.attr("transform","rotate(-45, "+r.x+", "+r.y+")");else{let t=-7.5-(c.width+10)/25*9.5,e=10+c.width/25*8.5;n.attr("transform","translate("+t+", "+e+") rotate(-45, "+a+", "+r.y+")")}}},"drawCommitLabel"),lt=(0,h.a)((t,e,r,a)=>{if(e.tags.length>0){let n=0,i=0,o=0,c=[];for(let a of e.tags.reverse()){let e=t.insert("polygon"),s=t.append("circle"),h=t.append("text").attr("y",r.y-16-n).attr("class","tag-label").text(a),d=h.node()?.getBBox();if(!d)throw new Error("Tag bbox not found");i=Math.max(i,d.width),o=Math.max(o,d.height),h.attr("x",r.posWithOffset-d.width/2),c.push({tag:h,hole:s,rect:e,yOffset:n}),n+=20}for(let{tag:t,hole:e,rect:n,yOffset:s}of c){let c=o/2,h=r.y-19.2-s;if(n.attr("class","tag-label-bkg").attr("points",`\n      ${a-i/2-2},${h+2}  \n      ${a-i/2-2},${h-2}\n      ${r.posWithOffset-i/2-4},${h-c-2}\n      ${r.posWithOffset+i/2+4},${h-c-2}\n      ${r.posWithOffset+i/2+4},${h+c+2}\n      ${r.posWithOffset-i/2-4},${h+c+2}`),e.attr("cy",h).attr("cx",a-i/2+2).attr("r",1.5).attr("class","tag-hole"),"TB"===Z||"BT"===Z){let o=a+s;n.attr("class","tag-label-bkg").attr("points",`\n        ${r.x},${o+2}\n        ${r.x},${o-2}\n        ${r.x+K},${o-c-2}\n        ${r.x+K+i+4},${o-c-2}\n        ${r.x+K+i+4},${o+c+2}\n        ${r.x+K},${o+c+2}`).attr("transform","translate(12,12) rotate(45, "+r.x+","+a+")"),e.attr("cx",r.x+2).attr("cy",o).attr("transform","translate(12,12) rotate(45, "+r.x+","+a+")"),t.attr("x",r.x+5).attr("y",o+3).attr("transform","translate(14,14) rotate(45, "+r.x+","+a+")")}}}},"drawCommitTags"),mt=(0,h.a)(t=>{switch(t.customType??t.type){case d.NORMAL:return"commit-normal";case d.REVERSE:return"commit-reverse";case d.HIGHLIGHT:return"commit-highlight";case d.MERGE:return"commit-merge";case d.CHERRY_PICK:return"commit-cherry-pick";default:return"commit-normal"}},"getCommitClassType"),$t=(0,h.a)((t,e,r,a)=>{let n={x:0,y:0};if(!(t.parents.length>0))return"TB"===e?30:"BT"===e?(a.get(t.id)??n).y-Y:0;{let r=rt(t.parents);if(r){let i=a.get(r)??n;return"TB"===e?i.y+Y:"BT"===e?(a.get(t.id)??n).y-Y:i.x+Y}}return 0},"calculatePosition"),gt=(0,h.a)((t,e,r)=>{let a="BT"===Z&&r?e:e+K,n="TB"===Z||"BT"===Z?a:U.get(t.branch)?.pos,i="TB"===Z||"BT"===Z?U.get(t.branch)?.pos:a;if(void 0===i||void 0===n)throw new Error(`Position were undefined for commit ${t.id}`);return{x:i,y:n,posWithOffset:a}},"getCommitPosition"),yt=(0,h.a)((t,e,r)=>{if(!F)throw new Error("GitGraph config not found");let a=t.append("g").attr("class","commit-bullets"),n=t.append("g").attr("class","commit-labels"),i="TB"===Z||"BT"===Z?30:0,o=[...e.keys()],c=F?.parallelCommits??!1,s=(0,h.a)((t,r)=>{let a=e.get(t)?.seq,n=e.get(r)?.seq;return void 0!==a&&void 0!==n?a-n:0},"sortKeys"),d=o.sort(s);"BT"===Z&&(c&&nt(d,e,i),d=d.reverse()),d.forEach(t=>{let o=e.get(t);if(!o)throw new Error(`Commit not found for key ${t}`);c&&(i=$t(o,Z,i,V));let s=gt(o,i,c);if(r){let t=mt(o),e=o.customType??o.type,r=U.get(o.branch)?.index??0;ht(a,o,s,t,r,e),dt(n,o,s,i),lt(n,o,s,i)}"TB"===Z||"BT"===Z?V.set(o.id,{x:s.x,y:s.posWithOffset}):V.set(o.id,{x:s.posWithOffset,y:s.y}),i="BT"===Z&&c?i+Y:i+Y+K,i>X&&(X=i)})},"drawCommits"),pt=(0,h.a)((t,e,r,a,n)=>{let i=("TB"===Z||"BT"===Z?r.x<a.x:r.y<a.y)?e.branch:t.branch,o=(0,h.a)(t=>t.branch===i,"isOnBranchToGetCurve"),c=(0,h.a)(r=>r.seq>t.seq&&r.seq<e.seq,"isBetweenCommits");return[...n.values()].some(t=>c(t)&&o(t))},"shouldRerouteArrow"),xt=(0,h.a)((t,e,r=0)=>{let a=t+Math.abs(t-e)/2;if(r>5)return a;if(J.every(t=>Math.abs(t-a)>=10))return J.push(a),a;let n=Math.abs(t-e);return xt(t,e-n/5,r+1)},"findLane"),ft=(0,h.a)((t,e,r,a)=>{let n=V.get(e.id),i=V.get(r.id);if(void 0===n||void 0===i)throw new Error(`Commit positions not found for commits ${e.id} and ${r.id}`);let o,c=pt(e,r,n,i,a),s="",h="",l=0,m=0,$=U.get(r.branch)?.index;if(r.type===d.MERGE&&e.id!==r.parents[0]&&($=U.get(e.branch)?.index),c){s="A 10 10, 0, 0, 0,",h="A 10 10, 0, 0, 1,",l=10,m=10;let t=n.y<i.y?xt(n.y,i.y):xt(i.y,n.y),r=n.x<i.x?xt(n.x,i.x):xt(i.x,n.x);"TB"===Z?n.x<i.x?o=`M ${n.x} ${n.y} L ${r-l} ${n.y} ${h} ${r} ${n.y+m} L ${r} ${i.y-l} ${s} ${r+m} ${i.y} L ${i.x} ${i.y}`:($=U.get(e.branch)?.index,o=`M ${n.x} ${n.y} L ${r+l} ${n.y} ${s} ${r} ${n.y+m} L ${r} ${i.y-l} ${h} ${r-m} ${i.y} L ${i.x} ${i.y}`):"BT"===Z?n.x<i.x?o=`M ${n.x} ${n.y} L ${r-l} ${n.y} ${s} ${r} ${n.y-m} L ${r} ${i.y+l} ${h} ${r+m} ${i.y} L ${i.x} ${i.y}`:($=U.get(e.branch)?.index,o=`M ${n.x} ${n.y} L ${r+l} ${n.y} ${h} ${r} ${n.y-m} L ${r} ${i.y+l} ${s} ${r-m} ${i.y} L ${i.x} ${i.y}`):n.y<i.y?o=`M ${n.x} ${n.y} L ${n.x} ${t-l} ${s} ${n.x+m} ${t} L ${i.x-l} ${t} ${h} ${i.x} ${t+m} L ${i.x} ${i.y}`:($=U.get(e.branch)?.index,o=`M ${n.x} ${n.y} L ${n.x} ${t+l} ${h} ${n.x+m} ${t} L ${i.x-l} ${t} ${s} ${i.x} ${t-m} L ${i.x} ${i.y}`)}else s="A 20 20, 0, 0, 0,",h="A 20 20, 0, 0, 1,",l=20,m=20,"TB"===Z?(n.x<i.x&&(o=r.type===d.MERGE&&e.id!==r.parents[0]?`M ${n.x} ${n.y} L ${n.x} ${i.y-l} ${s} ${n.x+m} ${i.y} L ${i.x} ${i.y}`:`M ${n.x} ${n.y} L ${i.x-l} ${n.y} ${h} ${i.x} ${n.y+m} L ${i.x} ${i.y}`),n.x>i.x&&(s="A 20 20, 0, 0, 0,",h="A 20 20, 0, 0, 1,",l=20,m=20,o=r.type===d.MERGE&&e.id!==r.parents[0]?`M ${n.x} ${n.y} L ${n.x} ${i.y-l} ${h} ${n.x-m} ${i.y} L ${i.x} ${i.y}`:`M ${n.x} ${n.y} L ${i.x+l} ${n.y} ${s} ${i.x} ${n.y+m} L ${i.x} ${i.y}`),n.x===i.x&&(o=`M ${n.x} ${n.y} L ${i.x} ${i.y}`)):"BT"===Z?(n.x<i.x&&(o=r.type===d.MERGE&&e.id!==r.parents[0]?`M ${n.x} ${n.y} L ${n.x} ${i.y+l} ${h} ${n.x+m} ${i.y} L ${i.x} ${i.y}`:`M ${n.x} ${n.y} L ${i.x-l} ${n.y} ${s} ${i.x} ${n.y-m} L ${i.x} ${i.y}`),n.x>i.x&&(s="A 20 20, 0, 0, 0,",h="A 20 20, 0, 0, 1,",l=20,m=20,o=r.type===d.MERGE&&e.id!==r.parents[0]?`M ${n.x} ${n.y} L ${n.x} ${i.y+l} ${s} ${n.x-m} ${i.y} L ${i.x} ${i.y}`:`M ${n.x} ${n.y} L ${i.x-l} ${n.y} ${s} ${i.x} ${n.y-m} L ${i.x} ${i.y}`),n.x===i.x&&(o=`M ${n.x} ${n.y} L ${i.x} ${i.y}`)):(n.y<i.y&&(o=r.type===d.MERGE&&e.id!==r.parents[0]?`M ${n.x} ${n.y} L ${i.x-l} ${n.y} ${h} ${i.x} ${n.y+m} L ${i.x} ${i.y}`:`M ${n.x} ${n.y} L ${n.x} ${i.y-l} ${s} ${n.x+m} ${i.y} L ${i.x} ${i.y}`),n.y>i.y&&(o=r.type===d.MERGE&&e.id!==r.parents[0]?`M ${n.x} ${n.y} L ${i.x-l} ${n.y} ${s} ${i.x} ${n.y-m} L ${i.x} ${i.y}`:`M ${n.x} ${n.y} L ${n.x} ${i.y+l} ${h} ${n.x+m} ${i.y} L ${i.x} ${i.y}`),n.y===i.y&&(o=`M ${n.x} ${n.y} L ${i.x} ${i.y}`));if(void 0===o)throw new Error("Line definition not found");t.append("path").attr("d",o).attr("class","arrow arrow"+$%8)},"drawArrow"),ut=(0,h.a)((t,e)=>{let r=t.append("g").attr("class","commit-arrows");[...e.keys()].forEach(t=>{let a=e.get(t);a.parents&&a.parents.length>0&&a.parents.forEach(t=>{ft(r,e.get(t),a,e)})})},"drawArrows"),bt=(0,h.a)((t,e)=>{let r=t.append("g");e.forEach((t,e)=>{let a=e%8,n=U.get(t.name)?.pos;if(void 0===n)throw new Error(`Position not found for branch ${t.name}`);let i=r.append("line");i.attr("x1",0),i.attr("y1",n),i.attr("x2",X),i.attr("y2",n),i.attr("class","branch branch"+a),"TB"===Z?(i.attr("y1",30),i.attr("x1",n),i.attr("y2",X),i.attr("x2",n)):"BT"===Z&&(i.attr("y1",X),i.attr("x1",n),i.attr("y2",30),i.attr("x2",n)),J.push(n);let o=t.name,c=et(o),s=r.insert("rect"),h=r.insert("g").attr("class","branchLabel").insert("g").attr("class","label branch-label"+a);h.node().appendChild(c);let d=c.getBBox();s.attr("class","branchLabelBkg label"+a).attr("rx",4).attr("ry",4).attr("x",-d.width-4-(!0===F?.rotateCommitLabel?30:0)).attr("y",-d.height/2+8).attr("width",d.width+18).attr("height",d.height+4),h.attr("transform","translate("+(-d.width-14-(!0===F?.rotateCommitLabel?30:0))+", "+(n-d.height/2-1)+")"),"TB"===Z?(s.attr("x",n-d.width/2-10).attr("y",0),h.attr("transform","translate("+(n-d.width/2-5)+", 0)")):"BT"===Z?(s.attr("x",n-d.width/2-10).attr("y",X),h.attr("transform","translate("+(n-d.width/2-5)+", "+X+")")):s.attr("transform","translate(-19, "+(n-d.height/2)+")")})},"drawBranches"),wt=(0,h.a)(function(t,e,r,a,n){return U.set(t,{pos:e,index:r}),e+(50+(n?40:0)+("TB"===Z||"BT"===Z?a.width/2:0))},"setBranchPosition"),Bt={draw:(0,h.a)(function(t,e,r,a){if(tt(),s.b.debug("in gitgraph renderer",t+"\n","id:",e,r),!F)throw new Error("GitGraph config not found");let n=F.rotateCommitLabel??!1,i=a.db;Q=i.getCommits();let h=i.getBranchesAsObjArray();Z=i.getDirection();let d=(0,s.h)(`[id="${e}"]`),l=0;h.forEach((t,e)=>{let r=et(t.name),a=d.append("g"),i=a.insert("g").attr("class","branchLabel"),o=i.insert("g").attr("class","label branch-label");o.node()?.appendChild(r);let c=r.getBBox();l=wt(t.name,l,e,c,n),o.remove(),i.remove(),a.remove()}),yt(d,Q,!1),F.showBranches&&bt(d,h),ut(d,Q),yt(d,Q,!0),o.m.insertTitle(d,"gitTitleText",F.titleTopMargin??0,i.getDiagramTitle()),(0,c._)(void 0,d,F.diagramPadding,F.useMaxWidth)},"draw")},Et=(0,h.a)(t=>`\n  .commit-id,\n  .commit-msg,\n  .branch-label {\n    fill: lightgrey;\n    color: lightgrey;\n    font-family: 'trebuchet ms', verdana, arial, sans-serif;\n    font-family: var(--mermaid-font-family);\n  }\n  ${[0,1,2,3,4,5,6,7].map(e=>`\n        .branch-label${e} { fill: ${t["gitBranchLabel"+e]}; }\n        .commit${e} { stroke: ${t["git"+e]}; fill: ${t["git"+e]}; }\n        .commit-highlight${e} { stroke: ${t["gitInv"+e]}; fill: ${t["gitInv"+e]}; }\n        .label${e}  { fill: ${t["git"+e]}; }\n        .arrow${e} { stroke: ${t["git"+e]}; }\n        `).join("\n")}\n\n  .branch {\n    stroke-width: 1;\n    stroke: ${t.lineColor};\n    stroke-dasharray: 2;\n  }\n  .commit-label { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelColor};}\n  .commit-label-bkg { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelBackground}; opacity: 0.5; }\n  .tag-label { font-size: ${t.tagLabelFontSize}; fill: ${t.tagLabelColor};}\n  .tag-label-bkg { fill: ${t.tagLabelBackground}; stroke: ${t.tagLabelBorder}; }\n  .tag-hole { fill: ${t.textColor}; }\n\n  .commit-merge {\n    stroke: ${t.primaryColor};\n    fill: ${t.primaryColor};\n  }\n  .commit-reverse {\n    stroke: ${t.primaryColor};\n    fill: ${t.primaryColor};\n    stroke-width: 3;\n  }\n  .commit-highlight-outer {\n  }\n  .commit-highlight-inner {\n    stroke: ${t.primaryColor};\n    fill: ${t.primaryColor};\n  }\n\n  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}\n  .gitTitleText {\n    text-anchor: middle;\n    font-size: 18px;\n    fill: ${t.textColor};\n  }\n`,"getStyles"),kt={parser:j,db:D,renderer:Bt,styles:Et}},91144:(t,e,r)=>{r.d(e,{a:()=>n});var a=r(47661),n=class{constructor(t){this.init=t,this.records=this.init()}static{(0,a.a)(this,"ImperativeState")}reset(){this.records=this.init()}}},94708:(t,e,r)=>{function a(t,e){t.accDescr&&e.setAccDescription?.(t.accDescr),t.accTitle&&e.setAccTitle?.(t.accTitle),t.title&&e.setDiagramTitle?.(t.title)}r.d(e,{a:()=>a}),(0,r(47661).a)(a,"populateCommonDb")}}]);