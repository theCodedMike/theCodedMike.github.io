"use strict";(self.webpackChunkmike_blog=self.webpackChunkmike_blog||[]).push([[58455],{58455:(e,t,n)=>{n.r(t),n.d(t,{render:()=>G});var r=n(58164),a=n(18329),i=n(80696),d=(n(19293),n(73846)),o=n(48665),s=(n(85020),n(2094),n(23066),n(50491),n(1913)),l=n(91089),g=n(30543),c=(n(57824),n(51899),n(47661));function f(e){var t={options:{directed:e.isDirected(),multigraph:e.isMultigraph(),compound:e.isCompound()},nodes:h(e),edges:p(e)};return(0,g.D)(e.graph())||(t.value=(0,g.e)(e.graph())),t}function h(e){return(0,g.s)(e.nodes(),function(t){var n=e.node(t),r=e.parent(t),a={v:t};return(0,g.D)(n)||(a.value=n),(0,g.D)(r)||(a.parent=r),a})}function p(e){return(0,g.s)(e.edges(),function(t){var n=e.edge(t),r={v:t.v,w:t.w};return(0,g.D)(t.name)||(r.name=t.name),(0,g.D)(n)||(r.value=n),r})}(0,c.a)(f,"write"),(0,c.a)(h,"writeNodes"),(0,c.a)(p,"writeEdges");var u=new Map,b=new Map,w=new Map,v=(0,c.a)(()=>{b.clear(),w.clear(),u.clear()},"clear"),y=(0,c.a)((e,t)=>{let n=b.get(t)||[];return l.b.trace("In isDescendant",t," ",e," = ",n.includes(e)),n.includes(e)},"isDescendant"),m=(0,c.a)((e,t)=>{let n=b.get(t)||[];return l.b.info("Descendants of ",t," is ",n),l.b.info("Edge is ",e),e.v!==t&&e.w!==t&&(n?n.includes(e.v)||y(e.v,t)||y(e.w,t)||n.includes(e.w):(l.b.debug("Tilt, ",t,",not in descendants"),!1))},"edgeInCluster"),X=(0,c.a)((e,t,n,r)=>{l.b.warn("Copying children of ",e,"root",r,"data",t.node(e),r);let a=t.children(e)||[];e!==r&&a.push(e),l.b.warn("Copying (nodes) clusterId",e,"nodes",a),a.forEach(a=>{if(t.children(a).length>0)X(a,t,n,r);else{let i=t.node(a);l.b.info("cp ",a," to ",r," with parent ",e),n.setNode(a,i),r!==t.parent(a)&&(l.b.warn("Setting parent",a,t.parent(a)),n.setParent(a,t.parent(a))),e!==r&&a!==e?(l.b.debug("Setting parent",a,e),n.setParent(a,e)):(l.b.info("In copy ",e,"root",r,"data",t.node(e),r),l.b.debug("Not Setting parent for node=",a,"cluster!==rootId",e!==r,"node!==clusterId",a!==e));let d=t.edges(a);l.b.debug("Copying Edges",d),d.forEach(a=>{l.b.info("Edge",a);let i=t.edge(a.v,a.w,a.name);l.b.info("Edge data",i,r);try{m(a,r)?(l.b.info("Copying as ",a.v,a.w,i,a.name),n.setEdge(a.v,a.w,i,a.name),l.b.info("newGraph edges ",n.edges(),n.edge(n.edges()[0]))):l.b.info("Skipping copy of edge ",a.v,"--\x3e",a.w," rootId: ",r," clusterId:",e)}catch(e){l.b.error(e)}})}l.b.debug("Removing node",a),t.removeNode(a)})},"copy"),E=(0,c.a)((e,t)=>{let n=t.children(e),r=[...n];for(let a of n)w.set(a,e),r=[...r,...E(a,t)];return r},"extractDescendants"),N=(0,c.a)((e,t,n)=>{let r=e.edges().filter(e=>e.v===t||e.w===t),a=e.edges().filter(e=>e.v===n||e.w===n),i=r.map(e=>({v:e.v===t?n:e.v,w:e.w===t?t:e.w})),d=a.map(e=>({v:e.v,w:e.w}));return i.filter(e=>d.some(t=>e.v===t.v&&e.w===t.w))},"findCommonEdges"),C=(0,c.a)((e,t,n)=>{let r,a=t.children(e);if(l.b.trace("Searching children of id ",e,a),a.length<1)return e;for(let e of a){let a=C(e,t,n),i=N(t,n,a);if(a){if(!(i.length>0))return a;r=a}}return r},"findNonClusterChild"),S=(0,c.a)(e=>u.has(e)&&u.get(e).externalConnections&&u.has(e)?u.get(e).id:e,"getAnchorId"),x=(0,c.a)((e,t)=>{if(!e||t>10)l.b.debug("Opting out, no graph ");else{l.b.debug("Opting in, graph "),e.nodes().forEach(function(t){e.children(t).length>0&&(l.b.warn("Cluster identified",t," Replacement id in edges: ",C(t,e,t)),b.set(t,E(t,e)),u.set(t,{id:C(t,e,t),clusterData:e.node(t)}))}),e.nodes().forEach(function(t){let n=e.children(t),r=e.edges();n.length>0?(l.b.debug("Cluster identified",t,b),r.forEach(e=>{y(e.v,t)^y(e.w,t)&&(l.b.warn("Edge: ",e," leaves cluster ",t),l.b.warn("Descendants of XXX ",t,": ",b.get(t)),u.get(t).externalConnections=!0)})):l.b.debug("Not a cluster ",t,b)});for(let t of u.keys()){let n=u.get(t).id,r=e.parent(n);r!==t&&u.has(r)&&!u.get(r).externalConnections&&(u.get(t).id=r)}e.edges().forEach(function(t){let n=e.edge(t);l.b.warn("Edge "+t.v+" -> "+t.w+": "+JSON.stringify(t)),l.b.warn("Edge "+t.v+" -> "+t.w+": "+JSON.stringify(e.edge(t)));let r=t.v,a=t.w;if(l.b.warn("Fix XXX",u,"ids:",t.v,t.w,"Translating: ",u.get(t.v)," --- ",u.get(t.w)),u.get(t.v)||u.get(t.w)){if(l.b.warn("Fixing and trying - removing XXX",t.v,t.w,t.name),r=S(t.v),a=S(t.w),e.removeEdge(t.v,t.w,t.name),r!==t.v){let a=e.parent(r);u.get(a).externalConnections=!0,n.fromCluster=t.v}if(a!==t.w){let r=e.parent(a);u.get(r).externalConnections=!0,n.toCluster=t.w}l.b.warn("Fix Replacing with XXX",r,a,t.name),e.setEdge(r,a,n,t.name)}}),l.b.warn("Adjusted Graph",f(e)),D(e,0),l.b.trace(u)}},"adjustClustersAndEdges"),D=(0,c.a)((e,t)=>{if(l.b.warn("extractor - ",t,f(e),e.children("D")),t>10)return void l.b.error("Bailing out");let n=e.nodes(),r=!1;for(let t of n){let n=e.children(t);r=r||n.length>0}if(r){l.b.debug("Nodes = ",n,t);for(let r of n)if(l.b.debug("Extracting node",r,u,u.has(r)&&!u.get(r).externalConnections,!e.parent(r),e.node(r),e.children("D")," Depth ",t),u.has(r))if(!u.get(r).externalConnections&&e.children(r)&&e.children(r).length>0){l.b.warn("Cluster without external connections, without a parent and with children",r,t);let n="TB"===e.graph().rankdir?"LR":"TB";u.get(r)?.clusterData?.dir&&(n=u.get(r).clusterData.dir,l.b.warn("Fixing dir",u.get(r).clusterData.dir,n));let i=new a.a({multigraph:!0,compound:!0}).setGraph({rankdir:n,nodesep:50,ranksep:50,marginx:8,marginy:8}).setDefaultEdgeLabel(function(){return{}});l.b.warn("Old graph before copy",f(e)),X(r,e,i,r),e.setNode(r,{clusterNode:!0,id:r,clusterData:u.get(r).clusterData,label:u.get(r).label,graph:i}),l.b.warn("New graph after copy node: (",r,")",f(i)),l.b.debug("Old graph after copy",f(e))}else l.b.warn("Cluster ** ",r," **not meeting the criteria !externalConnections:",!u.get(r).externalConnections," no parent: ",!e.parent(r)," children ",e.children(r)&&e.children(r).length>0,e.children("D"),t),l.b.debug(u);else l.b.debug("Not a cluster",r,t);n=e.nodes(),l.b.warn("New list of nodes",n);for(let r of n){let n=e.node(r);l.b.warn(" Now next level",r,n),n?.clusterNode&&D(n.graph,t+1)}}else l.b.debug("Done, no node has children",e.nodes())},"extractor"),I=(0,c.a)((e,t)=>{if(0===t.length)return[];let n=Object.assign([],t);return t.forEach(t=>{let r=e.children(t),a=I(e,r);n=[...n,...a]}),n},"sorter"),k=(0,c.a)(e=>I(e,e.children()),"sortNodesByHierarchy"),O=(0,c.a)(async(e,t,n,a,s,g)=>{l.b.warn("Graph in recursive render:XAX",f(t),s);let h=t.graph().rankdir;l.b.trace("Dir in recursive render - dir:",h);let p=e.insert("g").attr("class","root");t.nodes()?l.b.info("Recursive render XXX",t.nodes()):l.b.info("No nodes found for",t),t.edges().length>0&&l.b.info("Recursive edges",t.edge(t.edges()[0]));let b=p.insert("g").attr("class","clusters"),w=p.insert("g").attr("class","edgePaths"),v=p.insert("g").attr("class","edgeLabels"),y=p.insert("g").attr("class","nodes");await Promise.all(t.nodes().map(async function(e){let r=t.node(e);if(void 0!==s){let n=JSON.parse(JSON.stringify(s.clusterData));l.b.trace("Setting data for parent cluster XXX\n Node.id = ",e,"\n data=",n.height,"\nParent cluster",s.height),t.setNode(s.id,n),t.parent(e)||(l.b.trace("Setting parent",e,s.id),t.setParent(e,s.id,n))}if(l.b.info("(Insert) Node XXX"+e+": "+JSON.stringify(t.node(e))),r?.clusterNode){l.b.info("Cluster identified XBX",e,r.width,t.node(e));let{ranksep:i,nodesep:o}=t.graph();r.graph.setGraph({...r.graph.graph(),ranksep:i+25,nodesep:o});let s=await O(y,r.graph,n,a,t.node(e),g),c=s.elem;(0,d.b)(r,c),r.diff=s.diff||0,l.b.info("New compound node after recursive render XAX",e,"width",r.width,"height",r.height),(0,d.i)(c,r)}else t.children(e).length>0?(l.b.trace("Cluster - the non recursive path XBX",e,r.id,r,r.width,"Graph:",t),l.b.trace(C(r.id,t)),u.set(r.id,{id:C(r.id,t),node:r})):(l.b.trace("Node - the non recursive path XAX",e,y,t.node(e),h),await(0,d.h)(y,t.node(e),{config:g,dir:h}))})),await(0,c.a)(async()=>{let e=t.edges().map(async function(e){let n=t.edge(e.v,e.w,e.name);l.b.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(e)),l.b.info("Edge "+e.v+" -> "+e.w+": ",e," ",JSON.stringify(t.edge(e))),l.b.info("Fix",u,"ids:",e.v,e.w,"Translating: ",u.get(e.v),u.get(e.w)),await(0,i.b)(v,n)});await Promise.all(e)},"processEdges")(),l.b.info("Graph before layout:",JSON.stringify(f(t))),l.b.info("############################################# XXX"),l.b.info("###                Layout                 ### XXX"),l.b.info("############################################# XXX"),(0,r.a)(t),l.b.info("Graph after layout:",JSON.stringify(f(t)));let m=0,{subGraphTitleTotalMargin:X}=(0,o.a)(g);return await Promise.all(k(t).map(async function(e){let n=t.node(e);if(l.b.info("Position XBX => "+e+": ("+n.x,","+n.y,") width: ",n.width," height: ",n.height),n?.clusterNode)n.y+=X,l.b.info("A tainted cluster node XBX1",e,n.id,n.width,n.height,n.x,n.y,t.parent(e)),u.get(n.id).node=n,(0,d.k)(n);else if(t.children(e).length>0){l.b.info("A pure cluster node XBX1",e,n.id,n.x,n.y,n.width,n.height,t.parent(e)),n.height+=X,t.node(n.parentId);let r=n?.padding/2||0,a=n?.labelBBox?.height||0,i=a-r||0;l.b.debug("OffsetY",i,"labelHeight",a,"halfPadding",r),await(0,d.f)(b,n),u.get(n.id).node=n}else{let e=t.node(n.parentId);n.y+=X/2,l.b.info("A regular node XBX1 - using the padding",n.id,"parent",n.parentId,n.width,n.height,n.x,n.y,"offsetY",n.offsetY,"parent",e,e?.offsetY,n),(0,d.k)(n)}})),t.edges().forEach(function(e){let r=t.edge(e);l.b.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(r),r),r.points.forEach(e=>e.y+=X/2);let d=t.node(e.v);var o=t.node(e.w);let s=(0,i.d)(w,r,u,n,d,o,a);(0,i.c)(r,s)}),t.nodes().forEach(function(e){let n=t.node(e);l.b.info(e,n.type,n.diff),n.isGroup&&(m=n.diff)}),l.b.warn("Returning from recursive render XAX",p,m),{elem:p,diff:m}},"recursiveRender"),G=(0,c.a)(async(e,t)=>{let n=new a.a({multigraph:!0,compound:!0}).setGraph({rankdir:e.direction,nodesep:e.config?.nodeSpacing||e.config?.flowchart?.nodeSpacing||e.nodeSpacing,ranksep:e.config?.rankSpacing||e.config?.flowchart?.rankSpacing||e.rankSpacing,marginx:8,marginy:8}).setDefaultEdgeLabel(function(){return{}}),r=t.select("g");(0,i.e)(r,e.markers,e.type,e.diagramId),(0,d.j)(),(0,i.a)(),(0,d.g)(),v(),e.nodes.forEach(e=>{n.setNode(e.id,{...e}),e.parentId&&n.setParent(e.id,e.parentId)}),l.b.debug("Edges:",e.edges),e.edges.forEach(e=>{if(e.start===e.end){let t=e.start,r=t+"---"+t+"---1",a=t+"---"+t+"---2",i=n.node(t);n.setNode(r,{domId:r,id:r,parentId:i.parentId,labelStyle:"",label:"",padding:0,shape:"labelRect",style:"",width:10,height:10}),n.setParent(r,i.parentId),n.setNode(a,{domId:a,id:a,parentId:i.parentId,labelStyle:"",padding:0,shape:"labelRect",label:"",style:"",width:10,height:10}),n.setParent(a,i.parentId);let d=structuredClone(e),o=structuredClone(e),s=structuredClone(e);d.label="",d.arrowTypeEnd="none",d.id=t+"-cyclic-special-1",o.arrowTypeStart="none",o.arrowTypeEnd="none",o.id=t+"-cyclic-special-mid",s.label="",i.isGroup&&(d.fromCluster=t,s.toCluster=t),s.id=t+"-cyclic-special-2",s.arrowTypeStart="none",n.setEdge(t,r,d,t+"-cyclic-special-0"),n.setEdge(r,a,o,t+"-cyclic-special-1"),n.setEdge(a,t,s,t+"-cyc<lic-special-2")}else n.setEdge(e.start,e.end,{...e},e.id)}),l.b.warn("Graph at first:",JSON.stringify(f(n))),x(n),l.b.warn("Graph after XAX:",JSON.stringify(f(n)));let o=(0,s.W)();await O(r,n,e.type,e.diagramId,void 0,o)},"render")}}]);