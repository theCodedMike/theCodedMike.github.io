"use strict";(self.webpackChunkmike_blog=self.webpackChunkmike_blog||[]).push([[45660],{4200:(e,t,a)=>{e.exports=a.p+"assets/img/stack_push_pop.8c5ac2ba.png"},30026:(e,t,a)=>{e.exports=a.p+"assets/img/queue.dacca3af.png"},55039:(e,t,a)=>{e.exports=a.p+"assets/img/stack.da605238.png"},75726:(e,t)=>{t.A=(e,t)=>{const a=e.__vccOpts||e;for(const[e,o]of t)a[e]=o;return a}},94725:(e,t,a)=>{a.r(t),a.d(t,{comp:()=>i,data:()=>c});var o=a(60362),n=a(4200),r=a(55039),l=a(30026);const s={},i=(0,a(75726).A)(s,[["render",function(e,t){const a=(0,o.g2)("RouteLink");return(0,o.uX)(),(0,o.CE)("div",null,[t[13]||(t[13]=(0,o.Fv)('<h2 id="栈-队列" tabindex="-1"><a class="header-anchor" href="#栈-队列"><span>栈/队列</span></a></h2><h3 id="栈" tabindex="-1"><a class="header-anchor" href="#栈"><span>栈</span></a></h3><p><code>栈</code>是计算机科学中的一种抽象数据类型，只允许在有序的线性数据集合的一端（称为栈顶，top）进行加入数据（<strong>push</strong>）和移除数据（<strong>pop</strong>）。因而按照后进先出（<strong>LIFO</strong>, Last In First Out）的原理运作，栈常用一维数组或链表来实现。常与另一种有序的线性数据集合<strong>队列</strong>相提并论。<br><img src="'+n+'" alt="stack" loading="lazy"></p><p><strong>栈</strong>使用两种基本操作：</p><ul><li>入栈：将元素放入栈的顶端。</li><li>出栈：将栈顶端的元素移除。<br><img src="'+r+'" alt="stack" loading="lazy"></li></ul><p>栈的基本特点：</p><ul><li>先入后出，后入先出。</li><li>除头尾节点之外，每个元素有一个前驱，一个后继。</li></ul><h3 id="队列" tabindex="-1"><a class="header-anchor" href="#队列"><span>队列</span></a></h3><p><code>队列</code>是计算机科学中的一种抽象数据类型，是先进先出（<strong>FIFO</strong>, First-In-First-Out）的线性表。在具体应用中通常用链表或者数组来实现。队列只允许在后端/尾部（称为rear/back/tail）进行插入操作，在前端/头部（称为front/head）进行删除操作。<br><img src="'+l+'" alt="queue" loading="lazy"></p><p>队列的操作方式和栈类似，唯一的区别在于队列<em>只允许新数据在后端进行添加</em>。</p><h2 id="习题" tabindex="-1"><a class="header-anchor" href="#习题"><span>习题</span></a></h2>',11)),(0,o.Lk)("p",null,[(0,o.bF)(a,{to:"/zh/algorithm/leetcode/stack_queue/232_implement_queue_using_stacks.html"},{default:(0,o.k6)(()=>[...t[0]||(t[0]=[(0,o.eW)("232: 用栈实现队列",-1)])]),_:1}),t[7]||(t[7]=(0,o.Lk)("br",null,null,-1)),(0,o.bF)(a,{to:"/zh/algorithm/leetcode/stack_queue/225_implement_stack_using_queues.html"},{default:(0,o.k6)(()=>[...t[1]||(t[1]=[(0,o.eW)("225: 用队列实现栈",-1)])]),_:1}),t[8]||(t[8]=(0,o.Lk)("br",null,null,-1)),(0,o.bF)(a,{to:"/zh/algorithm/leetcode/stack_queue/20_valid_parentheses.html"},{default:(0,o.k6)(()=>[...t[2]||(t[2]=[(0,o.eW)("20: 有效的括号",-1)])]),_:1}),t[9]||(t[9]=(0,o.Lk)("br",null,null,-1)),(0,o.bF)(a,{to:"/zh/algorithm/leetcode/stack_queue/1047_remove_all_adjacent_duplicates_in_string.html"},{default:(0,o.k6)(()=>[...t[3]||(t[3]=[(0,o.eW)("1047: 删除字符串中的所有相邻重复项",-1)])]),_:1}),t[10]||(t[10]=(0,o.Lk)("br",null,null,-1)),(0,o.bF)(a,{to:"/zh/algorithm/leetcode/stack_queue/150_evaluate_reverse_polish_notation.html"},{default:(0,o.k6)(()=>[...t[4]||(t[4]=[(0,o.eW)("150: 逆波兰表达式求值",-1)])]),_:1}),t[11]||(t[11]=(0,o.Lk)("br",null,null,-1)),(0,o.bF)(a,{to:"/zh/algorithm/leetcode/stack_queue/239_sliding_window_maximum.html"},{default:(0,o.k6)(()=>[...t[5]||(t[5]=[(0,o.eW)("239: 滑动窗口最大值",-1)])]),_:1}),t[12]||(t[12]=(0,o.Lk)("br",null,null,-1)),(0,o.bF)(a,{to:"/zh/algorithm/leetcode/stack_queue/347_top_k_frequent_elements.html"},{default:(0,o.k6)(()=>[...t[6]||(t[6]=[(0,o.eW)("347: 前K个高频元素",-1)])]),_:1})]),t[14]||(t[14]=(0,o.Lk)("h2",{id:"总结",tabindex:"-1"},[(0,o.Lk)("a",{class:"header-anchor",href:"#总结"},[(0,o.Lk)("span",null,"总结")])],-1))])}]]),c=JSON.parse('{"path":"/zh/algorithm/leetcode/stack_queue/","title":"栈/队列","lang":"zh-CN","frontmatter":{"title":"栈/队列","icon":"discover","date":"2023-11-26T00:00:00.000Z","dir":{"order":6},"category":"leetcode","tag":["stack","queue"],"sticky":false,"description":"栈/队列 栈 栈是计算机科学中的一种抽象数据类型，只允许在有序的线性数据集合的一端（称为栈顶，top）进行加入数据（push）和移除数据（pop）。因而按照后进先出（LIFO, Last In First Out）的原理运作，栈常用一维数组或链表来实现。常与另一种有序的线性数据集合队列相提并论。 stack 栈使用两种基本操作： 入栈：将元素放入栈的顶...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"栈/队列\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-11-26T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-04T09:35:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mike\\"}]}"],["meta",{"property":"og:url","content":"https://thecodedmike.github.io/zh/algorithm/leetcode/stack_queue/"}],["meta",{"property":"og:site_name","content":"Mike的博客"}],["meta",{"property":"og:title","content":"栈/队列"}],["meta",{"property":"og:description","content":"栈/队列 栈 栈是计算机科学中的一种抽象数据类型，只允许在有序的线性数据集合的一端（称为栈顶，top）进行加入数据（push）和移除数据（pop）。因而按照后进先出（LIFO, Last In First Out）的原理运作，栈常用一维数组或链表来实现。常与另一种有序的线性数据集合队列相提并论。 stack 栈使用两种基本操作： 入栈：将元素放入栈的顶..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-12-04T09:35:08.000Z"}],["meta",{"property":"article:tag","content":"queue"}],["meta",{"property":"article:tag","content":"stack"}],["meta",{"property":"article:published_time","content":"2023-11-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-04T09:35:08.000Z"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://thecodedmike.github.io/algorithm/leetcode/stack_queue/"}]]},"git":{"createdTime":1695811035000,"updatedTime":1701682508000,"contributors":[{"name":"mike","username":"mike","email":"lixiaofeng1115@outlook.com","commits":9,"url":"https://github.com/mike"}]},"readingTime":{"minutes":1.3,"words":390},"filePathRelative":"zh/algorithm/leetcode/stack_queue/README.md","excerpt":"<h2>栈/队列</h2>\\n<h3>栈</h3>\\n<p><code>栈</code>是计算机科学中的一种抽象数据类型，只允许在有序的线性数据集合的一端（称为栈顶，top）进行加入数据（<strong>push</strong>）和移除数据（<strong>pop</strong>）。因而按照后进先出（<strong>LIFO</strong>, Last In First Out）的原理运作，栈常用一维数组或链表来实现。常与另一种有序的线性数据集合<strong>队列</strong>相提并论。<br>\\n</p>\\n<p><strong>栈</strong>使用两种基本操作：</p>\\n<ul>\\n<li>入栈：将元素放入栈的顶端。</li>\\n<li>出栈：将栈顶端的元素移除。<br>\\n</li>\\n</ul>","autoDesc":true}')}}]);