"use strict";(self.webpackChunkmike_blog=self.webpackChunkmike_blog||[]).push([[33524],{10875:(e,t,r)=>{r.d(t,{S:()=>n});const n=()=>Promise.all([r.e(68896).then(r.bind(r,31566)).then(({default:e})=>e),r.e(68896).then(r.bind(r,40929)).then(({default:e})=>e),r.e(68896).then(r.bind(r,53905)).then(({default:e})=>e),r.e(68896).then(r.bind(r,7715)).then(({default:e})=>e),r.e(68896).then(r.bind(r,91011)).then(({default:e})=>e),r.e(68896).then(r.bind(r,64453)).then(({default:e})=>e),r.e(68896).then(r.bind(r,77025)).then(({default:e})=>e)])},26653:(e,t,r)=>{r.d(t,{K:()=>n});const n=JSON.parse('{"encrypt":{"config":{"/demo/encrypt.html":{"tokens":["$2b$10$cSR5w6uGxewxhBNff0w7tuzptr./wLiyZg3MNgghNWEs/jAGBeh/O"],"hint":"PWD: 1234"},"/zh/demo/encrypt.html":{"tokens":["$2b$10$PGPrtkLA1gKMDvwEQlDRsOzsYw5nq7h.y3Y1e97z3tQJGlUd8AfAy"],"hint":"密码: 1234"}}},"author":{"name":"Mike"},"logo":"/logo.svg","repo":"https://github.com/theCodedMike","docsDir":"src","blog":{"name":"Mike","intro":"https://github.com/theCodedMike","medias":{"Email":"lixiaofeng1115@outlook.com","GitHub":"https://github.com/theCodedMike"}},"locales":{"/zh/":{"lang":"zh-CN","navbarLocales":{"langName":"简体中文","selectLangAriaLabel":"选择语言"},"metaLocales":{"author":"作者","date":"写作日期","origin":"原创","views":"访问量","category":"分类","tag":"标签","readingTime":"阅读时间","words":"字数","toc":"此页内容","prev":"上一页","next":"下一页","contributors":"贡献者","editLink":"在 GitHub 上编辑此页","print":"打印"},"blogLocales":{"article":"文章","articleList":"文章列表","category":"分类","tag":"标签","timeline":"时间轴","timelineTitle":"昨日不在","all":"全部","intro":"个人介绍","star":"星标","empty":"$text 为空"},"paginationLocales":{"prev":"上一页","next":"下一页","navigate":"跳转到","action":"前往","errorText":"请输入 1 到 $page 之前的页码！"},"outlookLocales":{"themeColor":"主题色","darkmode":"外观","fullscreen":"全屏"},"encryptLocales":{"iconLabel":"文章已加密","placeholder":"输入密码","remember":"记住密码","errorHint":"请输入正确的密码"},"routerLocales":{"skipToContent":"跳至主要內容","notFoundTitle":"页面不存在","notFoundMsg":["这里什么也没有","我们是怎么来到这儿的？","这 是 四 零 四 !","看起来你访问了一个失效的链接"],"back":"返回上一页","home":"带我回家"},"navbar":["/zh/",{"text":"Rust","icon":"note","prefix":"/zh/rust/","children":[{"text":"基础","children":["the_book/"]},{"text":"进阶","children":[]},{"text":"标准库文档","children":[]},{"text":"其他","children":[]}]},{"text":"算法与数据结构","icon":"discover","prefix":"/zh/algorithm/","children":[{"text":"理论","children":["1800/","introduction/"]},{"text":"练习","children":["leetcode/"]}]}],"sidebar":{"/zh/algorithm/":"structure","/zh/rust/":"structure","/zh/":[""]},"footer":"主题使用 <a href=\\"https://theme-hope.vuejs.press/zh/\\">VuePress Theme Hope</a>","copyright":"基于 MIT 协议，© 2023~至今 Mike","displayFooter":true,"blog":{"description":"之前搞后端，现在搞游戏","intro":"/zh/intro.html"}},"/":{"lang":"en-US","navbarLocales":{"langName":"English","selectLangAriaLabel":"Select language"},"metaLocales":{"author":"Author","date":"Writing Date","origin":"Original","views":"Page views","category":"Category","tag":"Tag","readingTime":"Reading Time","words":"Words","toc":"On This Page","prev":"Prev","next":"Next","contributors":"Contributors","editLink":"Edit this page on GitHub","print":"Print"},"blogLocales":{"article":"Articles","articleList":"Article List","category":"Category","tag":"Tag","timeline":"Timeline","timelineTitle":"Yesterday Once More!","all":"All","intro":"Personal Intro","star":"Star","empty":"No $text"},"paginationLocales":{"prev":"Prev","next":"Next","navigate":"Jump to","action":"Go","errorText":"Please enter a number between 1 and $page !"},"outlookLocales":{"themeColor":"Theme Color","darkmode":"Theme Mode","fullscreen":"Full Screen"},"encryptLocales":{"iconLabel":"Page Encrypted","placeholder":"Enter password","remember":"Remember password","errorHint":"Please enter the correct password!"},"routerLocales":{"skipToContent":"Skip to main content","notFoundTitle":"Page not found","notFoundMsg":["There’s nothing here.","How did we get here?","That’s a Four-Oh-Four.","Looks like we\'ve got some broken links."],"back":"Go back","home":"Take me home"},"navbar":["/",{"text":"Rust","icon":"note","prefix":"/rust/","children":[{"text":"Basic","children":["the_book/"]},{"text":"Advanced","children":[]},{"text":"Stdlib","children":[]},{"text":"Other","children":[]}]},{"text":"Algorithm","icon":"discover","prefix":"/algorithm/","children":[{"text":"Theory","children":["1800/","introduction/"]},{"text":"Exercise","children":["leetcode/"]}]}],"sidebar":{"/algorithm/":"structure","/rust/":"structure","/":[""]},"footer":"Theme by <a href=\\"https://theme-hope.vuejs.press\\">VuePress Theme Hope</a>","copyright":"MIT Licensed, © 2023~Present Mike","displayFooter":true,"blog":{"description":"A BackEnd programmer","intro":"/intro.html"}}}}')},32878:(e,t,r)=>{r.d(t,{P:()=>n});const n={Email:'<svg xmlns="http://www.w3.org/2000/svg" class="vp-social-media-icon email-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#1384FF"/><path fill="#fff" d="M270.077 286.233H751.99c32.933 0 59.86 24.855 60.274 55.51l-301.023 157L210.217 341.88c.207-30.723 26.927-55.717 59.86-55.717zm-59.929 115.714-.276 277.756c0 30.931 27.134 56.2 60.205 56.2H751.99c33.14 0 60.274-25.269 60.274-56.2V401.81L518.283 551.492a15.88 15.88 0 0 1-14.43 0L210.148 401.947z"/></svg>',GitHub:'<svg xmlns="http://www.w3.org/2000/svg" class="vp-social-media-icon github-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#171515"/><path fill="#fff" d="M509.423 146.442c-200.317 0-362.756 162.42-362.756 362.8 0 160.266 103.936 296.24 248.109 344.217 18.139 3.327 24.76-7.872 24.76-17.486 0-8.613-.313-31.427-.49-61.702-100.912 21.923-122.205-48.63-122.205-48.63-16.495-41.91-40.28-53.067-40.28-53.067-32.937-22.51 2.492-22.053 2.492-22.053 36.407 2.566 55.568 37.386 55.568 37.386 32.362 55.438 84.907 39.43 105.58 30.143 3.296-23.444 12.667-39.43 23.032-48.498-80.557-9.156-165.246-40.28-165.246-179.297 0-39.604 14.135-71.988 37.342-97.348-3.731-9.178-16.18-46.063 3.556-96.009 0 0 30.46-9.754 99.76 37.19 28.937-8.048 59.97-12.071 90.823-12.211 30.807.14 61.843 4.165 90.822 12.21 69.26-46.944 99.663-37.189 99.663-37.189 19.792 49.946 7.34 86.831 3.61 96.01 23.25 25.359 37.29 57.742 37.29 97.347 0 139.366-84.82 170.033-165.637 179.013 13.026 11.2 24.628 33.342 24.628 67.182 0 48.498-.445 87.627-.445 99.521 0 9.702 6.535 20.988 24.945 17.444 144.03-48.067 247.881-183.95 247.881-344.175 0-200.378-162.442-362.798-362.802-362.798z"/></svg>'}},38123:(e,t,r)=>{r.d(t,{v:()=>n});const n={"/zh/algorithm/":[{text:"乐扣",prefix:"leetcode/",collapsible:!0,icon:"discover",children:["",{text:"数组",prefix:"array/",collapsible:!0,icon:"discover",children:["","704_binary_search","35_search_insert_position","34_find_first_and_last_position_of_element_in_sorted_array","69_sqrt_x","367_valid_perfect_square","27_remove_element","26_remove_duplicates_from_sorted_array","283_move_zeroes","844_backspace_string_compare","977_squares_of_a_sorted_array","209_minimum_size_subarray_sum","904_fruit_into_baskets","76_minimum_window_substring","54_spiral_matrix","59_spiral_matrix_ii"]},{text:"链表",prefix:"linkedlist/",collapsible:!0,icon:"discover",children:["","203_remove_linked_list_elements","707_design_linked_list","206_reverse_linked_list","24_swap_nodes_in_pairs","19_remove_nth_node_from_end_of_list","160_intersection_of_two_linked_lists","141_linked_list_cycle","142_linked_list_cycle_II"]},{text:"哈希表",prefix:"hashtable/",collapsible:!0,icon:"discover",children:["","242_valid_anagram","383_ransom_note","49_group_anagrams","438_find_all_anagrams_in_a_string","349_intersection_of_two_arrays","350_intersection_of_two_arrays_ii","202_happy_number","1_two_sum","15_three_sum","16_three_sum_closest","18_four_sum","454_four_sum_ii"]},{text:"字符串",prefix:"string/",collapsible:!0,icon:"discover",children:["","344_reverse_string","541_reverse_string_ii","kamacoder_54_replace_numbers","151_reverse_words_in_a_string","kamacoder_55_right_rotated_string","28_find_the_index_of_the_first_occurrence_in_a_string","459_repeated_substring_pattern"]},{text:"双指针",prefix:"two_pointers/",collapsible:!0,icon:"discover",children:[""]},{text:"栈/队列",prefix:"stack_queue/",collapsible:!0,icon:"discover",children:["","232_implement_queue_using_stacks","225_implement_stack_using_queues","20_valid_parentheses","1047_remove_all_adjacent_duplicates_in_string","150_evaluate_reverse_polish_notation","239_sliding_window_maximum","347_top_k_frequent_elements"]},{text:"二叉树",prefix:"binary_tree/",collapsible:!0,icon:"discover",children:["","144_binary_tree_pre_order_traversal","94_binary_tree_in_order_traversal","145_binary_tree_post_order_traversal","102_binary_tree_level_order_traversal","107_binary_tree_level_order_traversal_ii","199_binary_tree_right_side_view","637_average_of_levels_in_binary_tree","429_n_ary_tree_level_order_traversal","515_find_largest_value_in_each_tree_row","116_populating_next_right_pointers_in_each_node","117_populating_next_right_pointers_in_each_node_ii","101_symmetric_tree","104_maximum_depth_of_binary_tree","111_minimum_depth_of_binary_tree","222_count_complete_tree_nodes","110_balanced_binary_tree","257_binary_tree_paths","404_sum_of_left_leaves","513_find_bottom_left_tree_value","112_path_sum","113_path_sum_ii","226_invert_binary_tree","105_construct_binary_tree_from_preorder_and_inorder_traversal","106_construct_binary_tree_from_post_order_and_in_order_traversal","654_maximum_binary_tree","617_merge_two_binary_trees","700_search_in_a_binary_search_tree","98_validate_binary_search_tree","530_minimum_absolute_difference_in_bst","501_find_mode_in_binary_search_tree","538_convert_bst_to_greater_tree","236_lowest_common_ancestor_of_a_binary_tree","235_lowest_common_ancestor_of_a_binary_search_tree","701_insert_into_a_binary_search_tree","450_delete_node_in_a_bst","669_trim_a_binary_search_tree","108_convert_sorted_array_to_binary_search_tree","109_convert_sorted_list_to_binary_search_tree","100_same_tree","572_subtree_of_another_tree","559_maximum_depth_of_n_ary_tree"]},{text:"回溯",prefix:"backtracking/",collapsible:!0,icon:"discover",children:["","77_combinations","17_letter_combinations_of_a_phone_number","39_combination_sum","40_combination_sum_ii","216_combination_sum_iii","131_palindrome_partitioning","93_restore_ip_addresses","78_subsets","90_subsets_ii","46_permutations","47_permutations_ii","51_n_queens","52_n_queens_ii","36_valid_sudoku","37_sudoku_solver","491_non_decreasing_subsequences","332_reconstruct_itinerary"]},{text:"贪心算法",prefix:"greedy/",collapsible:!0,icon:"discover",children:["","455_assign_cookies","1005_maximize_sum_of_array_after_k_negations","860_lemonade_change","376_wiggle_subsequence","738_monotone_increasing_digits","122_best_time_to_buy_and_sell_stock_ii","714_best_time_to_buy_and_sell_stock_with_transaction_fee","135_candy","406_queue_reconstruction_by_height","55_jump_game","45_jump_game_ii","452_minimum_number_of_arrows_to_burst_balloons","435_non_overlapping_intervals","763_partition_labels","56_merge_intervals","53_maximum_subarray","134_gas_station","968_binary_tree_cameras"]},{text:"动态规划",prefix:"dp/",collapsible:!0,icon:"discover",children:["","509_fibonacci_number","70_climbing_stairs","1137_nth_tribonacci_number","746_min_cost_climbing_stairs","740_delete_and_earn","198_house_robber","343_integer_break","62_unique_paths"]},{text:"单调栈",prefix:"mono_stack/",collapsible:!0,icon:"discover",children:[""]},{text:"图",prefix:"graph/",collapsible:!0,icon:"discover",children:[""]},{text:"其他",prefix:"other/",collapsible:!0,icon:"discover",children:[""]}]},{text:"数据结构精讲与习题详解",prefix:"1800/",collapsible:!0,icon:"discover",children:[""]},{text:"算法导论(第四版)",prefix:"introduction/",collapsible:!0,icon:"discover",children:[""]}],"/zh/rust/":[{text:"Rust程序设计语言",prefix:"the_book/",collapsible:!0,icon:"note",children:["","foreword"]}],"/algorithm/":[{text:"Data Structure and Exercises",prefix:"1800/",collapsible:!0,icon:"discover",children:[""]},{text:"Introduction To Algorithms(4 ed)",prefix:"introduction/",collapsible:!0,icon:"discover",children:[""]},{text:"LeetCode",prefix:"leetcode/",collapsible:!0,icon:"discover",children:["",{text:"Array",prefix:"array/",collapsible:!0,icon:"discover",children:["","704_binary_search","35_search_insert_position","34_find_first_and_last_position_of_element_in_sorted_array","69_sqrt_x","367_valid_perfect_square","27_remove_element","26_remove_duplicates_from_sorted_array","283_move_zeroes","844_backspace_string_compare","977_squares_of_a_sorted_array","209_minimum_size_subarray_sum","904_fruit_into_baskets","76_minimum_window_substring","54_spiral_matrix","59_spiral_matrix_ii"]},{text:"LinkedList",prefix:"linkedlist/",collapsible:!0,icon:"discover",children:["","203_remove_linked_list_elements","707_design_linked_list","206_reverse_linked_list","24_swap_nodes_in_pairs","19_remove_nth_node_from_end_of_list","160_intersection_of_two_linked_lists","141_linked_list_cycle","142_linked_list_cycle_II"]},{text:"HashTable",prefix:"hashtable/",collapsible:!0,icon:"discover",children:["","242_valid_anagram","383_ransom_note","49_group_anagrams","438_find_all_anagrams_in_a_string","349_intersection_of_two_arrays","350_intersection_of_two_arrays_ii","202_happy_number","1_two_sum","15_three_sum","16_three_sum_closest","18_four_sum","454_four_sum_ii"]},{text:"String",prefix:"string/",collapsible:!0,icon:"discover",children:["","344_reverse_string","541_reverse_string_ii","kamacoder_54_replace_numbers","151_reverse_words_in_a_string","kamacoder_55_right_rotated_string","28_find_the_index_of_the_first_occurrence_in_a_string","459_repeated_substring_pattern"]},{text:"Two Pointers",prefix:"two_pointers/",collapsible:!0,icon:"discover",children:[""]},{text:"Stack/Queue",prefix:"stack_queue/",collapsible:!0,icon:"discover",children:["","232_implement_queue_using_stacks","225_implement_stack_using_queues","20_valid_parentheses","1047_remove_all_adjacent_duplicates_in_string","150_evaluate_reverse_polish_notation","239_sliding_window_maximum","347_top_k_frequent_elements"]},{text:"Binary Tree",prefix:"binary_tree/",collapsible:!0,icon:"discover",children:["","144_binary_tree_pre_order_traversal","94_binary_tree_in_order_traversal","145_binary_tree_post_order_traversal","102_binary_tree_level_order_traversal","107_binary_tree_level_order_traversal_ii","199_binary_tree_right_side_view","637_average_of_levels_in_binary_tree","429_n_ary_tree_level_order_traversal","515_find_largest_value_in_each_tree_row","116_populating_next_right_pointers_in_each_node","117_populating_next_right_pointers_in_each_node_ii","101_symmetric_tree","104_maximum_depth_of_binary_tree","111_minimum_depth_of_binary_tree","222_count_complete_tree_nodes","110_balanced_binary_tree","257_binary_tree_paths","404_sum_of_left_leaves","513_find_bottom_left_tree_value","112_path_sum","113_path_sum_ii","226_invert_binary_tree","105_construct_binary_tree_from_preorder_and_inorder_traversal","106_construct_binary_tree_from_post_order_and_in_order_traversal","654_maximum_binary_tree","617_merge_two_binary_trees","700_search_in_a_binary_search_tree","98_validate_binary_search_tree","530_minimum_absolute_difference_in_bst","501_find_mode_in_binary_search_tree","538_convert_bst_to_greater_tree","236_lowest_common_ancestor_of_a_binary_tree","235_lowest_common_ancestor_of_a_binary_search_tree","701_insert_into_a_binary_search_tree","450_delete_node_in_a_bst","669_trim_a_binary_search_tree","108_convert_sorted_array_to_binary_search_tree","109_convert_sorted_list_to_binary_search_tree","100_same_tree","572_subtree_of_another_tree","559_maximum_depth_of_n_ary_tree"]},{text:"Backtracking",prefix:"backtracking/",collapsible:!0,icon:"discover",children:["","77_combinations","17_letter_combinations_of_a_phone_number","39_combination_sum","40_combination_sum_ii","216_combination_sum_iii","131_palindrome_partitioning","93_restore_ip_addresses","78_subsets","90_subsets_ii","46_permutations","47_permutations_ii","51_n_queens","52_n_queens_ii","36_valid_sudoku","37_sudoku_solver","491_non_decreasing_subsequences","332_reconstruct_itinerary"]},{text:"Greedy",prefix:"greedy/",collapsible:!0,icon:"discover",children:["","455_assign_cookies","1005_maximize_sum_of_array_after_k_negations","860_lemonade_change","376_wiggle_subsequence","738_monotone_increasing_digits","122_best_time_to_buy_and_sell_stock_ii","714_best_time_to_buy_and_sell_stock_with_transaction_fee","135_candy","406_queue_reconstruction_by_height","55_jump_game","45_jump_game_ii","452_minimum_number_of_arrows_to_burst_balloons","435_non_overlapping_intervals","763_partition_labels","56_merge_intervals","53_maximum_subarray","134_gas_station","968_binary_tree_cameras"]},{text:"Dynamic Programming",prefix:"dp/",collapsible:!0,icon:"discover",children:["","509_fibonacci_number","70_climbing_stairs","1137_nth_tribonacci_number","746_min_cost_climbing_stairs","740_delete_and_earn","198_house_robber","343_integer_break","62_unique_paths"]},{text:"Monotonic Stack",prefix:"mono_stack/",collapsible:!0,icon:"discover",children:[""]},{text:"Graph",prefix:"graph/",collapsible:!0,icon:"discover",children:[""]},{text:"Other",prefix:"other/",collapsible:!0,icon:"discover",children:[""]}]}],"/rust/":[{text:"The Rust Programming Language",prefix:"the_book/",collapsible:!0,icon:"note",children:["","foreword"]}]}},41416:(e,t,r)=>{r.d(t,{B:()=>he});var n={};r.r(n),r.d(n,{default:()=>k});var i={};r.r(i);var o={};r.r(o);var a={};r.r(a),r.d(a,{default:()=>z});var d={};r.r(d);var s={};r.r(s);var c={};r.r(c),r.d(c,{default:()=>B});var l={};r.r(l),r.d(l,{default:()=>G});var h={};r.r(h);var m={};r.r(m);var g={};r.r(g),r.d(g,{default:()=>L});var p={};r.r(p),r.d(p,{default:()=>J});var _={};r.r(_),r.d(_,{default:()=>$});var b={};r.r(b),r.d(b,{default:()=>te});var u={};r.r(u),r.d(u,{default:()=>le});var y=r(2553);const k={enhance:({app:e})=>{e.component("GitContributors",y.B)}};var v=r(54843),f=r(6430),x=r(21530),w=r(22477),T=r(85066);const z=(0,v.re)({enhance:({app:e})=>{e.component("ChartJS",f.A),e.component("ECharts",x.A),e.component("FlowChart",w.A),e.component("Mermaid",T.A)}});var I=r(40715),q=r(69914),A=r(59847);const B={enhance:({app:e})=>{e.component("CodeTabs",q.S),e.component("Tabs",A.t)}};var P=r(29162),E=r(68474),S=r(54361),F=r(97313),O=r(89066);const G={enhance:({app:e})=>{e.component("CodeDemo",P.A),e.component("MdDemo",E.A),e.component("Playground",S.A),e.component("SandPack",F.A),e.component("VuePlayground",O.A)}};var C=r(8970);const L={enhance:({app:e})=>{(0,C.cX)(e),e.component("RevealJs",C.X2)},layouts:{Slides:r(42626).R}};var N=r(62975),R=r(10026),D=r(84516),j=r(69228),Y=r(69177),M=r(60362),H=r(39074);const J={enhance:({app:e})=>{(0,j.L)("VPIcon")||e.component("VPIcon",e=>(0,M.h)(H.G,{type:"iconify",prefix:"fa6-solid:",...e}))},setup:()=>{(0,Y.r9V)("https://cdn.jsdelivr.net/npm/iconify-icon@2")}};var V=r(9807),W=r(12482),K=r(6717);r(62773);const $={enhance:({app:e})=>{(0,j.L)("Badge")||e.component("Badge",W.A),(0,j.L)("VPCard")||e.component("VPCard",K.A)},setup:()=>{},rootComponents:[]};var Q=r(31804),U=r(12474),X=r(1026),Z=r(52168),ee=r(28711);const te={enhance({app:e}){(0,ee.wn)(e),e.component("SearchBox",ee.VA)}};var re=r(92767),ne=r(72084),ie=r(98811),oe=r(85226),ae=r(49330),de=r(18305),se=r(95088),ce=(r(12738),r(71969));r(763),r(15679),r(42230),r(5357),(0,ae.M_)(e=>{const t=e.title,r=e.index??!0,n=e.icon;return r?{title:t,content:n?()=>[(0,M.h)((0,M.g2)("VPIcon"),{icon:n,sizing:"both"}),t]:null,order:e.order,index:e.index}:null});const le={enhance:({app:e,router:t})=>{const{scrollBehavior:r}=t.options;t.options.scrollBehavior=async(...e)=>(await ne.s.wait(),r(...e)),(0,ie.i)(e),e.component("BloggerInfo",de.l),e.component("SocialMedias",de.k),e.component("GlobalEncrypt",ce.J),e.component("LocalEncrypt",ce.n)},setup:()=>{(0,ie.s)(),(0,ie.a)(),(0,se.su)()},layouts:{Layout:oe.L,NotFound:oe.N,Blog:de.B}},he=[n,i,o,a,d,I,s,c,l,h,m,g,N,R,D,p,V,_,Q,U,X,Z,b,re,u].map(e=>e.default).filter(Boolean)},53781:(e,t,r)=>{r.d(t,{U:()=>n});const n=JSON.parse('{"article":{"/":{"path":"/article/","indexes":[33,34,35,36,37,38,39,40,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,137,138,139,140,141,142,143,144,145,146,147,148,149,150,107,108,109,110,111,112,113,114,115,116,117,118,99,100,101,102,103,104,105,106,18,19,20,21,22,23,24,25,26,27,28,29,30,31,0,1,32,2,3,4,16,5,6,7,8,9,10,11,12,13,14,15,17,302]},"/zh/":{"path":"/zh/article/","indexes":[201,202,203,204,205,206,207,208,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,295,296,297,298,299,300,301,288,289,290,291,292,293,294,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,169,170,171,172,173,174,175,176,177,178,179,180,181,182,151,152,183,153,154,155,167,156,157,158,159,160,161,162,163,164,165,166,168,303]}},"star":{"/":{"path":"/star/","indexes":[]},"/zh/":{"path":"/zh/star/","indexes":[]}},"timeline":{"/":{"path":"/timeline/","indexes":[33,34,35,36,37,38,39,40,5,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,6,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,7,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,8,137,138,139,140,141,142,143,9,10,144,145,146,147,148,149,150,11,107,108,109,110,111,112,113,114,115,116,117,118,12,99,100,101,102,103,104,105,106,13,18,19,20,21,22,23,24,25,26,27,28,29,30,31,0,1,14,32,15,2,3,4,17,16,302]},"/zh/":{"path":"/zh/timeline/","indexes":[201,202,203,204,205,206,207,208,156,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,157,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,158,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,159,295,296,297,298,299,300,301,160,161,288,289,290,291,292,293,294,162,268,269,270,271,272,273,274,275,276,277,278,279,163,280,281,282,283,284,285,286,287,164,169,170,171,172,173,174,175,176,177,178,179,180,181,182,151,152,165,183,166,153,154,155,168,167,303]}}}')},58761:(e,t,r)=>{r.d(t,{U:()=>n});const n=JSON.parse('{"base":"/","lang":"en-US","title":"","description":"","head":[],"locales":{"/zh/":{"lang":"zh-CN","title":"Mike的博客","description":"记录Mike的成长轨迹"},"/":{"lang":"en-US","title":"Mike\'s Blog","description":"Documenting Mike\'s growth"}}}')},61709:(e,t,r)=>{r.d(t,{l:()=>n});const n=JSON.parse('{"category":{"/":{"path":"/category/","map":{"Data Structure":{"path":"/category/data-structure/","indexes":[0]},"algorithm":{"path":"/category/algorithm/","indexes":[1]},"leetcode":{"path":"/category/leetcode/","indexes":[2,3,4,5,6,7,8,9,10,11,12,13,14,15]},"Rust Syntax":{"path":"/category/rust-syntax/","indexes":[16,17]},"array":{"path":"/category/array/","indexes":[18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]},"dynamic programming":{"path":"/category/dynamic-programming/","indexes":[33,34,35,36,37,38,39,40]},"backtracking":{"path":"/category/backtracking/","indexes":[41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57]},"binary tree":{"path":"/category/binary-tree/","indexes":[58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98]},"linkedlist":{"path":"/category/linkedlist/","indexes":[99,100,101,102,103,104,105,106]},"hashtable":{"path":"/category/hashtable/","indexes":[107,108,109,110,111,112,113,114,115,116,117,118]},"greedy":{"path":"/category/greedy/","indexes":[119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136]},"stack/queue":{"path":"/category/stackqueue/","indexes":[137,138,139,140,141,142,143]},"string":{"path":"/category/string/","indexes":[144,145,146,147,148,149,150]}}},"/zh/":{"path":"/zh/category/","map":{"Data Structure":{"path":"/zh/category/data-structure/","indexes":[151]},"algorithm":{"path":"/zh/category/algorithm/","indexes":[152]},"leetcode":{"path":"/zh/category/leetcode/","indexes":[153,154,155,156,157,158,159,160,161,162,163,164,165,166]},"Rust语法":{"path":"/zh/category/rust%E8%AF%AD%E6%B3%95/","indexes":[167,168]},"array":{"path":"/zh/category/array/","indexes":[169,170,171,172,173,174,175,176,177,178,179,180,181,182,183]},"backtracking":{"path":"/zh/category/backtracking/","indexes":[184,185,186,187,188,189,190,191,192,193,194,195,196,197,198]},"Backtracking":{"path":"/zh/category/backtracking/","indexes":[199,200]},"dynamic programming":{"path":"/zh/category/dynamic-programming/","indexes":[201,202,203,204,205,206,207,208]},"binary tree":{"path":"/zh/category/binary-tree/","indexes":[209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249]},"greedy":{"path":"/zh/category/greedy/","indexes":[250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267]},"hashtable":{"path":"/zh/category/hashtable/","indexes":[268,269,270,271,272,273,274,275,276,277,278,279]},"linkedlist":{"path":"/zh/category/linkedlist/","indexes":[280,281,282,283,284,285,286,287]},"string":{"path":"/zh/category/string/","indexes":[288,289,290,291,292,293,294]},"stack/queue":{"path":"/zh/category/stackqueue/","indexes":[295,296,297,298,299,300,301]}}}},"tag":{"/":{"path":"/tag/","map":{"Foreword":{"path":"/tag/foreword/","indexes":[17]},"medium":{"path":"/tag/medium/","indexes":[33,34,35,36,120,121,122,123,124,125,126,127,128,130,131,132,133,41,42,44,47,48,49,50,51,52,53,54,55,56,57,61,63,64,65,66,67,68,71,74,75,76,78,80,88,89,90,91,93,94,95,137,139,147,107,108,109,110,115,116,99,102,103,105,18,19,21,22,31]},"array":{"path":"/tag/array/","indexes":[35,36,37,120,121,122,124,125,126,127,128,129,130,131,133,134,135,136,42,43,44,46,47,48,49,50,53,54,55,62,74,75,76,138,139,107,108,109,110,111,113,114,116,18,19,21,22,23,24,25,26,27,28,31,32,15]},"binary search":{"path":"/tag/binary-search/","indexes":[113,114,22,24,29,30,31,32]},"sliding window":{"path":"/tag/sliding-window/","indexes":[138,115,20,21,22]},"prefix sum":{"path":"/tag/prefix-sum/","indexes":[22]},"easy":{"path":"/tag/easy/","indexes":[37,38,39,40,134,135,136,58,59,60,62,69,70,72,73,77,79,81,82,83,84,85,86,87,92,96,97,98,140,141,142,143,144,145,146,148,149,150,111,112,113,114,117,118,100,101,104,106,23,24,25,26,27,28,29,30,32]},"two pointers":{"path":"/tag/two-pointers/","indexes":[123,136,145,147,149,150,108,109,110,112,113,114,99,100,101,102,23,25,26,27,28,10]},"math":{"path":"/tag/math/","indexes":[33,34,38,39,40,132,139,112,29,30]},"matrix":{"path":"/tag/matrix/","indexes":[43,44,18,19]},"simulation":{"path":"/tag/simulation/","indexes":[18,19]},"hard":{"path":"/tag/hard/","indexes":[119,129,43,45,46,138,20]},"hash table":{"path":"/tag/hash-table/","indexes":[36,123,42,43,44,56,75,76,137,107,111,112,113,114,115,116,117,118,99,100,101,20,21]},"string":{"path":"/tag/string/","indexes":[123,51,52,56,82,140,141,144,145,146,147,148,149,150,115,116,117,118,20,26,11]},"stack":{"path":"/tag/stack/","indexes":[74,96,97,98,139,140,141,142,143,26,9]},"sorting":{"path":"/tag/sorting/","indexes":[122,125,128,135,136,137,108,109,110,113,114,116,118,25]},"dynamic programming":{"path":"/tag/dynamic-programming/","indexes":[33,34,35,36,37,38,39,40,119,121,124,126,127,130,131,133,52,5]},"memoization":{"path":"/tag/memoization/","indexes":[38,39,40]},"recursion":{"path":"/tag/recursion/","indexes":[40,103,104,106]},"combinatorics":{"path":"/tag/combinatorics/","indexes":[33]},"backtracking":{"path":"/tag/backtracking/","indexes":[41,42,43,45,46,47,48,49,50,51,52,53,54,55,56,57,78,82,7]},"depth first search":{"path":"/tag/depth-first-search/","indexes":[119,41,58,59,60,63,66,67,68,69,70,71,73,77,78,79,80,81,82,83,85,86,87,88,89,90,91,92,93,96,97,98]},"graph":{"path":"/tag/graph/","indexes":[41,2]},"bit manipulation":{"path":"/tag/bit-manipulation/","indexes":[42,49,50,84]},"binary tree":{"path":"/tag/binary-tree/","indexes":[119,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,94,95,96,97,98,8]},"breadth first search":{"path":"/tag/breadth-first-search/","indexes":[58,60,70,73,77,78,79,80,81,85,86,87,88,89,90,91,92,93,94,95]},"queue":{"path":"/tag/queue/","indexes":[94,95,138,142,143,9]},"divide and conquer":{"path":"/tag/divide-and-conquer/","indexes":[121,61,62,74,75,76,137]},"tree":{"path":"/tag/tree/","indexes":[58,62,66,91]},"binary search tree":{"path":"/tag/binary-search-tree/","indexes":[61,62,63,64,65,66,68,69,70,71,72]},"linked list":{"path":"/tag/linked-list/","indexes":[61,88,89,99,100,101,102,103,104,105,106]},"string matching":{"path":"/tag/string-matching/","indexes":[59,144,145]},"hash function":{"path":"/tag/hash-function/","indexes":[59]},"monotonic stack":{"path":"/tag/monotonic-stack/","indexes":[74,3]},"design":{"path":"/tag/design/","indexes":[142,143,105]},"linkedlist":{"path":"/tag/linkedlist/","indexes":[13]},"counting":{"path":"/tag/counting/","indexes":[137,117]},"hashtable":{"path":"/tag/hashtable/","indexes":[12]},"greedy":{"path":"/tag/greedy/","indexes":[120,123,124,125,126,127,129,130,131,132,133,134,135,136,6]},"binary indexed tree":{"path":"/tag/binary-indexed-tree/","indexes":[128]},"segment tree":{"path":"/tag/segment-tree/","indexes":[128]},"other":{"path":"/tag/other/","indexes":[4]},"head":{"path":"/tag/head/","indexes":[138]},"monotonic queue":{"path":"/tag/monotonic-queue/","indexes":[138]},"heap(priority queue)":{"path":"/tag/heap(priority-queue)/","indexes":[137]},"bucket sort":{"path":"/tag/bucket-sort/","indexes":[137]},"quick select":{"path":"/tag/quick-select/","indexes":[137]}}},"/zh/":{"path":"/zh/tag/","map":{"前言":{"path":"/zh/tag/%E5%89%8D%E8%A8%80/","indexes":[168]},"medium":{"path":"/zh/tag/medium/","indexes":[201,202,203,204,251,252,253,254,255,256,257,258,259,261,262,263,264,184,185,187,190,191,192,193,194,195,196,197,198,199,200,212,214,215,216,217,218,219,222,225,226,227,229,231,239,240,241,242,244,245,246,295,297,291,268,269,270,271,276,277,280,283,284,286,169,170,172,173,182]},"array":{"path":"/zh/tag/array/","indexes":[203,204,205,251,252,253,255,256,257,258,259,260,261,262,264,265,266,267,185,186,187,189,190,191,192,193,196,197,198,213,225,226,227,296,297,268,269,270,271,272,274,275,277,169,170,172,173,174,175,176,177,178,179,182,183,166]},"binary search":{"path":"/zh/tag/binary-search/","indexes":[274,275,173,175,180,181,182,183]},"sliding window":{"path":"/zh/tag/sliding-window/","indexes":[296,276,171,172,173]},"prefix sum":{"path":"/zh/tag/prefix-sum/","indexes":[173]},"easy":{"path":"/zh/tag/easy/","indexes":[205,206,207,208,265,266,267,209,210,211,213,220,221,223,224,228,230,232,233,234,235,236,237,238,243,247,248,249,298,299,300,301,288,289,290,292,293,294,272,273,274,275,278,279,281,282,285,287,174,175,176,177,178,179,180,181,183]},"two pointers":{"path":"/zh/tag/two-pointers/","indexes":[254,267,289,291,293,294,269,270,271,273,274,275,280,281,282,283,174,176,177,178,179,161]},"math":{"path":"/zh/tag/math/","indexes":[201,202,206,207,208,263,297,273,180,181]},"matrix":{"path":"/zh/tag/matrix/","indexes":[186,187,169,170]},"simulation":{"path":"/zh/tag/simulation/","indexes":[169,170]},"hard":{"path":"/zh/tag/hard/","indexes":[250,260,186,188,189,296,171]},"hash table":{"path":"/zh/tag/hash-table/","indexes":[204,254,185,186,187,199,226,227,295,268,272,273,274,275,276,277,278,279,280,281,282,171,172]},"string":{"path":"/zh/tag/string/","indexes":[254,194,195,199,233,298,299,288,289,290,291,292,293,294,276,277,278,279,171,177,162]},"stack":{"path":"/zh/tag/stack/","indexes":[225,247,248,249,297,298,299,300,301,177,160]},"sorting":{"path":"/zh/tag/sorting/","indexes":[253,256,259,266,267,295,269,270,271,274,275,277,279,176]},"dynamic programming":{"path":"/zh/tag/dynamic-programming/","indexes":[201,202,203,204,205,206,207,208,250,252,255,257,258,261,262,264,195,156]},"backtracking":{"path":"/zh/tag/backtracking/","indexes":[184,185,186,188,189,190,191,192,193,194,195,196,197,198,199,200,229,233,158]},"depth first search":{"path":"/zh/tag/depth-first-search/","indexes":[250,184,209,210,211,214,217,218,219,220,221,222,224,228,229,230,231,232,233,234,236,237,238,239,240,241,242,243,244,247,248,249]},"graph":{"path":"/zh/tag/graph/","indexes":[184,153]},"bit manipulation":{"path":"/zh/tag/bit-manipulation/","indexes":[185,192,193,235]},"memoization":{"path":"/zh/tag/memoization/","indexes":[206,207,208]},"recursion":{"path":"/zh/tag/recursion/","indexes":[208,284,285,287]},"combinatorics":{"path":"/zh/tag/combinatorics/","indexes":[201]},"binary tree":{"path":"/zh/tag/binary-tree/","indexes":[250,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,243,244,245,246,247,248,249,159]},"breadth first search":{"path":"/zh/tag/breadth-first-search/","indexes":[209,211,221,224,228,229,230,231,232,236,237,238,239,240,241,242,243,244,245,246]},"queue":{"path":"/zh/tag/queue/","indexes":[245,246,296,300,301,160]},"divide and conquer":{"path":"/zh/tag/divide-and-conquer/","indexes":[252,212,213,225,226,227,295]},"tree":{"path":"/zh/tag/tree/","indexes":[209,213,217,242]},"binary search tree":{"path":"/zh/tag/binary-search-tree/","indexes":[212,213,214,215,216,217,219,220,221,222,223]},"linked list":{"path":"/zh/tag/linked-list/","indexes":[212,239,240,280,281,282,283,284,285,286,287]},"string matching":{"path":"/zh/tag/string-matching/","indexes":[210,288,289]},"hash function":{"path":"/zh/tag/hash-function/","indexes":[210]},"monotonic stack":{"path":"/zh/tag/monotonic-stack/","indexes":[225,154]},"greedy":{"path":"/zh/tag/greedy/","indexes":[251,254,255,256,257,258,260,261,262,263,264,265,266,267,157]},"binary indexed tree":{"path":"/zh/tag/binary-indexed-tree/","indexes":[259]},"segment tree":{"path":"/zh/tag/segment-tree/","indexes":[259]},"counting":{"path":"/zh/tag/counting/","indexes":[295,278]},"hashtable":{"path":"/zh/tag/hashtable/","indexes":[163]},"design":{"path":"/zh/tag/design/","indexes":[300,301,286]},"linkedlist":{"path":"/zh/tag/linkedlist/","indexes":[164]},"other":{"path":"/zh/tag/other/","indexes":[155]},"head":{"path":"/zh/tag/head/","indexes":[296]},"monotonic queue":{"path":"/zh/tag/monotonic-queue/","indexes":[296]},"heap(priority queue)":{"path":"/zh/tag/heap(priority-queue)/","indexes":[295]},"bucket sort":{"path":"/zh/tag/bucket-sort/","indexes":[295]},"quick select":{"path":"/zh/tag/quick-select/","indexes":[295]}}}}}')},68164:(e,t,r)=>{r.d(t,{J:()=>i,c:()=>n});const n=JSON.parse("{}"),i=Object.fromEntries([["/",{loader:()=>r.e(24470).then(r.bind(r,32794)),meta:{title:"Home",icon:"home"}}],["/intro.html",{loader:()=>r.e(63912).then(r.bind(r,91366)),meta:{date:1695232393e3,cover:"/assets/images/cover3.jpg",excerpt:"\n<p>A backend programmer.</p>\n<p>Use Java, Rust.</p>\n",readingTime:{minutes:.04,words:13},title:"Intro Page",icon:"circle-info",type:"article"}}],["/zh/",{loader:()=>r.e(10433).then(r.bind(r,31747)),meta:{title:"主页",icon:"home"}}],["/zh/intro.html",{loader:()=>r.e(787).then(r.bind(r,58525)),meta:{date:1695232393e3,cover:"/assets/images/cover3.jpg",excerpt:"\n<p>一名医学生在转码的路上狂奔...</p>\n",readingTime:{minutes:.07,words:22},title:"介绍页",icon:"circle-info",type:"article"}}],["/algorithm/1800/",{loader:()=>r.e(3032).then(r.bind(r,20631)),meta:{date:16957728e5,category:["Data Structure"],sticky:!0,excerpt:'<div class="hint-container info">\n<p class="hint-container-title">Info</p>\n<p>感谢殷人昆老师的<a href="http://www.tup.tsinghua.edu.cn/booksCenter/book_06752701.html" target="_blank" rel="noopener noreferrer">著作</a></p>\n</div>\n<h2>目录</h2>\n<h3>第1章 数据结构绪论</h3>\n<h4>1.1 数据结构的概念及分类</h4>\n<h4>1.2 算法设计与算法分析</h4>\n<h3>第2章 线性表</h3>',readingTime:{minutes:1.18,words:355},title:"Data Structure and Exercises",icon:"discover",type:"article"}}],["/algorithm/introduction/",{loader:()=>r.e(38221).then(r.bind(r,29261)),meta:{date:16957728e5,category:["algorithm"],sticky:!0,excerpt:"<h2>Contents</h2>\n<h3>Part I Foundations</h3>\n<h4>Introduction</h4>\n<h4>1 The Role of Algorithms in Computing</h4>\n<h4>2 Getting Started</h4>\n<h4>3 Characterizing Running Times</h4>\n<h4>4 Divide-and-Conquer</h4>\n<h4>5 Probabilistic Analysis and Randomized Algorithms</h4>\n<h3>Part II Sorting and Order Statistics</h3>",readingTime:{minutes:.7,words:209},title:"Introduction To Algorithms(4 ed)",icon:"discover",type:"article"}}],["/algorithm/leetcode/",{loader:()=>r.e(11090).then(r.bind(r,51235)),meta:{date:16957728e5,category:["leetcode"],excerpt:'<h2>LeetCode Topic</h2>\n<h3><a href="/algorithm/leetcode/array/" target="_blank">Array</a></h3>\n<h3><a href="/algorithm/leetcode/linkedlist/" target="_blank">LinkedList</a></h3>\n<h3><a href="/algorithm/leetcode/hashtable/" target="_blank">HashTable</a></h3>\n<h3><a href="/algorithm/leetcode/string/" target="_blank">String</a></h3>',readingTime:{minutes:.14,words:42},title:"LeetCode",icon:"discover",type:"article"}}],["/rust/the_book/",{loader:()=>r.e(75591).then(r.bind(r,4689)),meta:{date:16954272e5,category:["Rust Syntax"],sticky:!0,excerpt:"<p>This book mainly describes the basic grammar of Rust.</p>\n",readingTime:{minutes:.53,words:160},title:"The Rust Programming Language",icon:"note",type:"article"}}],["/rust/the_book/foreword.html",{loader:()=>r.e(41033).then(r.bind(r,16024)),meta:{date:16955136e5,category:["Rust Syntax"],tag:["Foreword"],excerpt:'<h2>Foreword</h2>\n<p>It wasn\'t always so clear, but the Rust programming language is fundamentally<br>\nabout empowerment: no matter what kind of code you are writing now, Rust empowers<br>\nyou to reach farther, to program with confidence in a wider variety of domains<br>\nthan you did before.</p>\n<p>Take, for example, "systems-level" work that deals with low-level details of memory<br>\nmanagement, data representation, and concurrency. Traditionally, this realm of<br>\nprogramming is seen as arcane, accessible only to a select few who have devoted the<br>\nnecessary years learning to avoid its infamous pitfalls. And even those who practice<br>\nit do so with caution, lest their code be open to exploits, crashes, or corruption.</p>',readingTime:{minutes:1.35,words:406},title:"Foreword",icon:"note",type:"article"}}],["/algorithm/leetcode/array/209_minimum_size_subarray_sum.html",{loader:()=>r.e(19044).then(r.bind(r,63880)),meta:{date:16970688e5,category:["array"],tag:["medium","array","binary search","sliding window","prefix sum"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given an array of positive integers nums and a positive integer target, return the minimal length of a subarray whose sum is greater than or equal to target. If there is no such subarray, return 0 instead.</p>\n<p><strong>Example 1:</strong><br>\nInput: target = 7, nums = [2,3,1,2,4,3]<br>\nOutput: 2<br>\nExplanation: The subarray [4,3] has the minimal length under the problem constraint.</p>",readingTime:{minutes:2.06,words:617},title:"209, Minimum Size Subarray Sum",icon:"discover",order:11,type:"article"}}],["/algorithm/leetcode/array/26_remove_duplicates_from_sorted_array.html",{loader:()=>r.e(1827).then(r.bind(r,34960)),meta:{date:16965504e5,category:["array"],tag:["easy","array","two pointers"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once.<br>\nThe relative order of the elements should be kept the same. Then return the number of unique elements in nums.</p>\n<p>Consider the number of unique elements of nums to be k, to get accepted, you need to do the following things:</p>",readingTime:{minutes:1.47,words:442},title:"26, Remove Duplicates from Sorted Array",icon:"discover",order:7,type:"article"}}],["/algorithm/leetcode/array/27_remove_element.html",{loader:()=>r.e(28887).then(r.bind(r,93607)),meta:{date:16969824e5,category:["array"],tag:["easy","array","two pointers"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The order of the elements may be changed. Then return the number of elements in nums which are not equal to val.</p>\n<p>Consider the number of elements in nums which are not equal to val be k, to get accepted, you need to do the following things:</p>",readingTime:{minutes:1.41,words:423},title:"27, Remove Element",icon:"discover",order:6,type:"article"}}],["/algorithm/leetcode/array/283_move_zeroes.html",{loader:()=>r.e(73944).then(r.bind(r,44316)),meta:{date:16966368e5,category:["array"],tag:["easy","array","two pointers"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.</p>\n<p>Note that you must do this in-place without making a copy of the array.</p>\n<p><strong>Example 1:</strong><br>\nInput: nums = [0, 1, 0, 3, 12]<br>\nOutput: [1, 3, 12, 0, 0]</p>",readingTime:{minutes:1.21,words:363},title:"283, Move Zeroes",icon:"discover",order:8,type:"article"}}],["/algorithm/leetcode/array/34_find_first_and_last_position_of_element_in_sorted_array.html",{loader:()=>r.e(92558).then(r.bind(r,6185)),meta:{date:16958592e5,category:["array"],tag:["medium","array","binary search"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.</p>\n<p>If target is not found in the array, return [-1, -1].</p>\n<p>You must write an algorithm with O(log n) runtime complexity.</p>\n<p><strong>Example 1:</strong><br>\nInput: nums = [5,7,7,8,8,10], target = 8<br>\nOutput: [3,4]</p>",readingTime:{minutes:2.17,words:650},title:"34, Find First and Last Position of Element in Sorted Array",icon:"discover",order:3,type:"article"}}],["/algorithm/leetcode/array/35_search_insert_position.html",{loader:()=>r.e(29003).then(r.bind(r,51749)),meta:{date:16957728e5,category:["array"],tag:["easy","array","binary search"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p>\n<p>You must write an algorithm with O(log n) runtime complexity.</p>\n<p><strong>Example 1:</strong></p>",readingTime:{minutes:2.26,words:677},title:"35, Search Insert Position",icon:"discover",order:2,type:"article"}}],["/algorithm/leetcode/array/367_valid_perfect_square.html",{loader:()=>r.e(28203).then(r.bind(r,89202)),meta:{date:16961184e5,category:["array"],tag:["easy","math","binary search"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given a positive integer num, return true if num is a perfect square or false otherwise.</p>\n<p>A perfect square is an integer that is the square of an integer. In other words, it is the product of some integer with itself.</p>\n<p>You must not use any built-in library function, such as sqrt.</p>",readingTime:{minutes:1.2,words:359},title:"367, Valid Perfect Square",icon:"discover",order:5,type:"article"}}],["/algorithm/leetcode/array/54_spiral_matrix.html",{loader:()=>r.e(57647).then(r.bind(r,14534)),meta:{date:16975872e5,category:["array"],tag:["medium","array","matrix","simulation"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given an m x n matrix, return all elements of the matrix in spiral order.</p>\n<p><strong>Example 1</strong><br>\n<br>\nInput: matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]<br>\nOutput: [1, 2, 3, 6, 9, 8, 7, 4, 5]</p>\n<p><strong>Example 2</strong><br>\n<br>\nInput: matrix = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]<br>\nOutput: [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7]</p>",readingTime:{minutes:2.18,words:655},title:"54, Spiral Matrix",icon:"discover",order:14,type:"article"}}],["/algorithm/leetcode/array/59_spiral_matrix_ii.html",{loader:()=>r.e(76013).then(r.bind(r,41556)),meta:{date:16976736e5,category:["array"],tag:["medium","array","matrix","simulation"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given a positive integer n, generate an <code>n x n</code> matrix filled with elements from <code>1 to n²</code> in spiral order.</p>\n<p><strong>Example 1:</strong><br>\n<br>\nInput: n = 3<br>\nOutput: [[1, 2, 3], [8, 9, 4], [7, 6, 5]]</p>\n<p><strong>Example 2:</strong><br>\nInput: n = 1<br>\nOutput: [[1]]</p>",readingTime:{minutes:1.85,words:555},title:"59, Spiral Matrix II",icon:"discover",order:15,type:"article"}}],["/algorithm/leetcode/array/69_sqrt_x.html",{loader:()=>r.e(96491).then(r.bind(r,59911)),meta:{date:1696032e6,category:["array"],tag:["easy","math","binary search"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well.</p>\n<p>You must not use any built-in exponent function or operator.</p>\n<p>For example, do not use pow(x, 0.5) in c++ or x ** 0.5 in python.</p>",readingTime:{minutes:1.54,words:462},title:"69, Sqrt(x)",icon:"discover",order:4,type:"article"}}],["/algorithm/leetcode/array/704_binary_search.html",{loader:()=>r.e(93400).then(r.bind(r,14305)),meta:{date:1696896e6,category:["array"],tag:["easy","array","binary search"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums.<br>\nIf target exists, then return its index. Otherwise, return -1.</p>\n<p>You must write an algorithm with O(log n) runtime complexity.</p>\n<p><strong>Example 1:</strong><br>\nInput: nums = [-1,0,3,5,9,12], target = 9<br>\nOutput: 4<br>\nExplanation: 9 exists in nums and its index is 4</p>",readingTime:{minutes:3.31,words:993},title:"704, Binary Search",icon:"discover",order:1,type:"article"}}],["/algorithm/leetcode/array/76_minimum_window_substring.html",{loader:()=>r.e(57595).then(r.bind(r,58136)),meta:{date:16974144e5,category:["array"],tag:["hard","hash table","string","sliding window"],sticky:!0,excerpt:'<h2>I Problem</h2>\n<p>Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string "".</p>\n<p>The testcases will be generated such that the answer is unique.</p>',readingTime:{minutes:1.51,words:454},title:"76, Minimum Window Substring",icon:"discover",order:13,type:"article"}}],["/algorithm/leetcode/array/844_backspace_string_compare.html",{loader:()=>r.e(42354).then(r.bind(r,92431)),meta:{date:16967232e5,category:["array"],tag:["easy","array","two pointers","stack","string"],sticky:!0,excerpt:'<h2>I Problem</h2>\n<p>Given two strings s and t, return true if they are equal when both are typed into empty text editors. \'#\' means a backspace character.</p>\n<p>Note that after backspacing an empty text, the text will continue empty.</p>\n<p><strong>Example 1:</strong><br>\nInput: s = "ab#c", t = "ad#c"<br>\nOutput: true<br>\nExplanation: Both s and t become "ac".</p>',readingTime:{minutes:1.65,words:495},title:"844, Backspace String Compare",icon:"discover",order:9,type:"article"}}],["/algorithm/leetcode/array/904_fruit_into_baskets.html",{loader:()=>r.e(66003).then(r.bind(r,95766)),meta:{date:16971552e5,category:["array"],tag:["medium","array","hash table","sliding window"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>You are visiting a farm that has a single row of fruit trees arranged from left to right. The trees are represented by an integer array fruits where fruits[i] is the type of fruit the iᵗʰ tree produces.</p>\n<p>You want to collect as much fruit as possible. However, the owner has some strict rules that you must follow:</p>",readingTime:{minutes:1.85,words:555},title:"904, Fruit Into Baskets",icon:"discover",order:12,type:"article"}}],["/algorithm/leetcode/array/977_squares_of_a_sorted_array.html",{loader:()=>r.e(59320).then(r.bind(r,95195)),meta:{date:16968096e5,category:["array"],tag:["easy","array","two pointers","sorting"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.</p>\n<p><strong>Example 1:</strong><br>\nInput: nums = [-4, -1, 0, 3, 10]<br>\nOutput: [0, 1, 9, 16, 100]<br>\nExplanation: After squaring, the array becomes [16, 1, 0, 9, 100]. After sorting, it becomes [0, 1, 9, 16, 100].</p>",readingTime:{minutes:1.73,words:520},title:"977, Squares of a Sorted Array",icon:"discover",order:10,type:"article"}}],["/algorithm/leetcode/array/",{loader:()=>r.e(18204).then(r.bind(r,72859)),meta:{date:16957728e5,category:["leetcode"],tag:["array"],sticky:!1,excerpt:'<h2>About Array</h2>\n<p>When memory is allocated for an array, its individual elements are adjacent, so we can access it by index.<br>\n</p>\n<div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>let nums = [10, 11, 12, 13, 14, 15];</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>Array:   10  11  12  13  14  15</span></span>\n<span class="line"><span>index:    0   1   2   3   4   5</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>assert_eq(nums[0], 10);</span></span>\n<span class="line"><span>assert_eq(nums[5], 15);</span></span>\n<span class="line"><span>assert_eq(nums[6], xx); // ERROR，index out of bounds</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:.6,words:181},title:"Array",icon:"discover",order:1,type:"article"}}],["/algorithm/leetcode/dp/1137_nth_tribonacci_number.html",{loader:()=>r.e(43525).then(r.bind(r,97918)),meta:{date:17119296e5,category:["dynamic programming"],tag:["easy","math","dynamic programming","memoization"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>The Tribonacci sequence <code>Tn</code> is defined as follows:</p>\n<p>T0 = 0, T1 = 1, T2 = 1, and Tn+3 = Tn + Tn+1 + Tn+2 for n &gt;= 0.</p>\n<p>Given <code>n</code>, return the value of <code>Tn</code>.</p>\n<p><strong>Example 1</strong><br>\nInput: n = 4<br>\nOutput: 4<br>\nExplanation:<br>\nT_3 = 0 + 1 + 1 = 2<br>\nT_4 = 1 + 1 + 2 = 4</p>",readingTime:{minutes:3.26,words:979},title:"1137, N-th Tribonacci Number",icon:"discover",order:3,type:"article"}}],["/algorithm/leetcode/dp/198_house_robber.html",{loader:()=>r.e(39557).then(r.bind(r,23888)),meta:{date:1712448e6,category:["dynamic programming"],tag:["medium","array","dynamic programming"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and <strong>it will automatically contact the police if two adjacent houses were broken into on the same night</strong>.</p>",readingTime:{minutes:1.8,words:540},title:"198, House Robber",icon:"discover",order:6,type:"article"}}],["/algorithm/leetcode/dp/343_integer_break.html",{loader:()=>r.e(98182).then(r.bind(r,86054)),meta:{date:17131392e5,category:["dynamic programming"],tag:["medium","math","dynamic programming"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given an integer <code>n</code>, break it into the sum of <code>k</code> <strong>positive integers</strong>, where <code>k &gt;= 2</code>, and maximize the product of those integers.</p>\n<p>Return <em>the maximum product you can get</em>.</p>\n<p><strong>Example 1</strong><br>\nInput: n = 2<br>\nOutput: 1<br>\nExplanation: 2 = 1 + 1, 1 × 1 = 1.</p>",readingTime:{minutes:2.15,words:645},title:"343, Integer Break",icon:"discover",order:7,type:"article"}}],["/algorithm/leetcode/dp/509_fibonacci_number.html",{loader:()=>r.e(49798).then(r.bind(r,24527)),meta:{date:17117568e5,category:["dynamic programming"],tag:["easy","recursion","memoization","math","dynamic programming"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>The <strong>Fibonacci numbers</strong>, commonly denoted <code>F(n)</code> form a sequence, called the <strong>Fibonacci sequence</strong>, such that each number is the sum of the two preceding ones, starting from <code>0</code> and <code>1</code>. That is,</p>\n<ul>\n<li>F(0) = 0, F(1) = 1</li>\n<li>F(n) = F(n - 1) + F(n - 2), for n &gt; 1</li>\n</ul>",readingTime:{minutes:3.41,words:1024},title:"509, Fibonacci Number",icon:"discover",order:1,type:"article"}}],["/algorithm/leetcode/dp/62_unique_paths.html",{loader:()=>r.e(27194).then(r.bind(r,58042)),meta:{date:17132256e5,category:["dynamic programming"],tag:["medium","math","dynamic programming","combinatorics"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>There is a robot on an <code>m x n</code> grid. The robot is initially located at the <strong>top-left corner</strong> (i.e., <code>grid[0][0]</code>). The robot tries to move to the <strong>bottom-right corner</strong> (i.e., <code>grid[m - 1][n - 1]</code>). The robot can only move either down or right at any point in time.</p>",readingTime:{minutes:2.16,words:648},title:"62, Unique Paths",icon:"discover",order:8,type:"article"}}],["/algorithm/leetcode/dp/70_climbing_stairs.html",{loader:()=>r.e(36069).then(r.bind(r,11082)),meta:{date:17118432e5,category:["dynamic programming"],tag:["easy","math","dynamic programming","memoization"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>You are climbing a staircase. It takes <code>n</code> steps to reach the top.</p>\n<p>Each time you can either climb <code>1</code> or <code>2</code> steps. In how many distinct ways can you climb to the top?</p>\n<p><strong>Example 1</strong><br>\nInput: n = 2<br>\nOutput: 2<br>\nExplanation: There are two ways to climb to the top.</p>",readingTime:{minutes:2.73,words:820},title:"70, Climbing Stairs",icon:"discover",order:2,type:"article"}}],["/algorithm/leetcode/dp/740_delete_and_earn.html",{loader:()=>r.e(48117).then(r.bind(r,35414)),meta:{date:17121888e5,category:["dynamic programming"],tag:["medium","array","hash table","dynamic programming"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>You are given an integer array <code>nums</code>. You want to maximize the number of points you get by performing the following operation any number of times:</p>\n<ul>\n<li>Pick any <code>nums[i]</code> and delete it to earn <code>nums[i]</code> points. Afterwards, you must delete <strong>every</strong> element equal to <code>nums[i] - 1</code> and every element equal to <code>nums[i] + 1</code>.</li>\n</ul>",readingTime:{minutes:2.62,words:785},title:"740, Delete and Earn",icon:"discover",order:5,type:"article"}}],["/algorithm/leetcode/dp/746_min_cost_climbing_stairs.html",{loader:()=>r.e(31178).then(r.bind(r,5163)),meta:{date:17121024e5,category:["dynamic programming"],tag:["easy","array","dynamic programming"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>You are given an integer array <code>cost</code> where <code>cost[i]</code> is the cost of <code>iᵗʰ</code> step on a staircase. Once you pay the cost, you can either climb one or two steps.</p>\n<p>You can either start from the step with index <code>0</code>, or the step with index <code>1</code>.</p>",readingTime:{minutes:1.73,words:518},title:"746, Min Cost Climbing Stairs",icon:"discover",order:4,type:"article"}}],["/algorithm/leetcode/dp/",{loader:()=>r.e(42843).then(r.bind(r,44411)),meta:{date:1711584e6,category:["leetcode"],tag:["dynamic programming"],sticky:!1,excerpt:"<h2>Dynamic Programming</h2>\n<h3>What is Dynamic Programming (DP)?</h3>\n<p><strong>Dynamic Programming (DP)</strong> is a method used in mathematics and computer science to solve complex problems by breaking them down into simpler subproblems. By solving each subproblem only once and storing the results, it avoids redundant computations, leading to more efficient solutions for a wide range of problems.</p>",readingTime:{minutes:1.65,words:495},title:"Dynamic Programming",icon:"discover",order:10,type:"article"}}],["/algorithm/leetcode/backtracking/131_palindrome_partitioning.html",{loader:()=>r.e(66343).then(r.bind(r,10295)),meta:{date:1706832e6,category:["backtracking"],tag:["medium","string","dynamic programming","backtracking"],sticky:!0,excerpt:'<h2>I Problem</h2>\n<p>Given a string <code>s</code>, partition <code>s</code> such that every substring of the partition is a <strong>palindrome</strong>. Return <em>all possible palindrome partitioning of <code>s</code></em>.</p>\n<p><strong>Example 1</strong><br>\nInput: s = "aab"<br>\nOutput: [["a", "a", "b"],["aa", "b"]]</p>',readingTime:{minutes:1.89,words:568},title:"131, Palindrome Partitioning",icon:"discover",order:6,type:"article"}}],["/algorithm/leetcode/backtracking/17_letter_combinations_of_a_phone_number.html",{loader:()=>r.e(99658).then(r.bind(r,12951)),meta:{date:17064e8,category:["backtracking"],tag:["medium","hash table","string","backtracking"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given a string containing digits from <code>2-9</code> inclusive, return all possible letter combinations that the number could represent. Return the answer <strong>in any order</strong>.</p>\n<p>A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p>",readingTime:{minutes:1.18,words:354},title:"17, Letter Combinations of a Phone Number",icon:"discover",order:2,type:"article"}}],["/algorithm/leetcode/backtracking/216_combination_sum_iii.html",{loader:()=>r.e(47634).then(r.bind(r,92142)),meta:{date:17067456e5,category:["backtracking"],tag:["medium","array","backtracking"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Find all valid combinations of <code>k</code> numbers that sum up to <code>n</code> such that the following conditions are true:</p>\n<ul>\n<li>Only numbers <code>1</code> through <code>9</code> are used.</li>\n<li>Each number is used <strong>at most once</strong>.</li>\n</ul>\n<p>Return <em>a list of all possible valid combinations</em>. The list must not contain the same combination twice, and the combinations may be returned in any order.</p>",readingTime:{minutes:1.87,words:561},title:"216, Combination Sum III",icon:"discover",order:5,type:"article"}}],["/algorithm/leetcode/backtracking/332_reconstruct_itinerary.html",{loader:()=>r.e(59742).then(r.bind(r,71699)),meta:{date:17083872e5,category:["backtracking"],tag:["medium","depth first search","graph","backtracking"],sticky:!0,excerpt:'<h2>I Problem</h2>\n<p>You are given a list of airline <code>tickets</code> where <code>tickets[i] = [fromi, toi]</code> represent the departure and the arrival airports of one flight. Reconstruct the itinerary in order and return it.</p>\n<p>All of the tickets belong to a man who departs from <code>"JFK"</code>, thus, the itinerary must begin with <code>"JFK"</code>. If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string.</p>',readingTime:{minutes:2.34,words:703},title:"332, Reconstruct Itinerary",icon:"discover",order:17,type:"article"}}],["/algorithm/leetcode/backtracking/36_valid_sudoku.html",{loader:()=>r.e(63737).then(r.bind(r,37986)),meta:{date:17079552e5,category:["backtracking"],tag:["medium","array","hash table","matrix"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Determine if a <code>9 x 9</code> Sudoku board is valid. Only the filled cells need to be validated <strong>according to the following rules:</strong></p>\n<ol>\n<li>Each row must contain the digits <code>1-9</code> without repetition.</li>\n<li>Each column must contain the digits <code>1-9</code> without repetition.</li>\n<li>Each of the nine <code>3 x 3</code> sub-boxes of the grid must contain the digits <code>1-9</code> without repetition.</li>\n</ol>",readingTime:{minutes:2.89,words:866},title:"36, Valid Sudoku",icon:"discover",order:14,type:"article"}}],["/algorithm/leetcode/backtracking/37_sudoku_solver.html",{loader:()=>r.e(2437).then(r.bind(r,63806)),meta:{date:1708128e6,category:["backtracking"],tag:["hard","array","hash table","matrix","backtracking"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Write a program to solve a Sudoku puzzle by filling the empty cells.</p>\n<p>A sudoku solution must satisfy <strong>all of the following rules</strong>:</p>\n<ol>\n<li>Each of the digits <code>1-9</code> must occur exactly once in each row.</li>\n<li>Each of the digits <code>1-9</code> must occur exactly once in each column.</li>\n<li>Each of the digits <code>1-9</code> must occur exactly once in each of the 9 <code>3x3</code> sub-boxes of the grid.</li>\n</ol>",readingTime:{minutes:4.18,words:1253},title:"37, Sudoku Solver",icon:"discover",order:15,type:"article"}}],["/algorithm/leetcode/backtracking/39_combination_sum.html",{loader:()=>r.e(11521).then(r.bind(r,63509)),meta:{date:17064864e5,category:["backtracking"],tag:["medium","array","backtracking"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given an array of <strong>distinct</strong> integers <code>candidates</code> and a target integer <code>target</code>, return a <em>list of all <strong>unique combinations</strong> of <code>candidates</code> where the chosen numbers sum to <code>target</code></em>. You may return the combinations in <strong>any order</strong>.</p>",readingTime:{minutes:1.9,words:569},title:"39, Combination Sum",icon:"discover",order:3,type:"article"}}],["/algorithm/leetcode/backtracking/40_combination_sum_ii.html",{loader:()=>r.e(93954).then(r.bind(r,37546)),meta:{date:17065728e5,category:["backtracking"],tag:["medium","array","backtracking"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given a collection of candidate numbers (<code>candidates</code>) and a target number (<code>target</code>), find all unique combinations in <code>candidates</code> where the candidate numbers sum to <code>target</code>.</p>\n<p>Each number in <code>candidates</code> may only be used <strong>once</strong> in the combination.</p>",readingTime:{minutes:2.05,words:615},title:"40, Combination Sum II",icon:"discover",order:4,type:"article"}}],["/algorithm/leetcode/backtracking/46_permutations.html",{loader:()=>r.e(53443).then(r.bind(r,67514)),meta:{date:1707264e6,category:["backtracking"],tag:["medium","array","backtracking"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given an array <code>nums</code> of distinct integers, return <em>all the possible permutations</em>. You can return the answer in <strong>any order</strong>.</p>\n<p><strong>Example 1</strong><br>\nInput: nums = [1, 2, 3]<br>\nOutput: [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]</p>",readingTime:{minutes:1.45,words:435},title:"46, Permutations",icon:"discover",order:10,type:"article"}}],["/algorithm/leetcode/backtracking/47_permutations_ii.html",{loader:()=>r.e(53987).then(r.bind(r,11827)),meta:{date:17075232e5,category:["backtracking"],tag:["medium","array","backtracking"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given a collection of numbers, <code>nums</code>, that might contain duplicates, return <em>all possible unique permutations <strong>in any order</strong></em>.</p>\n<p><strong>Example 1</strong><br>\nInput: nums = [1, 1, 2]<br>\nOutput: [[1, 1, 2], [1, 2, 1], [2, 1, 1]]</p>\n<p><strong>Example 2</strong><br>\nInput: nums = [1, 2, 3]<br>\nOutput: [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]</p>",readingTime:{minutes:1.55,words:465},title:"47, Permutations II",icon:"discover",order:11,type:"article"}}],["/algorithm/leetcode/backtracking/491_non_decreasing_subsequences.html",{loader:()=>r.e(69240).then(r.bind(r,35625)),meta:{date:17083008e5,category:["backtracking"],tag:["medium","array","hash table","bit manipulation","backtracking"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given an integer array <code>nums</code>, return <em>all the different possible non-decreasing subsequences of the given array with at least two elements</em>. You may return the answer in <strong>any order</strong>.</p>\n<p><strong>Example 1</strong><br>\nInput: nums = [4, 6, 7, 7]<br>\nOutput: [[4, 6], [4, 6, 7], [4, 6, 7, 7], [4, 7], [4, 7, 7], [6, 7], [6, 7, 7], [7, 7]]</p>",readingTime:{minutes:1.05,words:314},title:"491, Non-decreasing Subsequences",icon:"discover",order:16,type:"article"}}],["/algorithm/leetcode/backtracking/51_n_queens.html",{loader:()=>r.e(23542).then(r.bind(r,49699)),meta:{date:17076096e5,category:["backtracking"],tag:["hard","array","backtracking"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>The <strong>n-queens</strong> puzzle is the problem of placing <code>n</code>queens on an <code>n x n</code> chessboard such that no two queens attack each other.</p>\n<p>Given an integer <code>n</code>, return <em>all distinct solutions to the <strong>n-queens</strong> puzzle</em>. You may return the answer in <strong>any order</strong>.</p>",readingTime:{minutes:1.38,words:414},title:"51, N-Queens",icon:"discover",order:12,type:"article"}}],["/algorithm/leetcode/backtracking/52_n_queens_ii.html",{loader:()=>r.e(39526).then(r.bind(r,85625)),meta:{date:1707696e6,category:["backtracking"],tag:["hard","backtracking"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>The <strong>n-queens</strong> puzzle is the problem of placing <code>n</code>queens on an <code>n x n</code> chessboard such that no two queens attack each other.</p>\n<p>Given an integer <code>n</code>, return <em>the number of distinct solutions to the <strong>n-queens puzzle</strong></em>.</p>",readingTime:{minutes:1.02,words:305},title:"52, N-Queens II",icon:"discover",order:13,type:"article"}}],["/algorithm/leetcode/backtracking/77_combinations.html",{loader:()=>r.e(26042).then(r.bind(r,44306)),meta:{date:17062272e5,category:["backtracking"],tag:["medium","backtracking"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given two integers <code>n</code> and <code>k</code>, return <em>all possible combinations of <code>k</code> numbers chosen from the range <code>[1, n]</code></em>.</p>\n<p>You may return the answer in <strong>any order</strong>.</p>\n<p><strong>Example 1</strong><br>\nInput: n = 4, k = 2<br>\nOutput: [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]<br>\nExplanation: There are 4 choose 2 = 6 total combinations.<br>\nNote that combinations are unordered, i.e., [1, 2] and [2, 1] are considered to be the same combination.</p>",readingTime:{minutes:2.07,words:622},title:"77, Combinations",icon:"discover",order:1,type:"article"}}],["/algorithm/leetcode/backtracking/78_subsets.html",{loader:()=>r.e(77106).then(r.bind(r,15343)),meta:{date:17070912e5,category:["backtracking"],tag:["medium","array","backtracking","bit manipulation"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given an integer array <code>nums</code> of <strong>unique</strong> elements, return <em>all possible subsets (the power set)</em>.</p>\n<p>The solution set <strong>must not</strong> contain duplicate subsets. Return the solution in <strong>any order</strong>.</p>\n<p><strong>Example 1</strong><br>\nInput: nums = [1, 2, 3]<br>\nOutput: [[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]]</p>",readingTime:{minutes:1.15,words:345},title:"78, Subsets",icon:"discover",order:8,type:"article"}}],["/algorithm/leetcode/backtracking/90_subsets_ii.html",{loader:()=>r.e(95593).then(r.bind(r,50597)),meta:{date:17071776e5,category:["backtracking"],tag:["medium","array","backtracking","bit manipulation"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given an integer array <code>nums</code> that may contain duplicates, return <em>all possible subsets (the power set)</em>.</p>\n<p>The solution set <strong>must not</strong> contain duplicate subsets. Return the solution in <strong>any order</strong>.</p>\n<p><strong>Example 1</strong><br>\nInput: nums = [1, 2, 2]<br>\nOutput: [[], [1], [1, 2], [1, 2, 2], [2], [2, 2]]</p>",readingTime:{minutes:1.32,words:395},title:"90, Subsets II",icon:"discover",order:9,type:"article"}}],["/algorithm/leetcode/backtracking/93_restore_ip_addresses.html",{loader:()=>r.e(42225).then(r.bind(r,79269)),meta:{date:17070048e5,category:["backtracking"],tag:["medium","string","backtracking"],sticky:!0,excerpt:'<h2>I Problem</h2>\n<p>A <strong>valid IP address</strong> consists of exactly four integers separated by single dots. Each integer is between <code>0</code> and <code>255</code> (<strong>inclusive</strong>) and cannot have leading zeros.</p>\n<ul>\n<li>For example, <code>"0.1.2.201"</code> and <code>"192.168.1.1"</code> are <strong>valid</strong> IP addresses, but <code>"0.011.255.245"</code>, <code>"192.168.1.312"</code> and <code>"192.168@1.1"</code> are <strong>invalid</strong> IP addresses.</li>\n</ul>',readingTime:{minutes:1.18,words:353},title:"93, Restore IP Addresses",icon:"discover",order:7,type:"article"}}],["/algorithm/leetcode/backtracking/",{loader:()=>r.e(46997).then(r.bind(r,77218)),meta:{date:17061408e5,category:["leetcode"],tag:["backtracking"],sticky:!1,excerpt:"<h2>Backtracking</h2>\n<p><strong>Backtracking</strong> is an algorithmic technique for solving problems recursively by trying to build a solution incrementally, one piece at a time, removing those solutions that fail to satisfy the constraints of the problem at any point of time (by time, here, is referred to the time elapsed till reaching any level of the search tree).</p>",readingTime:{minutes:.73,words:220},title:"Backtracking",icon:"discover",order:8,type:"article"}}],["/algorithm/leetcode/graph/",{loader:()=>r.e(51125).then(r.bind(r,53779)),meta:{date:16957728e5,category:["leetcode"],tag:["graph"],sticky:!0,readingTime:{minutes:.06,words:17},title:"Graph",icon:"discover",order:12,type:"article"}}],["/algorithm/leetcode/binary_tree/100_same_tree.html",{loader:()=>r.e(36564).then(r.bind(r,91916)),meta:{date:17058816e5,category:["binary tree"],tag:["easy","binary tree","depth first search","breadth first search"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given the roots of two binary trees <code>p</code> and <code>q</code>, write a function to check if they are the same or not.</p>\n<p>Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.</p>\n<p><strong>Example 1</strong><br>\n<br>\nInput: p = [1, 2, 3], q = [1, 2, 3]<br>\nOutput: true</p>",readingTime:{minutes:2.15,words:644},title:"100, Same Tree",icon:"discover",order:39,type:"article"}}],["/algorithm/leetcode/binary_tree/101_symmetric_tree.html",{loader:()=>r.e(14638).then(r.bind(r,10792)),meta:{date:17030304e5,category:["binary tree"],tag:["easy","binary tree","depth first search","breadth first search"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given the <code>root</code> of a binary tree, <em>check whether it is a mirror of itself</em> (i.e.,symmetric around its center).</p>\n<p><strong>Example 1</strong><br>\n<br>\nInput: root = [1, 2, 2, 3, 4, 4, 3]<br>\nOutput: true</p>\n<p><strong>Example 2</strong><br>\n<br>\nInput: root = [1, 2, 2, null, 3, null, 3]<br>\nOutput: false</p>",readingTime:{minutes:2.14,words:642},title:"101, Symmetric Tree",icon:"discover",order:12,type:"article"}}],["/algorithm/leetcode/binary_tree/102_binary_tree_level_order_traversal.html",{loader:()=>r.e(79096).then(r.bind(r,61827)),meta:{date:17022528e5,category:["binary tree"],tag:["medium","queue","binary tree","breadth first search"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given the <code>root</code> of a binary tree, return <em>the level order traversal of its nodes' values</em>. (i.e., from left to right, level by level).</p>\n<p><strong>Example 1</strong><br>\n<br>\nInput: [3, 9, 20, null, null, 15, 7]<br>\nOutput: [[3], [9, 20], [15, 7]]</p>\n<p><strong>Example 2</strong><br>\nInput: root = [1]<br>\nOutput: [[1]]</p>",readingTime:{minutes:2.16,words:648},title:"102, Binary Tree Level Order Traversal",icon:"discover",order:4,type:"article"}}],["/algorithm/leetcode/binary_tree/104_maximum_depth_of_binary_tree.html",{loader:()=>r.e(45890).then(r.bind(r,79062)),meta:{date:17031168e5,category:["binary tree"],tag:["easy","binary tree","depth first search","breadth first search"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given the <code>root</code> of a binary tree, return <em>its maximum depth</em>.</p>\n<p>A binary tree's <strong>maximum depth</strong> is the number of nodes along the longest path from the root node down to the farthest leaf node.</p>\n<p><strong>Example 1</strong><br>\n<br>\nInput: root = [3, 9, 20, null, null, 15, 7]<br>\nOutput: 3</p>",readingTime:{minutes:1.74,words:522},title:"104, Maximum Depth of Binary Tree",icon:"discover",order:13,type:"article"}}],["/algorithm/leetcode/binary_tree/105_construct_binary_tree_from_preorder_and_inorder_traversal.html",{loader:()=>r.e(18824).then(r.bind(r,90614)),meta:{date:17041536e5,category:["binary tree"],tag:["medium","array","hash table","divide and conquer","binary tree"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given two integer arrays <code>preorder</code> and <code>inorder</code> where <code>preorder</code> is the preorder traversal of a binary tree and <code>inorder</code> is the inorder traversal of the same tree, construct and return <em>the binary tree</em>.</p>\n<p><strong>Example 1</strong><br>\n<br>\nInput: preorder = [3, 9, 20, 15, 7], inorder = [9, 3, 15, 20, 7]<br>\nOutput: [3, 9, 20, null, null, 15, 7]</p>",readingTime:{minutes:3.24,words:972},title:"105, Construct Binary Tree from Pre-order and In-order Traversal",icon:"discover",order:23,type:"article"}}],["/algorithm/leetcode/binary_tree/106_construct_binary_tree_from_post_order_and_in_order_traversal.html",{loader:()=>r.e(13682).then(r.bind(r,80176)),meta:{date:170424e7,category:["binary tree"],tag:["medium","array","hash table","divide and conquer","binary tree"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given two integer arrays <code>inorder</code> and <code>postorder</code> where <code>inorder</code> is the inorder traversal of a binary tree and <code>postorder</code> is the postorder traversal of the same tree, construct and return <em>the binary tree</em>.</p>\n<p><strong>Example 1</strong><br>\n<br>\nInput: inorder = [9, 3, 15, 20, 7], postorder = [9, 15, 7, 20, 3]<br>\nOutput: [3, 9, 20, null, null, 15, 7]</p>",readingTime:{minutes:3.24,words:973},title:"106, Construct Binary Tree from Post-order and In-order Traversal",icon:"discover",order:24,type:"article"}}],["/algorithm/leetcode/binary_tree/107_binary_tree_level_order_traversal_ii.html",{loader:()=>r.e(81960).then(r.bind(r,6058)),meta:{date:17023392e5,category:["binary tree"],tag:["medium","queue","binary tree","breadth first search"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given the <code>root</code> of a binary tree, return <em>the bottom-up level order traversal of its nodes' values</em>. (i.e., from left to right, level by level from leaf to root).</p>\n<p><strong>Example 1</strong><br>\n<br>\nInput: root = [3, 9, 20, null, null, 15, 7]<br>\nOutput: [[15, 7], [9, 20], [3]]</p>",readingTime:{minutes:2.18,words:654},title:"107, Binary Tree Level Order Traversal II",icon:"discover",order:5,type:"article"}}],["/algorithm/leetcode/binary_tree/108_convert_sorted_array_to_binary_search_tree.html",{loader:()=>r.e(17574).then(r.bind(r,90377)),meta:{date:17056224e5,category:["binary tree"],tag:["easy","tree","binary tree","binary search tree","array","divide and conquer"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given an integer array <code>nums</code> where the elements are sorted in <strong>ascending order</strong>, convert <em>it to a <strong>height-balanced</strong> binary search tree</em>.</p>\n<p><strong>Example 1</strong><br>\n<br>\nInput: nums = [-10, -3, 0, 5, 9]<br>\nOutput: [0, -3, 9, -10, null, 5]<br>\nExplanation: [0, -10, 5, null, -3, null, 9] is also accepted:<br>\n</p>",readingTime:{minutes:3.08,words:924},title:"108, Convert Sorted Array to Binary Search Tree",icon:"discover",order:37,type:"article"}}],["/algorithm/leetcode/binary_tree/109_convert_sorted_list_to_binary_search_tree.html",{loader:()=>r.e(47888).then(r.bind(r,9358)),meta:{date:17057088e5,category:["binary tree"],tag:["medium","linked list","binary tree","binary search tree","divide and conquer"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given the <code>head</code> of a singly linked list where elements are sorted in <strong>ascending order</strong>, convert <em>it to a <strong>height-balanced</strong> binary search tree</em>.</p>\n<p><strong>Example 1</strong><br>\n<br>\nInput: head = [-10, -3, 0, 5, 9]<br>\nOutput: [0, -3, 9, -10, null, 5]<br>\nExplanation: One possible answer is [0, -3, 9, -10, null, 5], which represents the shown height balanced BST.</p>",readingTime:{minutes:2.43,words:729},title:"109, Convert Sorted List to Binary Search Tree",icon:"discover",order:38,type:"article"}}],["/algorithm/leetcode/binary_tree/110_balanced_binary_tree.html",{loader:()=>r.e(86105).then(r.bind(r,64913)),meta:{date:17034624e5,category:["binary tree"],tag:["easy","binary tree","depth first search"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given a binary tree, determine if it is <strong>height-balanced</strong>.</p>\n<p><strong>Example 1</strong><br>\n<br>\nInput: root = [3, 9, 20, null, null, 15, 7]<br>\nOutput: true</p>\n<p><strong>Example 2</strong><br>\n<br>\nInput: root = [1, 2, 2, 3, 3, null, null, 4, 4]<br>\nOutput: false</p>",readingTime:{minutes:1.69,words:506},title:"110, Balanced Binary Tree",icon:"discover",order:16,type:"article"}}],["/algorithm/leetcode/binary_tree/111_minimum_depth_of_binary_tree.html",{loader:()=>r.e(80410).then(r.bind(r,16033)),meta:{date:17032032e5,category:["binary tree"],tag:["easy","binary tree","depth first search","breadth first search"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given a binary tree, find its minimum depth.</p>\n<p>The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.</p>\n<p><strong>Note</strong>: A leaf is a node with no children.</p>\n<p><strong>Example 1</strong><br>\n<br>\nInput: root = [3, 9, 20, null, null, 15, 7]<br>\nOutput: 2</p>",readingTime:{minutes:3.33,words:998},title:"111, Minimum Depth of Binary Tree",icon:"discover",order:14,type:"article"}}],["/algorithm/leetcode/binary_tree/112_path_sum.html",{loader:()=>r.e(48829).then(r.bind(r,48912)),meta:{date:1703808e6,category:["binary tree"],tag:["easy","binary tree","depth first search","breadth first search"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given the <code>root</code> of a binary tree and an integer <code>target_sum</code>, return <code>true</code> if the tree has a root-to-leaf path such that adding up all the values along the path equals <code>target_sum</code>.</p>\n<p>A <strong>leaf</strong> is a node with no children.</p>",readingTime:{minutes:4.7,words:1411},title:"112, Path Sum",icon:"discover",order:20,type:"article"}}],["/algorithm/leetcode/binary_tree/113_path_sum_ii.html",{loader:()=>r.e(57293).then(r.bind(r,63036)),meta:{date:17038944e5,category:["binary tree"],tag:["medium","backtracking","binary tree","depth first search","breadth first search"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given the <code>root</code> of a binary tree and an integer <code>target_sum</code>, return <em>all <strong>root-to-leaf</strong> paths where the sum of the node values in the path equals</em> <code>target_sum</code>. <em>Each path should be returned as a list of the node <strong>values</strong>, not node references</em>.</p>",readingTime:{minutes:3.71,words:1113},title:"113, Path Sum II",icon:"discover",order:21,type:"article"}}],["/algorithm/leetcode/binary_tree/116_populating_next_right_pointers_in_each_node.html",{loader:()=>r.e(90040).then(r.bind(r,84438)),meta:{date:17027712e5,category:["binary tree"],tag:["medium","binary tree","linked list","depth first search","breadth first search"],sticky:!0,excerpt:'<h2>I Problem</h2>\n<p>You are given a <strong>perfect binary tree</strong> where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:</p>\n<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> Node {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> val;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    Node </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">left;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    Node </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">right;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    Node </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">next;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:5.47,words:1642},title:"116, Populating Next Right Pointers in Each Node",icon:"discover",order:10,type:"article"}}],["/algorithm/leetcode/binary_tree/117_populating_next_right_pointers_in_each_node_ii.html",{loader:()=>r.e(68828).then(r.bind(r,91596)),meta:{date:17028576e5,category:["binary tree"],tag:["medium","binary tree","linked list","depth first search","breadth first search"],sticky:!0,excerpt:'<h2>I Problem</h2>\n<p>Given a binary tree</p>\n<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> Node {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> val;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    Node </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">left;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    Node </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">right;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    Node </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">next;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:7.01,words:2104},title:"117, Populating Next Right Pointers in Each Node II",icon:"discover",order:11,type:"article"}}],["/algorithm/leetcode/binary_tree/144_binary_tree_pre_order_traversal.html",{loader:()=>r.e(11321).then(r.bind(r,83805)),meta:{date:17019072e5,category:["binary tree"],tag:["easy","stack","binary tree","depth first search"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given the <code>root</code> of a binary tree, return <em>the preorder traversal of its nodes' values</em>.</p>\n<p><strong>Example 1</strong><br>\n<br>\nInput: root = [1, null, 2, 3]<br>\nOutput: [1, 2, 3]</p>\n<p><strong>Example 2</strong><br>\nInput: root = []<br>\nOutput: []</p>\n<p><strong>Example 3</strong><br>\nInput: root = [1]<br>\nOutput: [1]</p>",readingTime:{minutes:2.36,words:707},title:"144, Binary Tree Pre-order Traversal",icon:"discover",order:1,type:"article"}}],["/algorithm/leetcode/binary_tree/145_binary_tree_post_order_traversal.html",{loader:()=>r.e(5689).then(r.bind(r,41503)),meta:{date:17021664e5,category:["binary tree"],tag:["easy","stack","binary tree","depth first search"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given the <code>root</code> of a binary tree, return <em>the postorder traversal of its nodes' values</em>.</p>\n<p><strong>Example 1</strong><br>\n<br>\nInput: root = [1, null, 2, 3]<br>\nOutput: [3, 2, 1]<br>\nExplanation:</p>\n<p><strong>Example 2</strong><br>\nInput: root = []<br>\nOutput: []</p>",readingTime:{minutes:2.56,words:768},title:"145, Binary Tree Post-order Traversal",icon:"discover",order:3,type:"article"}}],["/algorithm/leetcode/binary_tree/199_binary_tree_right_side_view.html",{loader:()=>r.e(90256).then(r.bind(r,44982)),meta:{date:17024256e5,category:["binary tree"],tag:["medium","binary tree","depth first search","breadth first search"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given the <code>root</code> of a binary tree, imagine yourself standing on the <strong>right side</strong> of it, return <em>the values of the nodes you can see ordered from top to bottom</em>.</p>\n<p><strong>Example 1</strong><br>\n<br>\nInput: root = [1, 2, 3, null, 5, null, 4]<br>\nOutput: [1, 3, 4]</p>",readingTime:{minutes:4.03,words:1209},title:"199, Binary Tree Right Side View",icon:"discover",order:6,type:"article"}}],["/algorithm/leetcode/binary_tree/222_count_complete_tree_nodes.html",{loader:()=>r.e(61908).then(r.bind(r,84582)),meta:{date:17032896e5,category:["binary tree"],tag:["easy","binary tree","bit manipulation"],sticky:!0,excerpt:'<h2>I Problem</h2>\n<p>Given the <code>root</code> of a <strong>complete</strong> binary tree, return the number of the nodes in the tree.</p>\n<p>According to <a href="http://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees" target="_blank" rel="noopener noreferrer">Wikipedia</a>, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between <code>1</code> and <code>2ʰ</code> nodes inclusive at the last level <code>h</code>.</p>',readingTime:{minutes:2.51,words:753},title:"222, Count Complete Tree Nodes",icon:"discover",order:15,type:"article"}}],["/algorithm/leetcode/binary_tree/226_invert_binary_tree.html",{loader:()=>r.e(52541).then(r.bind(r,69446)),meta:{date:17039808e5,category:["binary tree"],tag:["easy","binary tree","depth first search","breadth first search"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given the <code>root</code> of a binary tree, invert the tree, and return <em>its root</em>.</p>\n<p><strong>Example 1</strong><br>\n<br>\nInput: root = [4, 2, 7, 1, 3, 6, 9]<br>\nOutput: [4, 7, 2, 9, 6, 3, 1]</p>\n<p><strong>Example 2</strong><br>\n<br>\nInput: root = [2, 1, 3]<br>\nOutput: [2, 3, 1]</p>",readingTime:{minutes:1.76,words:527},title:"226, Invert Binary Tree",icon:"discover",order:22,type:"article"}}],["/algorithm/leetcode/binary_tree/235_lowest_common_ancestor_of_a_binary_search_tree.html",{loader:()=>r.e(72216).then(r.bind(r,29117)),meta:{date:17051904e5,category:["binary tree"],tag:["medium","tree","binary tree","binary search tree","depth first search"],sticky:!0,excerpt:'<h2>I Problem</h2>\n<p>Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.</p>\n<p>According to the <a href="https://en.wikipedia.org/wiki/Lowest_common_ancestor" target="_blank" rel="noopener noreferrer">definition of LCA on Wikipedia</a>: "The lowest common ancestor is defined between two nodes <code>p</code> and <code>q</code> as the lowest node in <code>T</code> that has both <code>p</code> and <code>q</code> as descendants (where we allow <strong>a node to be a descendant of itself</strong>)."</p>',readingTime:{minutes:3.69,words:1108},title:"235, Lowest Common Ancestor of a Binary Search Tree",icon:"discover",order:33,type:"article"}}],["/algorithm/leetcode/binary_tree/236_lowest_common_ancestor_of_a_binary_tree.html",{loader:()=>r.e(81248).then(r.bind(r,54975)),meta:{date:17050176e5,category:["binary tree"],tag:["medium","binary tree","depth first search"],sticky:!0,excerpt:'<h2>I Problem</h2>\n<p>Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.</p>\n<p>According to the <a href="https://en.wikipedia.org/wiki/Lowest_common_ancestor" target="_blank" rel="noopener noreferrer">definition of LCA on Wikipedia</a>: "The lowest common ancestor is defined between two nodes <code>p</code> and <code>q</code> as the lowest node in <code>T</code> that has both <code>p</code> and <code>q</code> as descendants (where we allow <strong>a node to be a descendant of itself</strong>)."</p>',readingTime:{minutes:2.35,words:706},title:"236, Lowest Common Ancestor of a Binary Tree",icon:"discover",order:32,type:"article"}}],["/algorithm/leetcode/binary_tree/257_binary_tree_paths.html",{loader:()=>r.e(6171).then(r.bind(r,36626)),meta:{date:17035488e5,category:["binary tree"],tag:["easy","string","backtracking","depth first search","binary tree"],sticky:!0,excerpt:'<h2>I Problem</h2>\n<p>Given the <code>root</code> of a binary tree, return <em>all root-to-leaf paths in <strong>any order</strong></em>.</p>\n<p>A <strong>leaf</strong> is a node with no children.</p>\n<p><strong>Example 1</strong><br>\n<br>\nInput: root = [1, 2, 3, null, 5]<br>\nOutput: ["1-&gt;2-&gt;5", "1-&gt;3"]</p>',readingTime:{minutes:2.78,words:833},title:"257, Binary Tree Paths",icon:"discover",order:17,type:"article"}}],["/algorithm/leetcode/binary_tree/404_sum_of_left_leaves.html",{loader:()=>r.e(90930).then(r.bind(r,2228)),meta:{date:17036352e5,category:["binary tree"],tag:["easy","binary tree","depth first search","breadth first search"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given the <code>root</code> of a binary tree, return <em>the sum of all left leaves</em>.</p>\n<p>A <strong>leaf</strong> is a node with no children. A <strong>left leaf</strong> is a leaf that is the left child of another node.</p>\n<p><strong>Example 1</strong><br>\n<br>\nInput: root = [3, 9, 20, null, null, 15, 7]<br>\nOutput: 24<br>\nExplanation: There are two left leaves in the binary tree, with values 9 and 15 respectively.</p>",readingTime:{minutes:2.57,words:770},title:"404, Sum of Left Leaves",icon:"discover",order:18,type:"article"}}],["/algorithm/leetcode/binary_tree/429_n_ary_tree_level_order_traversal.html",{loader:()=>r.e(57042).then(r.bind(r,7346)),meta:{date:17025984e5,category:["binary tree"],tag:["medium","tree","depth first search","breadth first search"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given an n-ary tree, return the <em>level order</em> traversal of its nodes' values.</p>\n<p>Nary-Tree <em>input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples)</em>.</p>\n<p><strong>Example 1</strong><br>\n<br>\nInput: root = [1, null, 3, 2, 4, null, 5, 6]<br>\nOutput: [[1], [3, 2, 4], [5, 6]]</p>",readingTime:{minutes:4.76,words:1428},title:"429, N-ary Tree Level Order Traversal",icon:"discover",order:8,type:"article"}}],["/algorithm/leetcode/binary_tree/450_delete_node_in_a_bst.html",{loader:()=>r.e(49589).then(r.bind(r,75082)),meta:{date:17054496e5,category:["binary tree"],tag:["medium","binary tree","binary search tree"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return <em>the <strong>root node reference</strong> (possibly updated) of the BST</em>.</p>\n<p>Basically, the deletion can be divided into two stages:</p>\n<ol>\n<li>Search for a node to remove.</li>\n<li>If the node is found, delete the node.</li>\n</ol>",readingTime:{minutes:2.68,words:805},title:"450, Delete Node in a BST",icon:"discover",order:35,type:"article"}}],["/algorithm/leetcode/binary_tree/501_find_mode_in_binary_search_tree.html",{loader:()=>r.e(15111).then(r.bind(r,79896)),meta:{date:17048448e5,category:["binary tree"],tag:["easy","binary tree","depth first search","binary search tree"],sticky:!0,excerpt:'<h2>I Problem</h2>\n<p>Given the <code>root</code> of a binary search tree (BST) with duplicates, return <em>all the <a href="https://en.wikipedia.org/wiki/Mode_(statistics)" target="_blank" rel="noopener noreferrer">mode(s)</a> (i.e., the most frequently occurred element) in it</em>.</p>\n<p>If the tree has more than one mode, return them in <strong>any order</strong>.</p>',readingTime:{minutes:5.44,words:1633},title:"501, Find Mode in Binary Search Tree",icon:"discover",order:30,type:"article"}}],["/algorithm/leetcode/binary_tree/513_find_bottom_left_tree_value.html",{loader:()=>r.e(45919).then(r.bind(r,98305)),meta:{date:17037216e5,category:["binary tree"],tag:["medium","binary tree","depth first search","breadth first search"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given the <code>root</code> of a binary tree, return the leftmost value in the last row of the tree.</p>\n<p><strong>Example 1</strong><br>\n<br>\nInput: root = [2, 1, 3]<br>\nOutput: 1</p>\n<p><strong>Example 2</strong><br>\n<br>\nInput: root = [1, 2, 3, 4, null, 5, 6, null, null, 7]<br>\nOutput: 7</p>",readingTime:{minutes:2.76,words:827},title:"513, Find Bottom Left Tree Value",icon:"discover",order:19,type:"article"}}],["/algorithm/leetcode/binary_tree/515_find_largest_value_in_each_tree_row.html",{loader:()=>r.e(92707).then(r.bind(r,90248)),meta:{date:17026848e5,category:["binary tree"],tag:["medium","binary tree","depth first search","breadth first search"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given the <code>root</code> of a binary tree, return <em>an array of the largest value in each row</em> of the tree (0-indexed).</p>\n<p><strong>Example 1</strong><br>\n<br>\nInput: root = [1, 3, 2, 5, 3, null, 9]<br>\nOutput: [1, 3, 9]</p>\n<p><strong>Example 2</strong><br>\nInput: root = [1, 2, 3]<br>\nOutput: [1, 3]</p>",readingTime:{minutes:3.28,words:985},title:"515, Find Largest Value in Each Tree Row",icon:"discover",order:9,type:"article"}}],["/algorithm/leetcode/binary_tree/530_minimum_absolute_difference_in_bst.html",{loader:()=>r.e(81640).then(r.bind(r,4727)),meta:{date:17047584e5,category:["binary tree"],tag:["easy","binary tree","binary search tree","depth first search","breadth first search"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given the <code>root</code> of a Binary Search Tree (BST), return <em>the minimum absolute difference between the values of any two different nodes in the tree</em>.</p>\n<p><strong>Example 1</strong><br>\n<br>\nInput: root = [4, 2, 6, 1, 3]<br>\nOutput: 1</p>\n<p><strong>Example 2</strong><br>\n<br>\nInput: root = [1, 0, 48, null, null, 12, 49]<br>\nOutput: 1</p>",readingTime:{minutes:1.77,words:531},title:"530, Minimum Absolute Difference in BST",icon:"discover",order:29,type:"article"}}],["/algorithm/leetcode/binary_tree/538_convert_bst_to_greater_tree.html",{loader:()=>r.e(33043).then(r.bind(r,87259)),meta:{date:17049312e5,category:["binary tree"],tag:["medium","binary tree","depth first search","binary search tree"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given the <code>root</code> of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST.</p>\n<p>As a reminder, a <em>binary search tree</em> is a tree that satisfies these constraints:</p>",readingTime:{minutes:2.82,words:845},title:"538, Convert BST to Greater Tree",icon:"discover",order:31,type:"article"}}],["/algorithm/leetcode/binary_tree/559_maximum_depth_of_n_ary_tree.html",{loader:()=>r.e(47840).then(r.bind(r,18783)),meta:{date:17061408e5,category:["binary tree"],tag:["easy","tree","depth first search","breadth first search"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given a n-ary tree, find its maximum depth.</p>\n<p>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p>\n<p><em>Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples)</em>.</p>",readingTime:{minutes:2.58,words:773},title:"559, Maximum Depth of N-ary Tree",icon:"discover",order:41,type:"article"}}],["/algorithm/leetcode/binary_tree/572_subtree_of_another_tree.html",{loader:()=>r.e(83673).then(r.bind(r,80306)),meta:{date:1705968e6,category:["binary tree"],tag:["easy","binary tree","depth first search","string matching","hash function"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given the roots of two binary trees <code>root</code> and <code>subRoot</code>, return <code>true</code> if there is a subtree of <code>root</code> with the same structure and node values of <code>subRoot</code> and <code>false</code> otherwise.</p>\n<p>A subtree of a binary <code>tree</code> tree is a tree that consists of a node in <code>tree</code> and all of this node's descendants. The tree <code>tree</code> could also be considered as a subtree of itself.</p>",readingTime:{minutes:3.36,words:1007},title:"572, Subtree of Another Tree",icon:"discover",order:40,type:"article"}}],["/algorithm/leetcode/binary_tree/617_merge_two_binary_trees.html",{loader:()=>r.e(34217).then(r.bind(r,64987)),meta:{date:17044128e5,category:["binary tree"],tag:["easy","binary tree","depth first search","breadth first search"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>You are given two binary trees <code>root1</code> and <code>root2</code>.</p>\n<p>Imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. You need to merge the two trees into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of the new tree.</p>",readingTime:{minutes:4.77,words:1430},title:"617, Merge Two Binary Trees",icon:"discover",order:26,type:"article"}}],["/algorithm/leetcode/binary_tree/637_average_of_levels_in_binary_tree.html",{loader:()=>r.e(32110).then(r.bind(r,38997)),meta:{date:1702512e6,category:["binary tree"],tag:["easy","binary tree","depth first search","breadth first search"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given the <code>root</code> of a binary tree, return <em>the average value of the nodes on each level in the form of an array</em>. Answers within <code>10⁻⁵</code> of the actual answer will be accepted.</p>\n<p><strong>Example 1</strong><br>\n<br>\nInput: root = [3, 9, 20, null, null, 15, 7]<br>\nOutput: [3.00000, 14.50000, 11.00000]<br>\nExplanation: The average value of nodes on level 0 is 3, on level 1 is 14.5, and on level 2 is 11. Hence return [3, 14.5, 11].</p>",readingTime:{minutes:3.41,words:1022},title:"637, Average of Levels in Binary Tree",icon:"discover",order:7,type:"article"}}],["/algorithm/leetcode/binary_tree/654_maximum_binary_tree.html",{loader:()=>r.e(10876).then(r.bind(r,19901)),meta:{date:17043264e5,category:["binary tree"],tag:["medium","array","binary tree","stack","divide and conquer","monotonic stack"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>You are given an integer array <code>nums</code> with no duplicates. A <strong>maximum binary tree</strong> can be built recursively from <code>nums</code> using the following algorithm:</p>\n<ol>\n<li>Create a root node whose value is the maximum value in <code>nums</code>.</li>\n<li>Recursively build the left subtree on the <strong>subarray prefix</strong> to the <strong>left</strong> of the maximum value.</li>\n<li>Recursively build the right subtree on the <strong>subarray suffix</strong> to the <strong>right</strong> of the maximum value.</li>\n</ol>",readingTime:{minutes:4.37,words:1310},title:"654, Maximum Binary Tree",icon:"discover",order:25,type:"article"}}],["/algorithm/leetcode/binary_tree/669_trim_a_binary_search_tree.html",{loader:()=>r.e(19749).then(r.bind(r,82007)),meta:{date:1705536e6,category:["binary tree"],tag:["medium","binary tree","binary search tree","depth first search"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given the <code>root</code> of a binary search tree and the lowest and highest boundaries as <code>low</code> and <code>high</code>, trim the tree so that all its elements lies in <code>[low, high]</code>. Trimming the tree should <strong>not</strong> change the relative structure of the elements that will remain in the tree (i.e., any node's descendant should remain a descendant). It can be proven that there is a <strong>unique answer</strong>.</p>",readingTime:{minutes:2.18,words:655},title:"669, Trim a Binary Search Tree",icon:"discover",order:36,type:"article"}}],["/algorithm/leetcode/binary_tree/700_search_in_a_binary_search_tree.html",{loader:()=>r.e(44177).then(r.bind(r,60668)),meta:{date:17045856e5,category:["binary tree"],tag:["easy","binary tree","binary search tree"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>You are given the <code>root</code> of a binary search tree (BST) and an integer <code>val</code>.</p>\n<p>Find the node in the BST that the node's value equals <code>val</code> and return the subtree rooted with that node. If such a node does not exist, return <code>null</code>.</p>",readingTime:{minutes:1.55,words:466},title:"700, Search in a Binary Search Tree",icon:"discover",order:27,type:"article"}}],["/algorithm/leetcode/binary_tree/701_insert_into_a_binary_search_tree.html",{loader:()=>r.e(35050).then(r.bind(r,34644)),meta:{date:17053632e5,category:["binary tree"],tag:["medium","binary tree","binary search tree"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>You are given the <code>root</code> node of a binary search tree (BST) and a <code>value</code> to insert into the tree. Return <em>the root node of the BST after the insertion</em>. It is <strong>guaranteed</strong> that the new value does not exist in the original BST.</p>\n<p><strong>Notice</strong> that there may exist multiple valid ways for the insertion, as long as the tree remains a BST after insertion. You can return <strong>any of them</strong>.</p>",readingTime:{minutes:3.01,words:902},title:"701, Insert into a Binary Search Tree",icon:"discover",order:34,type:"article"}}],["/algorithm/leetcode/binary_tree/94_binary_tree_in_order_traversal.html",{loader:()=>r.e(28483).then(r.bind(r,59867)),meta:{date:170208e7,category:["binary tree"],tag:["easy","stack","binary tree","depth first search"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given the <code>root</code> of a binary tree, return <em>the inorder traversal of its nodes' values</em>.</p>\n<p><strong>Example 1</strong><br>\n<br>\nInput: root = [1, null, 2, 3]<br>\nOutput: [1, 3, 2]</p>\n<p><strong>Example 2</strong><br>\nInput: root = []<br>\nOutput: []</p>\n<p><strong>Example 3</strong><br>\nInput: root = [1]<br>\nOutput: [1]</p>",readingTime:{minutes:2.03,words:608},title:"94, Binary Tree In-order Traversal",icon:"discover",order:2,type:"article"}}],["/algorithm/leetcode/binary_tree/98_validate_binary_search_tree.html",{loader:()=>r.e(25721).then(r.bind(r,83e3)),meta:{date:1704672e6,category:["binary tree"],tag:["medium","binary tree","depth first search","binary search tree"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given the <code>root</code> of a binary tree, <em>determine if it is a valid binary search tree (BST)</em>.</p>\n<p>A <strong>valid BST</strong> is defined as follows:</p>\n<ul>\n<li>The left subtree of a node contains only nodes with keys <strong>less than</strong> the node's key.</li>\n<li>The right subtree of a node contains only nodes with keys <strong>greater than</strong> the node's key.</li>\n<li>Both the left and right subtrees must also be binary search trees.</li>\n</ul>",readingTime:{minutes:3.32,words:997},title:"98, Validate Binary Search Tree",icon:"discover",order:28,type:"article"}}],["/algorithm/leetcode/binary_tree/",{loader:()=>r.e(93227).then(r.bind(r,10613)),meta:{date:17017344e5,category:["leetcode"],tag:["binary tree"],sticky:!1,excerpt:'<h2>Binary Tree</h2>\n<h3>Definition</h3>\n<p>In computer science, a <a href="https://en.wikipedia.org/wiki/Binary_tree" target="_blank" rel="noopener noreferrer"><strong>binary tree</strong></a> is a tree data structure in which each node has at most two children, referred to as the <code>left child</code> and the <code>right child</code>. That is, it is a <a href="https://en.wikipedia.org/wiki/M-ary_tree" target="_blank" rel="noopener noreferrer"><strong>k-ary tree</strong></a> with k = 2. A <em>recursive definition</em> using set theory is that a binary tree is a tuple (L, S, R), where L and R are binary trees or the empty set and S is a singleton set containing the root.<br>\n</p>',readingTime:{minutes:5.51,words:1653},title:"Binary Tree",icon:"discover",order:7,type:"article"}}],["/algorithm/leetcode/linkedlist/141_linked_list_cycle.html",{loader:()=>r.e(22518).then(r.bind(r,40990)),meta:{date:16982784e5,category:["linkedlist"],tag:["easy","hash table","linked list","two pointers"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given <code>head</code>, the head of a linked list, determine if the linked list has a cycle in it.</p>\n<p>There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the <code>next</code> pointer.<br>\nInternally, <code>pos</code> is used to denote the index of the node that tail's <code>next</code> pointer is connected to. <strong>Note that <code>pos</code> is not passed as a parameter.</strong></p>",readingTime:{minutes:1.54,words:463},title:"141, Linked List Cycle",icon:"discover",order:7,type:"article"}}],["/algorithm/leetcode/linkedlist/142_linked_list_cycle_II.html",{loader:()=>r.e(53804).then(r.bind(r,27795)),meta:{date:16983648e5,category:["linkedlist"],tag:["medium","hash table","linked list","two pointers"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given the <code>head</code> of a linked list, return <em>the node where the cycle begins. If there is no cycle, return <code>null</code></em>.</p>\n<p>There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the <code>next</code> pointer.<br>\nInternally, <code>pos</code> is used to denote the index of the node that tail's <code>next</code> pointer is connected to (<strong>0-indexed</strong>). It is <code>-1</code> if there is no cycle.<br>\n<strong>Note that <code>pos</code> is not passed as a parameter</strong>.</p>",readingTime:{minutes:1.65,words:494},title:"142, Linked List Cycle II",icon:"discover",order:8,type:"article"}}],["/algorithm/leetcode/linkedlist/160_intersection_of_two_linked_lists.html",{loader:()=>r.e(3822).then(r.bind(r,38163)),meta:{date:1698192e6,category:["linkedlist"],tag:["easy","hash table","linked list","two pointers"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null.</p>\n<p>For example, the following two linked lists begin to intersect at node c1:<br>\n<br>\nThe test cases are generated such that there are no cycles anywhere in the entire linked structure.</p>",readingTime:{minutes:3.02,words:907},title:"160, Intersection of Two Linked Lists",icon:"discover",order:6,type:"article"}}],["/algorithm/leetcode/linkedlist/19_remove_nth_node_from_end_of_list.html",{loader:()=>r.e(37765).then(r.bind(r,14208)),meta:{date:16981056e5,category:["linkedlist"],tag:["medium","linked list","two pointers"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given the <code>head</code> of a linked list, remove the <code>nᵗʰ</code> node from the end of the list and return its head.</p>\n<p><strong>Example 1</strong><br>\n<br>\nInput: head = [1, 2, 3, 4, 5], n = 2<br>\nOutput: [1, 2, 3, 5]</p>\n<p><strong>Example 2</strong><br>\nInput: head = [1], n = 1<br>\nOutput: []</p>",readingTime:{minutes:2.54,words:762},title:"19, Remove Nth Node From End of List",icon:"discover",order:5,type:"article"}}],["/algorithm/leetcode/linkedlist/203_remove_linked_list_elements.html",{loader:()=>r.e(52129).then(r.bind(r,51057)),meta:{date:169776e7,category:["linkedlist"],tag:["easy","linked list","recursion"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head.</p>\n<p><strong>Example 1</strong><br>\n<br>\nInput: head = [1, 2, 6, 3, 4, 5, 6], val = 6<br>\nOutput: [1, 2, 3, 4, 5]</p>\n<p><strong>Example 2</strong><br>\nInput: head = [], val = 1<br>\nOutput: []</p>",readingTime:{minutes:1.15,words:344},title:"203, Remove Linked List Elements",icon:"discover",order:1,type:"article"}}],["/algorithm/leetcode/linkedlist/206_reverse_linked_list.html",{loader:()=>r.e(38782).then(r.bind(r,64347)),meta:{date:16979328e5,category:["linkedlist"],tag:["easy","linked list","recursion"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given the head of a singly linked list, reverse the list, and return the reversed list.</p>\n<p><strong>Example 1</strong><br>\n<br>\nInput: head = [1, 2, 3, 4, 5]<br>\nOutput: [5, 4, 3, 2, 1]</p>\n<p><strong>Example 2</strong><br>\n<br>\nInput: head = [1, 2]<br>\nOutput: [2, 1]</p>\n<p><strong>Example 3</strong><br>\nInput: head = []<br>\nOutput: []</p>",readingTime:{minutes:1.08,words:323},title:"206, Reverse Linked List",icon:"discover",order:3,type:"article"}}],["/algorithm/leetcode/linkedlist/24_swap_nodes_in_pairs.html",{loader:()=>r.e(16802).then(r.bind(r,29649)),meta:{date:16980192e5,category:["linkedlist"],tag:["medium","linked list","recursion"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)</p>\n<p><strong>Example 1</strong><br>\n<br>\nInput: head = [1, 2, 3, 4]<br>\nOutput: [2, 1, 4, 3]</p>",readingTime:{minutes:1.21,words:364},title:"24, Swap Nodes in Pairs",icon:"discover",order:4,type:"article"}}],["/algorithm/leetcode/linkedlist/707_design_linked_list.html",{loader:()=>r.e(85274).then(r.bind(r,32064)),meta:{date:16978464e5,category:["linkedlist"],tag:["medium","linked list","design"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Design your implementation of the linked list. You can choose to use a singly or doubly linked list.</p>\n<p>A node in a singly linked list should have two attributes: <code>val</code> and <code>next</code>. <code>val</code> is the value of the current node, and <code>next</code> is a pointer reference to the next node. If you want to use the doubly linked list, you will need one more attribute <code>prev</code> to indicate the previous node in the linked list. Assume all nodes in the linked list are 0-indexed.</p>",readingTime:{minutes:6.1,words:1831},title:"707, Design Linked List",icon:"discover",order:2,type:"article"}}],["/algorithm/leetcode/linkedlist/",{loader:()=>r.e(68754).then(r.bind(r,98798)),meta:{date:169776e7,category:["leetcode"],tag:["linkedlist"],sticky:!1,excerpt:"<h2>About Linked List</h2>\n<p>Linked list is a linear structure linked together by a series of pointers, with each node consisting of two parts, a data field and a pointer field.<br>\n</p>\n<h3>Type of Linked List</h3>\n<ul>\n<li>singly linked list<br>\n</li>\n<li>doubly linked list<br>\n</li>\n<li>circular singly linked list<br>\n</li>\n<li>circular doubly linked list<br>\n</li>\n</ul>",readingTime:{minutes:.75,words:224},title:"LinkedList",icon:"discover",order:2,type:"article"}}],["/algorithm/leetcode/hashtable/15_three_sum.html",{loader:()=>r.e(45856).then(r.bind(r,62759)),meta:{date:16996608e5,category:["hashtable"],tag:["medium","array","two pointers","sorting"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given an integer array <code>nums</code>, return all the triplets <code>[nums[i], nums[j], nums[k]]</code> such that <code>i != j, i != k, and j != k</code>, and <code>nums[i] + nums[j] + nums[k] == 0</code>.</p>\n<p>Notice that the solution set must not contain duplicate triplets.</p>",readingTime:{minutes:2.01,words:602},title:"15, Three Sum",icon:"discover",order:9,type:"article"}}],["/algorithm/leetcode/hashtable/16_three_sum_closest.html",{loader:()=>r.e(6105).then(r.bind(r,21260)),meta:{date:16997472e5,category:["hashtable"],tag:["medium","array","two pointers","sorting"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given an integer array <code>nums</code> of length <code>n</code> and an integer <code>target</code>, find three integers in <code>nums</code> such that the sum is closest to <code>target</code>.</p>\n<p>Return <em>the sum of the three integers.</em></p>\n<p>You may assume that each input would have exactly one solution.</p>",readingTime:{minutes:1.94,words:582},title:"16, Three Sum Closest",icon:"discover",order:10,type:"article"}}],["/algorithm/leetcode/hashtable/18_four_sum.html",{loader:()=>r.e(44083).then(r.bind(r,47378)),meta:{date:16998336e5,category:["hashtable"],tag:["medium","array","two pointers","sorting"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given an array <code>nums</code> of <code>n</code> integers, return <em>an array of all the <strong>unique</strong> quadruplets</em> <code>[nums[a], nums[b], nums[c], nums[d]]</code> such that:</p>\n<ul>\n<li><code>0 &lt;= a, b, c, d &lt; n</code></li>\n<li><code>a</code>, <code>b</code>, <code>c</code>, and <code>d</code> are <strong>distinct</strong>.</li>\n<li><code>nums[a] + nums[b] + nums[c] + nums[d] == target</code></li>\n</ul>",readingTime:{minutes:2.52,words:755},title:"18, Four Sum",icon:"discover",order:11,type:"article"}}],["/algorithm/leetcode/hashtable/1_two_sum.html",{loader:()=>r.e(14511).then(r.bind(r,67069)),meta:{date:16995744e5,category:["hashtable"],tag:["easy","array","hash table"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given an array of integers <code>nums</code> and an integer <code>target</code>, return indices of the two numbers such that they add up to <code>target</code>.</p>\n<p>You may assume that each input would have <strong>exactly one solution</strong>, and you may not use the same element twice.</p>",readingTime:{minutes:1.28,words:383},title:"1, Two Sum",icon:"discover",order:8,type:"article"}}],["/algorithm/leetcode/hashtable/202_happy_number.html",{loader:()=>r.e(52594).then(r.bind(r,30851)),meta:{date:16995744e5,category:["hashtable"],tag:["easy","hash table","math","two pointers"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Write an algorithm to determine if a number <code>n</code> is happy.</p>\n<p>A <strong>happy number</strong> is a number defined by the following process:</p>\n<ul>\n<li>Starting with any positive integer, replace the number by the sum of the squares of its digits.</li>\n<li>Repeat the process until the number equals <code>1</code>(where it will stay), or it <strong>loops endlessly in a cycle</strong> which does not include <code>1</code>.</li>\n<li>Those numbers for which this process <strong>ends in 1</strong> are happy.</li>\n</ul>",readingTime:{minutes:1.14,words:341},title:"202, Happy Number",icon:"discover",order:7,type:"article"}}],["/algorithm/leetcode/hashtable/242_valid_anagram.html",{loader:()=>r.e(99870).then(r.bind(r,78013)),meta:{date:1698624e6,category:["hashtable"],tag:["easy","hash table","string","sorting"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given two strings <code>s</code> and <code>t</code>, return <code>true</code> if <code>t</code> is an anagram of <code>s</code>, and <code>false</code> otherwise.</p>\n<p>An <strong>Anagram</strong> is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p>",readingTime:{minutes:1.18,words:353},title:"242, Valid Anagram",icon:"discover",order:1,type:"article"}}],["/algorithm/leetcode/hashtable/349_intersection_of_two_arrays.html",{loader:()=>r.e(53323).then(r.bind(r,26353)),meta:{date:16993152e5,category:["hashtable"],tag:["easy","array","hash table","binary search","sorting","two pointers"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given two integer arrays <code>nums1</code> and <code>nums2</code>, return <em>an array of their intersection</em>. Each element in the result must be <strong>unique</strong> and you may return the result in <strong>any order</strong>.</p>\n<p><strong>Example 1</strong><br>\nInput: nums1 = [1, 2, 2, 1], nums2 = [2, 2]<br>\nOutput: [2]<br>\nExplanation:</p>",readingTime:{minutes:1.15,words:344},title:"349, Intersection of Two Arrays",icon:"discover",order:5,type:"article"}}],["/algorithm/leetcode/hashtable/350_intersection_of_two_arrays_ii.html",{loader:()=>r.e(17518).then(r.bind(r,53048)),meta:{date:16994016e5,category:["hashtable"],tag:["easy","array","hash table","binary search","sorting","two pointers"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given two integer arrays <code>nums1</code> and <code>nums2</code>, return <em>an array of their intersection</em>. Each element in the result must appear as many times as it shows in both arrays and you may return the result in <strong>any order</strong>   .</p>\n<p><strong>Example 1</strong><br>\nInput: nums1 = [1, 2, 2, 1], nums2 = [2, 2]<br>\nOutput: [2, 2]</p>",readingTime:{minutes:1.66,words:498},title:"350, Intersection of Two Arrays II",icon:"discover",order:6,type:"article"}}],["/algorithm/leetcode/hashtable/383_ransom_note.html",{loader:()=>r.e(45033).then(r.bind(r,35519)),meta:{date:16988832e5,category:["hashtable"],tag:["easy","hash table","string","counting"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given two strings <code>ransomNote</code> and <code>magazine</code>, return <code>true</code> if <code>ransomNote</code> can be constructed by using the letters from <code>magazine</code> and <code>false</code> otherwise.</p>\n<p>Each letter in <code>magazine</code> can only be used once in <code>ransomNote</code>.</p>",readingTime:{minutes:.7,words:211},title:"383, Ransom Note",icon:"discover",order:2,type:"article"}}],["/algorithm/leetcode/hashtable/438_find_all_anagrams_in_a_string.html",{loader:()=>r.e(42101).then(r.bind(r,79257)),meta:{date:16992288e5,category:["hashtable"],tag:["medium","hash table","string","sliding window"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given two strings <code>s</code> and <code>p</code>, return an array of all the start indices of <code>p</code>'s anagrams in <code>s</code>. You may return the answer in any order.</p>\n<p>An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p>",readingTime:{minutes:2.2,words:661},title:"438, Find All Anagrams in a String",icon:"discover",order:4,type:"article"}}],["/algorithm/leetcode/hashtable/454_four_sum_ii.html",{loader:()=>r.e(82252).then(r.bind(r,98634)),meta:{date:169992e7,category:["hashtable"],tag:["medium","array","hash table"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given four integer arrays <code>nums1</code>, <code>nums2</code>, <code>nums3</code>, and <code>nums4</code> all of length <code>n</code>, return the number of tuples <code>(i, j, k, l)</code> such that:</p>\n<ul>\n<li><code>0 &lt;= i, j, k, l &lt; n</code></li>\n<li><code>nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0</code></li>\n</ul>",readingTime:{minutes:1.16,words:348},title:"454, Four Sum II",icon:"discover",order:12,type:"article"}}],["/algorithm/leetcode/hashtable/49_group_anagrams.html",{loader:()=>r.e(25599).then(r.bind(r,82132)),meta:{date:16989696e5,category:["hashtable"],tag:["medium","array","hash table","string","sorting"],sticky:!0,excerpt:'<h2>I Problem</h2>\n<p>Given an array of strings <code>strs</code>, group the anagrams together. You can return the answer in any order.</p>\n<p>An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p>\n<p><strong>Example 1</strong><br>\nInput: strs = ["eat", "tea", "tan", "ate", "nat", "bat"]<br>\nOutput: [["bat"], ["nat", "tan"], ["ate", "eat", "tea"]]</p>',readingTime:{minutes:1.24,words:373},title:"49, Group Anagrams",icon:"discover",order:3,type:"article"}}],["/algorithm/leetcode/hashtable/",{loader:()=>r.e(84329).then(r.bind(r,68657)),meta:{date:16984512e5,category:["leetcode"],tag:["hashtable"],sticky:!1,excerpt:"<h2>About HashTable</h2>\n<h3>Concept</h3>\n<p>In computing, a hash table, also known as a hash map, is a data structure that implements an associative array, also called a dictionary, which is an abstract data type that maps keys to values. A hash table uses a hash function to compute an index, also called a hash code, into an array of buckets or slots, from which the desired value can be found. During lookup, the key is hashed and the resulting hash indicates where the corresponding value is stored.</p>",readingTime:{minutes:1.92,words:576},title:"HashTable",icon:"discover",order:3,type:"article"}}],["/algorithm/leetcode/greedy/1005_maximize_sum_of_array_after_k_negations.html",{loader:()=>r.e(12890).then(r.bind(r,48861)),meta:{date:1708992e6,category:["greedy"],tag:["easy","greedy","array","sorting"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given an integer array <code>nums</code> and an integer <code>k</code>, modify the array in the following way:</p>\n<ul>\n<li>choose an index <code>i</code> and replace <code>nums[i]</code> with <code>-nums[i]</code>.</li>\n</ul>\n<p>You should apply this process exactly <code>k</code> times. You may choose the same index <code>i</code> multiple times.</p>",readingTime:{minutes:2.34,words:702},title:"1005, Maximize Sum Of Array After K Negations",icon:"discover",order:2,type:"article"}}],["/algorithm/leetcode/greedy/122_best_time_to_buy_and_sell_stock_ii.html",{loader:()=>r.e(85739).then(r.bind(r,54969)),meta:{date:17095968e5,category:["greedy"],tag:["medium","greedy","array","dynamic programming"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>You are given an integer array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>iᵗʰ</code> day.</p>\n<p>On each day, you may decide to buy and/or sell the stock. You can only hold <strong>at most one</strong> share of the stock at any time. However, you can buy it then immediately sell it on the <strong>same day</strong>.</p>",readingTime:{minutes:2.21,words:662},title:"122, Best Time to Buy and Sell Stock II",icon:"discover",order:6,type:"article"}}],["/algorithm/leetcode/greedy/134_gas_station.html",{loader:()=>r.e(13054).then(r.bind(r,91823)),meta:{date:17113248e5,category:["greedy"],tag:["medium","array","greedy"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>There are <code>n</code> gas stations along a circular route, where the amount of gas at the <code>iᵗʰ</code> station is <code>gas[i]</code>.</p>\n<p>You have a car with an unlimited gas tank and it costs <code>cost[i]</code> of gas to travel from the <code>iᵗʰ</code> station to its next <code>(i + 1)ᵗʰ</code> station. You begin the journey with an empty tank at one of the gas stations.</p>",readingTime:{minutes:2.6,words:779},title:"134, Gas Station",icon:"discover",order:17,type:"article"}}],["/algorithm/leetcode/greedy/135_candy.html",{loader:()=>r.e(62990).then(r.bind(r,50684)),meta:{date:1709856e6,category:["greedy"],tag:["hard","array","greedy"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>There are <code>n</code> children standing in a line. Each child is assigned a rating value given in the integer array <code>ratings</code>.</p>\n<p>You are giving candies to these children subjected to the following requirements:</p>\n<ul>\n<li>Each child must have at least one candy.</li>\n<li>Children with a higher rating get more candies than their neighbors.</li>\n</ul>",readingTime:{minutes:1.95,words:585},title:"135, Candy",icon:"discover",order:8,type:"article"}}],["/algorithm/leetcode/greedy/376_wiggle_subsequence.html",{loader:()=>r.e(15823).then(r.bind(r,82944)),meta:{date:17092512e5,category:["greedy"],tag:["medium","array","greedy","dynamic programming"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>A <strong>wiggle sequence</strong> is a sequence where the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with one element and a sequence with two non-equal elements are trivially wiggle sequences.</p>",readingTime:{minutes:2.48,words:745},title:"376, Wiggle Subsequence",icon:"discover",order:4,type:"article"}}],["/algorithm/leetcode/greedy/406_queue_reconstruction_by_height.html",{loader:()=>r.e(59842).then(r.bind(r,44995)),meta:{date:17102016e5,category:["greedy"],tag:["medium","binary indexed tree","segment tree","array","sorting"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>You are given an array of people, <code>people</code>, which are the attributes of some people in a queue (not necessarily in order). Each <code>people[i] = [hi, ki]</code> represents the <code>iᵗʰ</code> person of height <code>hi</code> with <strong>exactly</strong> <code>ki</code> other people in front who have a height greater than or equal to <code>hi</code>.</p>",readingTime:{minutes:2.39,words:717},title:"406, Queue Reconstruction by Height",icon:"discover",order:9,type:"article"}}],["/algorithm/leetcode/greedy/435_non_overlapping_intervals.html",{loader:()=>r.e(21786).then(r.bind(r,74289)),meta:{date:17108928e5,category:["greedy"],tag:["medium","array","greedy","dynamic programming"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given an array of intervals <code>intervals</code> where <code>intervals[i] = [starti, endi]</code>, return <em>the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping</em>.</p>\n<p><strong>Example 1</strong><br>\nInput: intervals = [[1, 2], [2, 3], [3, 4], [1, 3]]<br>\nOutput: 1<br>\nExplanation: <code>[1, 3]</code> can be removed and the rest of the intervals are non-overlapping.</p>",readingTime:{minutes:1.96,words:587},title:"435, Non-overlapping Intervals",icon:"discover",order:13,type:"article"}}],["/algorithm/leetcode/greedy/452_minimum_number_of_arrows_to_burst_balloons.html",{loader:()=>r.e(20534).then(r.bind(r,6065)),meta:{date:171072e7,category:["greedy"],tag:["medium","array","greedy","sorting"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>There are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D integer array <code>points</code> where <code>points[i] = [xstart, xend]</code> denotes a balloon whose <strong>horizontal diameter</strong> stretches between <code>xstart</code> and <code>xend</code>. You do not know the exact y-coordinates of the balloons.</p>",readingTime:{minutes:2.48,words:744},title:"452, Minimum Number of Arrows to Burst Balloons",icon:"discover",order:12,type:"article"}}],["/algorithm/leetcode/greedy/455_assign_cookies.html",{loader:()=>r.e(21425).then(r.bind(r,76382)),meta:{date:17089056e5,category:["greedy"],tag:["easy","greedy","array","two pointers","sorting"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie.</p>\n<p>Each child <code>i</code> has a greed factor <code>g[i]</code>, which is the minimum size of a cookie that the child will be content with; and each cookie <code>j</code> has a size <code>s[j]</code>. If <code>s[j] &gt;= g[i]</code>, we can assign the cookie <code>j</code> to the child <code>i</code>, and the child <code>i</code> will be content. Your goal is to maximize the number of your content children and output the maximum number.</p>",readingTime:{minutes:1.88,words:565},title:"455, Assign Cookies",icon:"discover",order:1,type:"article"}}],["/algorithm/leetcode/greedy/45_jump_game_ii.html",{loader:()=>r.e(10465).then(r.bind(r,85277)),meta:{date:17106336e5,category:["greedy"],tag:["medium","array","greedy","dynamic programming"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>You are given a <strong>0-indexed</strong> array of integers <code>nums</code> of length <code>n</code>. You are initially positioned at <code>nums[0]</code>.</p>\n<p>Each element <code>nums[i]</code> represents the maximum length of a forward jump from index <code>i</code>. In other words, if you are at <code>nums[i]</code>, you can jump to any <code>nums[i + j]</code> where:</p>",readingTime:{minutes:1.49,words:446},title:"45, Jump Game II",icon:"discover",order:11,type:"article"}}],["/algorithm/leetcode/greedy/53_maximum_subarray.html",{loader:()=>r.e(7170).then(r.bind(r,28050)),meta:{date:17112384e5,category:["greedy"],tag:["medium","array","divide and conquer","dynamic programming"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given an integer array <code>nums</code>, find the subarray with the largest sum, and return <em>its sum</em>.</p>\n<p><strong>Example 1</strong><br>\nInput: nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]<br>\nOutput: 6<br>\nExplanation: The subarray <code>[4, -1, 2, 1]</code> has the largest sum <code>6</code>.</p>",readingTime:{minutes:2.84,words:852},title:"53, Maximum Subarray",icon:"discover",order:16,type:"article"}}],["/algorithm/leetcode/greedy/55_jump_game.html",{loader:()=>r.e(43917).then(r.bind(r,19888)),meta:{date:17103744e5,category:["greedy"],tag:["medium","array","greedy","dynamic programming"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>You are given an integer array <code>nums</code>. You are initially positioned at the array's <strong>first index</strong>, and each element in the array represents your maximum jump length at that position.</p>\n<p>Return <em><code>true</code> if you can reach the last index, or <code>false</code> otherwise</em>.</p>",readingTime:{minutes:1.22,words:366},title:"55, Jump Game",icon:"discover",order:10,type:"article"}}],["/algorithm/leetcode/greedy/56_merge_intervals.html",{loader:()=>r.e(6534).then(r.bind(r,88705)),meta:{date:1711152e6,category:["greedy"],tag:["medium","array","sorting"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given an array of <code>intervals</code> where <code>intervals[i] = [starti, endi]</code>, merge all overlapping intervals, and return <em>an array of the non-overlapping intervals that cover all the intervals in the input</em>.</p>\n<p><strong>Example 1</strong><br>\nInput: intervals = [[1, 3], [2, 6], [8, 10], [15, 18]]<br>\nOutput: [[1, 6], [8, 10], [15, 18]]<br>\nExplanation: Since intervals <code>[1, 3]</code> and <code>[2, 6]</code> overlap, merge them into <code>[1, 6]</code>.</p>",readingTime:{minutes:1.77,words:532},title:"56, Merge Intervals",icon:"discover",order:15,type:"article"}}],["/algorithm/leetcode/greedy/714_best_time_to_buy_and_sell_stock_with_transaction_fee.html",{loader:()=>r.e(6504).then(r.bind(r,86304)),meta:{date:17096832e5,category:["greedy"],tag:["medium","greedy","array","dynamic programming"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>You are given an array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>iᵗʰ</code> day, and an integer <code>fee</code> representing a transaction fee.</p>\n<p>Find the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.</p>",readingTime:{minutes:2.34,words:701},title:"714, Best Time to Buy and Sell Stock with Transaction Fee",icon:"discover",order:7,type:"article"}}],["/algorithm/leetcode/greedy/738_monotone_increasing_digits.html",{loader:()=>r.e(8714).then(r.bind(r,27092)),meta:{date:17095104e5,category:["greedy"],tag:["medium","greedy","math"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>An integer has <strong>monotone increasing digits</strong> if and only if each pair of adjacent digits <code>x</code> and <code>y</code> satisfy <code>x &lt;= y</code>.</p>\n<p>Given an integer <code>n</code>, return <em>the largest number that is less than or equal to <code>n</code> with <strong>monotone increasing digits</strong></em>.</p>",readingTime:{minutes:1.15,words:346},title:"738, Monotone Increasing Digits",icon:"discover",order:5,type:"article"}}],["/algorithm/leetcode/greedy/763_partition_labels.html",{loader:()=>r.e(73260).then(r.bind(r,63792)),meta:{date:17109792e5,category:["greedy"],tag:["medium","greedy","two pointers","hash table","string"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>You are given a string <code>s</code>. We want to partition the string into as many parts as possible so that each letter appears in at most one part.</p>\n<p>Note that the partition is done so that after concatenating all the parts in order, the resultant string should be <code>s</code>.</p>",readingTime:{minutes:1.24,words:371},title:"763, Partition Labels",icon:"discover",order:14,type:"article"}}],["/algorithm/leetcode/greedy/860_lemonade_change.html",{loader:()=>r.e(63800).then(r.bind(r,96145)),meta:{date:17091648e5,category:["greedy"],tag:["easy","greedy","array"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>At a lemonade stand, each lemonade costs <code>$5</code>. Customers are standing in a queue to buy from you and order one at a time (in the order specified by bills). Each customer will only buy one lemonade and pay with either a <code>$5</code>, <code>$10</code>, or <code>$20</code> bill. You must provide the correct change to each customer so that the net transaction is that the customer pays <code>$5</code>.</p>",readingTime:{minutes:1.57,words:471},title:"860, Lemonade Change",icon:"discover",order:3,type:"article"}}],["/algorithm/leetcode/greedy/968_binary_tree_cameras.html",{loader:()=>r.e(67796).then(r.bind(r,36368)),meta:{date:17114112e5,category:["greedy"],tag:["hard","binary tree","depth first search","dynamic programming"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>You are given the <code>root</code> of a binary tree. We install cameras on the tree nodes where each camera at a node can monitor its parent, itself, and its immediate children.</p>\n<p>Return <em>the minimum number of cameras needed to monitor all nodes of the tree</em>.</p>\n<p><strong>Example 1</strong><br>\n<br>\nInput: root = [0, 0, null, 0, 0]<br>\nOutput: 1<br>\nExplanation: One camera is enough to monitor all nodes if placed as shown.</p>",readingTime:{minutes:3.43,words:1029},title:"968, Binary Tree Cameras",icon:"discover",order:18,type:"article"}}],["/algorithm/leetcode/greedy/",{loader:()=>r.e(48195).then(r.bind(r,30720)),meta:{date:17088192e5,category:["leetcode"],tag:["greedy"],sticky:!1,excerpt:"<h2>Greedy</h2>\n<p><strong>Greedy algorithms</strong> are a class of algorithms that make <strong>locally optimal</strong> choices at each step with the hope of finding a <strong>global optimum</strong> solution. In these algorithms, decisions are made based on the information available at the current moment without considering the consequences of these decisions in the future. The key idea is to select the best possible choice at each step, leading to a solution that may not always be the most optimal but is often good enough for many problems.</p>",readingTime:{minutes:.84,words:252},title:"Greedy",icon:"discover",order:9,type:"article"}}],["/algorithm/leetcode/mono_stack/",{loader:()=>r.e(60619).then(r.bind(r,61267)),meta:{date:16957728e5,category:["leetcode"],tag:["monotonic stack"],sticky:!0,readingTime:{minutes:.06,words:19},title:"Monotonic Stack",icon:"discover",order:11,type:"article"}}],["/algorithm/leetcode/other/",{loader:()=>r.e(87119).then(r.bind(r,25579)),meta:{date:16957728e5,category:["leetcode"],tag:["other"],sticky:!0,readingTime:{minutes:.06,words:17},title:"Other",icon:"discover",order:13,type:"article"}}],["/algorithm/leetcode/stack_queue/1047_remove_all_adjacent_duplicates_in_string.html",{loader:()=>r.e(80016).then(r.bind(r,73184)),meta:{date:17013024e5,category:["stack/queue"],tag:["easy","string","stack"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>You are given a string <code>s</code> consisting of lowercase English letters. A <strong>duplicate removal</strong> consists of choosing two <strong>adjacent</strong> and <strong>equal</strong> letters and removing them.</p>\n<p>We repeatedly make <strong>duplicate removals</strong> on <code>s</code> until we no longer can.</p>",readingTime:{minutes:1.42,words:426},title:"1047, Remove All Adjacent Duplicates In String",icon:"discover",order:4,type:"article"}}],["/algorithm/leetcode/stack_queue/150_evaluate_reverse_polish_notation.html",{loader:()=>r.e(72855).then(r.bind(r,89068)),meta:{date:17013888e5,category:["stack/queue"],tag:["medium","array","math","stack"],sticky:!0,excerpt:'<h2>I Problem</h2>\n<p>You are given an array of strings <code>tokens</code> that represents an arithmetic expression in a <a href="https://en.wikipedia.org/wiki/Reverse_Polish_notation" target="_blank" rel="noopener noreferrer">Reverse Polish Notation</a>.</p>\n<p>Evaluate the expression. Return <em>an integer that represents the value of the expression</em>.</p>',readingTime:{minutes:2.09,words:628},title:"150, Evaluate Reverse Polish Notation",icon:"discover",order:5,type:"article"}}],["/algorithm/leetcode/stack_queue/20_valid_parentheses.html",{loader:()=>r.e(40309).then(r.bind(r,5767)),meta:{date:1701216e6,category:["stack/queue"],tag:["easy","string","stack"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given a string s containing just the characters <code>'('</code>, <code>')'</code>, <code>'{'</code>, <code>'}'</code>, <code>'['</code> and <code>']'</code>, determine if the input string is valid.</p>\n<p>An input string is valid if:</p>\n<ol>\n<li>Open brackets must be closed by the same type of brackets.</li>\n<li>Open brackets must be closed in the correct order.</li>\n<li>Every close bracket has a corresponding open bracket of the same type.</li>\n</ol>",readingTime:{minutes:1.22,words:367},title:"20, Valid Parentheses",icon:"discover",order:3,type:"article"}}],["/algorithm/leetcode/stack_queue/225_implement_stack_using_queues.html",{loader:()=>r.e(25475).then(r.bind(r,15010)),meta:{date:17011296e5,category:["stack/queue"],tag:["easy","stack","queue","design"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (<code>push</code>, <code>top</code>, <code>pop</code>, and <code>empty</code>).</p>\n<p>Implement the <code>MyStack</code> class:</p>\n<ul>\n<li><code>void push(int x)</code> Pushes element x to the top of the stack.</li>\n<li><code>int pop()</code> Removes the element on the top of the stack and returns it.</li>\n<li><code>int top()</code> Returns the element on the top of the stack.</li>\n<li><code>boolean empty()</code> Returns <code>true</code> if the stack is empty, <code>false</code> otherwise.</li>\n</ul>",readingTime:{minutes:2.27,words:680},title:"225, Implement Stack using Queues",icon:"discover",order:2,type:"article"}}],["/algorithm/leetcode/stack_queue/232_implement_queue_using_stacks.html",{loader:()=>r.e(41803).then(r.bind(r,65325)),meta:{date:17010432e5,category:["stack/queue"],tag:["easy","stack","queue","design"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (<code>push</code>, <code>peek</code>, <code>pop</code>, and <code>empty</code>).</p>\n<p>Implement the <code>MyQueue</code> class:</p>\n<ul>\n<li><code>void push(int x)</code> Pushes element x to the back of the queue.</li>\n<li><code>int pop()</code> Removes the element from the front of the queue and returns it.</li>\n<li><code>int peek()</code> Returns the element at the front of the queue.</li>\n<li><code>boolean empty()</code> Returns <code>true</code> if the queue is empty, <code>false</code> otherwise.</li>\n</ul>",readingTime:{minutes:2.41,words:724},title:"232, Implement Queue using Stacks",icon:"discover",order:1,type:"article"}}],["/algorithm/leetcode/stack_queue/239_sliding_window_maximum.html",{loader:()=>r.e(75516).then(r.bind(r,42759)),meta:{date:17014752e5,category:["stack/queue"],tag:["hard","array","queue","sliding window","head","monotonic queue"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>You are given an array of integers <code>nums</code>, there is a sliding window of size <code>k</code> which is moving from the very left of the array to the very right. You can only see the <code>k</code> numbers in the window. Each time the sliding window moves right by one position.</p>",readingTime:{minutes:2.71,words:813},title:"239, Sliding Window Maximum",icon:"discover",order:6,type:"article"}}],["/algorithm/leetcode/stack_queue/347_top_k_frequent_elements.html",{loader:()=>r.e(72734).then(r.bind(r,1527)),meta:{date:17015616e5,category:["stack/queue"],tag:["medium","hash table","divide and conquer","sorting","heap(priority queue)","bucket sort","counting","quick select"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <em>the <code>k</code> most frequent elements</em>. You may return the answer in <strong>any order</strong>.</p>\n<p><strong>Example 1</strong><br>\nInput: nums = [1, 1, 1, 2, 2, 3], k = 2<br>\nOutput: [1, 2]</p>",readingTime:{minutes:4.42,words:1326},title:"347, Top K Frequent Elements",icon:"discover",order:7,type:"article"}}],["/algorithm/leetcode/stack_queue/",{loader:()=>r.e(44597).then(r.bind(r,94452)),meta:{date:17009568e5,category:["leetcode"],tag:["stack","queue"],sticky:!1,excerpt:"<h2>Stack/Queue</h2>\n<h3>Stack</h3>\n<p>In computer science, a <code>stack</code> is an abstract data type that serves as a collection of elements with two main operations:</p>\n<ul>\n<li><strong>Push</strong>, which adds an element to the collection, and</li>\n<li><strong>Pop</strong>, which removes the most recently added element.<br>\n<br>\n</li>\n</ul>",readingTime:{minutes:2.15,words:645},title:"Stack/Queue",icon:"discover",order:6,type:"article"}}],["/algorithm/leetcode/string/151_reverse_words_in_a_string.html",{loader:()=>r.e(83750).then(r.bind(r,63691)),meta:{date:17005248e5,category:["string"],tag:["medium","string","two pointers"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given an input string <code>s</code>, reverse the order of the <strong>words</strong>.</p>\n<p>A <strong>word</strong> is defined as a sequence of non-space characters. The <strong>words</strong> in <code>s</code> will be separated by at least one space.</p>\n<p>Return a <em>string of the words in reverse order concatenated by a single space</em>.</p>",readingTime:{minutes:2.58,words:775},title:"151, Reverse words in a String",icon:"discover",order:4,type:"article"}}],["/algorithm/leetcode/string/28_find_the_index_of_the_first_occurrence_in_a_string.html",{loader:()=>r.e(63892).then(r.bind(r,14411)),meta:{date:17006976e5,category:["string"],tag:["easy","string","string matching","two pointers"],sticky:!0,excerpt:'<h2>I Problem</h2>\n<p>Given two strings <code>needle</code> and <code>haystack</code>, return the index of the first occurrence of <code>needle</code> in <code>haystack</code>, or <code>-1</code> if <code>needle</code> is not part of <code>haystack</code>.</p>\n<p><strong>Example 1</strong><br>\nInput: <code>haystack = "sadbutsad", needle = "sad"</code><br>\nOutput: <code>0</code><br>\nExplanation: <code>"sad"</code> occurs at index <code>0</code> and <code>6</code>. The first occurrence is at index <code>0</code>, so we return <code>0</code>.</p>',readingTime:{minutes:1.69,words:508},title:"28, Find the Index of the First Occurrence in a String",icon:"discover",order:6,type:"article"}}],["/algorithm/leetcode/string/344_reverse_string.html",{loader:()=>r.e(59160).then(r.bind(r,77243)),meta:{date:17000928e5,category:["string"],tag:["easy","string","two pointers"],sticky:!0,excerpt:'<h2>I Problem</h2>\n<p>Write a function that reverses a string. The input string is given as an array of characters <code>s</code>.</p>\n<p>You must do this by modifying the input array <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank" rel="noopener noreferrer"><strong>in-place</strong></a> with <code>O(1)</code> extra memory.</p>',readingTime:{minutes:.6,words:180},title:"344, Reverse String",icon:"discover",order:1,type:"article"}}],["/algorithm/leetcode/string/459_repeated_substring_pattern.html",{loader:()=>r.e(30328).then(r.bind(r,47286)),meta:{date:1700784e6,category:["string"],tag:["easy","string","string matching"],sticky:!0,excerpt:'<h2>I Problem</h2>\n<p>Given a string <code>s</code>, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.</p>\n<p><strong>Example 1</strong><br>\nInput: <code>s = "abab"</code><br>\nOutput: true<br>\nExplanation: It is the substring <code>"ab"</code> twice.</p>',readingTime:{minutes:1.34,words:403},title:"459, Repeated Substring Pattern",icon:"discover",order:7,type:"article"}}],["/algorithm/leetcode/string/541_reverse_string_ii.html",{loader:()=>r.e(86992).then(r.bind(r,91805)),meta:{date:17002656e5,category:["string"],tag:["easy","string","two pointers"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>Given a string <code>s</code> and an integer <code>k</code>, reverse the first <code>k</code> characters for every <code>2k</code> characters counting from the start of the string.</p>\n<ul>\n<li>If there are fewer than <code>k</code> characters left, reverse all of them.</li>\n<li>If there are less than <code>2k</code> but greater than or equal to <code>k</code> characters, then reverse the first <code>k</code> characters and leave the other as original.</li>\n</ul>",readingTime:{minutes:.88,words:263},title:"541, Reverse String II",icon:"discover",order:2,type:"article"}}],["/algorithm/leetcode/string/",{loader:()=>r.e(96298).then(r.bind(r,60547)),meta:{date:17000928e5,category:["leetcode"],tag:["string"],sticky:!1,excerpt:'<h2>String</h2>\n<p><br>\nIn computer programming, a <strong>string</strong> is traditionally a sequence of characters, either as a literal constant or as some kind of variable.</p>\n<h2>Exercise</h2>\n<h3>Reverse String</h3>\n<p><a href="/algorithm/leetcode/string/344_reverse_string.html" target="_blank">344: Reverse String</a><br>\n<a href="/algorithm/leetcode/string/541_reverse_string_ii.html" target="_blank">541: Reverse String II</a></p>',readingTime:{minutes:.38,words:113},title:"String",icon:"discover",order:4,type:"article"}}],["/algorithm/leetcode/string/kamacoder_54_replace_numbers.html",{loader:()=>r.e(16247).then(r.bind(r,53264)),meta:{date:17004384e5,category:["string"],tag:["easy","string"],sticky:!0,excerpt:'<h2>I Problem</h2>\n<p>Given a string <code>s</code> that contains lowercase alphabetic and numeric characters, write a function that leaves the alphabetic characters in the string unchanged and replaces each numeric character with a number. For example, for the input string <code>"a1b2c3"</code>, the function should convert it to <code>"anumberbnumbercnumber"</code>.</p>',readingTime:{minutes:.5,words:149},title:"KamaCoder-54, Replace Numbers",icon:"discover",order:3,type:"article"}}],["/algorithm/leetcode/string/kamacoder_55_right_rotated_string.html",{loader:()=>r.e(54269).then(r.bind(r,21025)),meta:{date:17006112e5,category:["string"],tag:["easy","string"],sticky:!0,excerpt:"<h2>I Problem</h2>\n<p>The right rotation operation of a string is to transfer several characters at the end of the string to the front of the string. Given a string <code>s</code> and a positive integer <code>k</code>, please write a function to move the following <code>k</code> characters in the string to the front of the string, achieving the right rotation operation of the string.</p>",readingTime:{minutes:1.86,words:559},title:"KamaCoder-55, Right-Rotated String",icon:"discover",order:5,type:"article"}}],["/algorithm/leetcode/two_pointers/",{loader:()=>r.e(91226).then(r.bind(r,3028)),meta:{date:17008704e5,category:["leetcode"],tag:["two pointers"],sticky:!1,excerpt:"<h2>Two Pointers</h2>\n<p>The two pointers technique is a technique used to iterate through a data set, typically an array or a list, in a controlled way. It involves using two pointers, one pointing to the beginning of the data set and the other pointing to the end, and moving them towards each other based on specific conditions. This technique is commonly used to solve problems that involve searching for a specific condition or pattern within a data set, or that require a comparison between different elements in the data set.</p>",readingTime:{minutes:1.25,words:374},title:"Two Pointers",icon:"discover",order:5,type:"article"}}],["/zh/algorithm/1800/",{loader:()=>r.e(93329).then(r.bind(r,68641)),meta:{date:16957728e5,category:["Data Structure"],sticky:!0,excerpt:'<div class="hint-container info">\n<p class="hint-container-title">相关信息</p>\n<p>感谢殷人昆老师的<a href="http://www.tup.tsinghua.edu.cn/booksCenter/book_06752701.html" target="_blank" rel="noopener noreferrer">著作</a></p>\n</div>\n<h2>目录</h2>\n<h3>第1章 数据结构绪论</h3>\n<h4>1.1 数据结构的概念及分类</h4>\n<h4>1.2 算法设计与算法分析</h4>\n<h3>第2章 线性表</h3>',readingTime:{minutes:1.21,words:362},title:"数据结构精讲与习题详解",icon:"discover",type:"article"}}],["/zh/algorithm/introduction/",{loader:()=>r.e(37652).then(r.bind(r,33119)),meta:{date:16957728e5,category:["algorithm"],sticky:!0,excerpt:"<h2>目录</h2>\n<h3>第一部分 基础知识</h3>\n<h4>前言</h4>\n<h4>第1章 算法在计算中的作用</h4>\n<h4>第2章 入门</h4>\n<h4>第3章 刻画运行时间</h4>\n<h4>第4章 分治策略</h4>\n<h4>第5章 概率分析和随机算法</h4>\n<h3>第二部分 排序和顺序统计量</h3>\n<h4>前言</h4>\n<h4>第6章 堆排序</h4>\n<h4>第7章 快速排序</h4>\n<h4>第8章 线性时间排序</h4>\n<h4>第9章 中位数和顺序统计量</h4>\n<h3>第三部分 数据结构</h3>\n<h4>前言</h4>\n<h4>第10章 基本数据结构</h4>",readingTime:{minutes:1.47,words:441},title:"算法导论(第四版)",icon:"discover",type:"article"}}],["/zh/algorithm/leetcode/",{loader:()=>r.e(22699).then(r.bind(r,18891)),meta:{date:16957728e5,category:["leetcode"],excerpt:'<h2>LeetCode主题</h2>\n<h3><a href="/zh/algorithm/leetcode/array/" target="_blank">数组</a></h3>\n<h3><a href="/zh/algorithm/leetcode/linkedlist/" target="_blank">链表</a></h3>\n<h3><a href="/zh/algorithm/leetcode/hashtable/" target="_blank">哈希表</a></h3>\n<h3><a href="/zh/algorithm/leetcode/string/" target="_blank">字符串</a></h3>',readingTime:{minutes:.22,words:66},title:"乐扣",icon:"discover",type:"article"}}],["/zh/rust/the_book/",{loader:()=>r.e(67192).then(r.bind(r,84804)),meta:{date:16954272e5,category:["Rust语法"],sticky:!0,excerpt:"<p>这本书主要描述了Rust的基本语法。</p>\n",readingTime:{minutes:1.13,words:338},title:"Rust程序设计语言",icon:"note",type:"article"}}],["/zh/rust/the_book/foreword.html",{loader:()=>r.e(76488).then(r.bind(r,90426)),meta:{date:16955136e5,category:["Rust语法"],tag:["前言"],excerpt:'<h2>Foreword 前言</h2>\n<p>It wasn\'t always so clear, but the Rust programming language is fundamentally<br>\nabout empowerment: no matter what kind of code you are writing now, Rust empowers<br>\nyou to reach farther, to program with confidence in a wider variety of domains<br>\nthan you did before.<br>\n译：有一点需要澄清，那就是Rust语言从根本上讲是关于"赋能"的：无论你现在使用的是哪种语言，Rust都能让你走得更远，让你在比以前更广泛的领域中自信地编码。</p>',readingTime:{minutes:3.41,words:1024},title:"前言",icon:"note",type:"article"}}],["/zh/algorithm/leetcode/array/209_minimum_size_subarray_sum.html",{loader:()=>r.e(78949).then(r.bind(r,25566)),meta:{date:16970688e5,category:["array"],tag:["medium","array","binary search","sliding window","prefix sum"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给定一个含有 n 个正整数的数组和一个正整数 target。找出该数组中满足其总和大于等于 target 且长度最小的连续子数组 [nums[l], nums[l+1], ..., nums[r-1], nums[r]]，并返回其长度。如果不存在符合条件的子数组，则返回 0。</p>\n<p><strong>示例 1:</strong><br>\n输入: target = 7, nums = [2,3,1,2,4,3]<br>\n输出: 2<br>\n解释: 子数组[4,3]是该条件下的长度最小的子数组。</p>\n<p><strong>示例 2:</strong><br>\n输入: target = 4, nums = [1,4,4]<br>\n输出: 1</p>",readingTime:{minutes:2.39,words:716},title:"209, 长度最小的子数组",icon:"discover",order:11,type:"article"}}],["/zh/algorithm/leetcode/array/26_remove_duplicates_from_sorted_array.html",{loader:()=>r.e(42208).then(r.bind(r,43156)),meta:{date:16965504e5,category:["array"],tag:["easy","array","two pointers"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给你一个非严格递增排列的数组nums，请你原地删除重复出现的元素，使每个元素只出现一次，返回删除后数组的新长度。元素的相对顺序应该保持一致。然后返回nums中唯一元素的个数。</p>\n<p>考虑nums的唯一元素的数量为k，你需要做以下事情确保你的题解可以被通过：</p>\n<ul>\n<li>更改数组nums，使nums的前k个元素包含唯一元素，并按照它们最初在nums中出现的顺序排列。nums的其余元素与nums的大小不重要。</li>\n<li>返回k。</li>\n</ul>\n<p><strong>示例 1:</strong><br>\n输入: nums = [1,1,2]<br>\n输出: <code>2, nums = [1,2,_]</code><br>\n解释: 函数应该返回新的长度2，并且原数组nums的前两个元素被修改为1, 2。不需要考虑数组中超出新长度后面的元素。</p>",readingTime:{minutes:1.83,words:550},title:"26, 删除有序数组中的重复项",icon:"discover",order:7,type:"article"}}],["/zh/algorithm/leetcode/array/27_remove_element.html",{loader:()=>r.e(87326).then(r.bind(r,99998)),meta:{date:16969824e5,category:["array"],tag:["easy","array","two pointers"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</p>\n<p>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。</p>\n<p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p>\n<p><strong>示例 1:</strong><br>\n输入: nums = [3,2,2,3], val = 3<br>\n输出: 2, nums = <code>[2,2,_,_]</code><br>\n解释: 函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。</p>",readingTime:{minutes:1.51,words:453},title:"27, 移除元素",icon:"discover",order:6,type:"article"}}],["/zh/algorithm/leetcode/array/283_move_zeroes.html",{loader:()=>r.e(68649).then(r.bind(r,17262)),meta:{date:16966368e5,category:["array"],tag:["easy","array","two pointers"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。</p>\n<p>请注意 ，必须在不复制数组的情况下原地对数组进行操作。</p>\n<p><strong>示例 1:</strong><br>\n输入: nums = [0,1,0,3,12]<br>\n输出: [1,3,12,0,0]</p>\n<p><strong>示例 2:</strong><br>\n输入: nums = [0]<br>\n输出: [0]</p>\n<p><strong>提示:</strong></p>\n<ul>\n<li>1 &lt;= nums.length &lt;= 10⁴</li>\n<li>-2³¹ &lt;= nums[i] &lt;= 2³¹ - 1</li>\n</ul>",readingTime:{minutes:1.43,words:428},title:"283, 移动零",icon:"discover",order:8,type:"article"}}],["/zh/algorithm/leetcode/array/34_find_first_and_last_position_of_element_in_sorted_array.html",{loader:()=>r.e(86521).then(r.bind(r,17584)),meta:{date:16958592e5,category:["array"],tag:["medium","array","binary search"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给你一个按照非递减顺序排列的整数数组 nums，和一个目标值 target。请你找出给定目标值在数组中的开始位置和结束位置。</p>\n<p>如果数组中不存在目标值 target，返回 [-1, -1]。</p>\n<p>你必须设计并实现时间复杂度为 O(log n) 的算法解决此问题。</p>\n<p><strong>示例 1:</strong><br>\n输入: nums = [5,7,7,8,8,10], target = 8<br>\n输出: [3,4]</p>\n<p><strong>示例 2:</strong><br>\n输入: nums = [5,7,7,8,8,10], target = 6<br>\n输出: [-1,-1]</p>",readingTime:{minutes:2.43,words:728},title:"34, 在排序数组中查找元素的第一个和最后一个位置",icon:"discover",order:3,type:"article"}}],["/zh/algorithm/leetcode/array/35_search_insert_position.html",{loader:()=>r.e(43206).then(r.bind(r,99524)),meta:{date:16957728e5,category:["array"],tag:["easy","array","binary search"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p>\n<p>请必须使用时间复杂度为 O(log n) 的算法。</p>\n<p><strong>示例 1:</strong></p>\n<p>输入: nums = [1,3,5,6], target = 5</p>\n<p>输出: 2</p>\n<p><strong>示例 2:</strong></p>\n<p>输入: nums = [1,3,5,6], target = 2</p>\n<p>输出: 1</p>\n<p><strong>示例 3:</strong></p>",readingTime:{minutes:2.44,words:731},title:"35, 搜索插入位置",icon:"discover",order:2,type:"article"}}],["/zh/algorithm/leetcode/array/367_valid_perfect_square.html",{loader:()=>r.e(24388).then(r.bind(r,98722)),meta:{date:16961184e5,category:["array"],tag:["easy","math","binary search"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给你一个正整数 num 。如果 num 是一个完全平方数，则返回 true ，否则返回 false 。</p>\n<p>完全平方数 是一个可以写成某个整数的平方的整数。换句话说，它可以写成某个整数和自身的乘积。</p>\n<p>不能使用任何内置的库函数，如 sqrt 。</p>\n<p><strong>示例 1:</strong><br>\n输入: x = 16<br>\n输出: true<br>\n解释: 返回 true ，因为 4 * 4 = 16 且 4 是一个整数。</p>\n<p><strong>示例 2:</strong><br>\n输入: x = 14<br>\n输出: false<br>\n解释: 返回 false ，因为 3.742 * 3.742 = 14 但 3.742 不是一个整数。</p>",readingTime:{minutes:1.4,words:421},title:"367, 有效的完全平方数",icon:"discover",order:5,type:"article"}}],["/zh/algorithm/leetcode/array/54_spiral_matrix.html",{loader:()=>r.e(33508).then(r.bind(r,49130)),meta:{date:16975872e5,category:["array"],tag:["medium","array","matrix","simulation"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给你一个m行n列的矩阵matrix，请按照顺时针螺旋顺序返回矩阵中的所有元素。</p>\n<p><strong>示例 1</strong><br>\n<br>\n输入: matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]<br>\n输出: [1, 2, 3, 6, 9, 8, 7, 4, 5]</p>\n<p><strong>示例 2</strong><br>\n<br>\n输入: matrix = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]<br>\n输出: [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7]</p>",readingTime:{minutes:2.31,words:694},title:"54, 螺旋矩阵",icon:"discover",order:14,type:"article"}}],["/zh/algorithm/leetcode/array/59_spiral_matrix_ii.html",{loader:()=>r.e(12872).then(r.bind(r,58854)),meta:{date:16976736e5,category:["array"],tag:["medium","array","matrix","simulation"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给你一个正整数n，生成一个包含<code>1到n²</code>所有元素，且元素按顺时针顺序螺旋排列的<code>n x n</code>正方形矩阵matrix。</p>\n<p><strong>示例 1</strong><br>\n<br>\n输入: n = 3<br>\n输出: [[1, 2, 3], [8, 9, 4], [7, 6, 5]]</p>\n<p><strong>示例 2</strong><br>\n输入: n = 1<br>\n输出: [[1]]</p>\n<p><strong>提示</strong></p>\n<ul>\n<li>1 &lt;= n &lt;= 20</li>\n</ul>",readingTime:{minutes:2,words:600},title:"59, 螺旋矩阵II",icon:"discover",order:15,type:"article"}}],["/zh/algorithm/leetcode/array/69_sqrt_x.html",{loader:()=>r.e(75882).then(r.bind(r,165)),meta:{date:1696032e6,category:["array"],tag:["easy","math","binary search"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给你一个非负整数 x ，计算并返回 x 的 算术平方根 。</p>\n<p>由于返回类型是整数，结果只保留 整数部分 ，小数部分将被 舍去 。</p>\n<p>注意：不允许使用任何内置指数函数和算符，例如 pow(x, 0.5) 或者 x ** 0.5 。</p>\n<p><strong>示例 1:</strong><br>\n输入: x = 4<br>\n输出: 2<br>\n解释: 4的平方根是2，所以返回2.</p>\n<p><strong>示例 2:</strong><br>\n输入: x = 8<br>\n输出: 2<br>\n解释: 8 的算术平方根是 2.82842..., 由于返回类型是整数，小数部分将被舍去。</p>",readingTime:{minutes:1.71,words:514},title:"69, x的平方根",icon:"discover",order:4,type:"article"}}],["/zh/algorithm/leetcode/array/704_binary_search.html",{loader:()=>r.e(76997).then(r.bind(r,86582)),meta:{date:1696896e6,category:["array"],tag:["easy","array","binary search"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p>\n<p>你所使用的算法，其时间复杂度必须为O(log n)。</p>\n<p><strong>示例 1:</strong><br>\n输入: nums = [-1,0,3,5,9,12], target = 9<br>\n输出: 4<br>\n解释: 9 出现在 nums 中并且下标为 4</p>\n<p><strong>示例 2:</strong><br>\n输入: nums = [-1,0,3,5,9,12], target = 2<br>\n输出: -1<br>\n解释: 2 不存在 nums 中因此返回 -1</p>",readingTime:{minutes:3.54,words:1061},title:"704, 二分查找",icon:"discover",order:1,type:"article"}}],["/zh/algorithm/leetcode/array/76_minimum_window_substring.html",{loader:()=>r.e(90834).then(r.bind(r,32534)),meta:{date:16974144e5,category:["array"],tag:["hard","hash table","string","sliding window"],sticky:!0,excerpt:'<h2>一、题目描述</h2>\n<p>给你一个字符串s、一个字符串t。返回s中涵盖t所有字符的最小子串。如果s中不存在涵盖t所有字符的子串，则返回空字符串 ""。</p>\n<p>注意：</p>\n<ul>\n<li>对于 t 中重复字符，我们寻找的子字符串中该字符数量必须不少于 t 中该字符数量。</li>\n<li>如果 s 中存在这样的子串，我们保证它是唯一的答案。</li>\n</ul>\n<p><strong>示例 1</strong><br>\n输入: s = "ADOBECODEBANC", t = "ABC"<br>\n输出: "BANC"<br>\n解释: 最小覆盖子串 "BANC" 包含来自字符串 t 的 \'A\'、\'B\' 和 \'C\'。</p>',readingTime:{minutes:1.92,words:577},title:"76, 最小覆盖子串",icon:"discover",order:13,type:"article"}}],["/zh/algorithm/leetcode/array/844_backspace_string_compare.html",{loader:()=>r.e(28301).then(r.bind(r,45243)),meta:{date:16967232e5,category:["array"],tag:["easy","array","two pointers","stack","string"],sticky:!0,excerpt:'<h2>一、题目描述</h2>\n<p>给定 s 和 t 两个字符串，当它们分别被输入到空白的文本编辑器后，如果两者相等，返回 true 。# 代表退格字符。</p>\n<p>注意：如果对空文本输入退格字符，文本继续为空。</p>\n<p><strong>示例 1:</strong><br>\n输入: s = "ab#c", t = "ad#c"<br>\n输出: true<br>\n解释: s 和 t 都会变成 "ac"。</p>\n<p><strong>示例 2:</strong><br>\n输入: s = "ab##", t = "c#d#"<br>\n输出: true<br>\n解释: s 和 t 都会变成 ""。</p>',readingTime:{minutes:2.04,words:613},title:"844, 比较含退格的字符串",icon:"discover",order:9,type:"article"}}],["/zh/algorithm/leetcode/array/904_fruit_into_baskets.html",{loader:()=>r.e(85212).then(r.bind(r,6843)),meta:{date:16971552e5,category:["array"],tag:["medium","array","hash table","sliding window"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>你正在探访一家农场，农场从左到右种植了一排果树。这些树用一个整数数组fruits表示，其中fruits[i]是第i棵树上的水果种类。</p>\n<p>你想要尽可能多地收集水果。然而，农场的主人设定了一些严格的规矩，你必须按照要求采摘水果：</p>\n<ul>\n<li>你只有两个篮子，并且每个篮子只能装单一类型的水果。每个篮子能够装的水果总量没有限制。</li>\n<li>你可以选择任意一棵树开始采摘，你必须从每棵树（包括开始采摘的树）上恰好摘一个水果 。采摘的水果应当符合篮子中的水果类型。每采摘一次，你将会向右移动到下一棵树，并继续采摘。</li>\n<li>一旦你走到某棵树前，但水果不符合篮子的水果类型，那么就必须停止采摘。</li>\n</ul>",readingTime:{minutes:2.48,words:743},title:"904, 水果成篮",icon:"discover",order:12,type:"article"}}],["/zh/algorithm/leetcode/array/977_squares_of_a_sorted_array.html",{loader:()=>r.e(20809).then(r.bind(r,99808)),meta:{date:16968096e5,category:["array"],tag:["easy","array","two pointers","sorting"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。</p>\n<p><strong>示例 1:</strong><br>\n输入: nums = [-4,-1,0,3,10]<br>\n输出: [0,1,9,16,100]<br>\n解释: 平方后，数组变为 [16,1,0,9,100]；排序后，数组变为 [0,1,9,16,100]</p>\n<p><strong>示例 2:</strong><br>\n输入: nums = [-7,-3,2,3,11]<br>\n输出: [4,9,9,49,121]</p>",readingTime:{minutes:1.89,words:568},title:"977, 有序数组的平方",icon:"discover",order:10,type:"article"}}],["/zh/algorithm/leetcode/array/",{loader:()=>r.e(71841).then(r.bind(r,18705)),meta:{date:16957728e5,category:["leetcode"],tag:["array"],sticky:!1,excerpt:'<h2>数组的理论知识</h2>\n<p>当给数组分配内存时，数组中的各个元素是相邻的，所以可以通过下标来访问其中的某个元素。<br>\n</p>\n<div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>let nums = [10, 11, 12, 13, 14, 15];</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>Array:   10  11  12  13  14  15</span></span>\n<span class="line"><span>index:    0   1   2   3   4   5</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>assert_eq(nums[0], 10);</span></span>\n<span class="line"><span>assert_eq(nums[5], 15);</span></span>\n<span class="line"><span>assert_eq(nums[6], xx); // ERROR，index out of bounds</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:.92,words:275},title:"数组",icon:"discover",order:1,type:"article"}}],["/zh/algorithm/leetcode/backtracking/131_palindrome_partitioning.html",{loader:()=>r.e(73940).then(r.bind(r,88775)),meta:{date:1706832e6,category:["backtracking"],tag:["medium","string","dynamic programming","backtracking"],sticky:!0,excerpt:'<h2>一、题目描述</h2>\n<p>给你一个字符串<code>s</code>，请你将<code>s</code>分割成一些子串，使每个子串都是<strong>回文串</strong>。返回<code>s</code>所有可能的分割方案。</p>\n<p><strong>回文串</strong>是正着读和反着读都一样的字符串。</p>\n<p><strong>示例 1</strong><br>\n输入: s = "aab"<br>\n输出: [["a", "a", "b"],["aa", "b"]]</p>\n<p><strong>示例 2</strong><br>\n输入: s = "a"<br>\n输出: [["a"]]</p>',readingTime:{minutes:2.11,words:634},title:"131, 分割回文串",icon:"discover",order:6,type:"article"}}],["/zh/algorithm/leetcode/backtracking/17_letter_combinations_of_a_phone_number.html",{loader:()=>r.e(96847).then(r.bind(r,13923)),meta:{date:17064e8,category:["Backtracking"],tag:["medium","hash table","string","backtracking"],sticky:!0,excerpt:'<h2>一、题目描述</h2>\n<p>给定一个仅包含数字<code>2-9</code>的字符串，返回所有它能表示的字母组合。答案可以按<strong>任意顺序</strong>返回。</p>\n<p>给出数字到字母的映射如下（与电话按键相同）。注意<code>1</code>不对应任何字母。</p>\n<figure><figcaption></figcaption></figure>\n<p><strong>示例 1</strong><br>\n输入: digits = "23"<br>\n输出: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"]</p>',readingTime:{minutes:1.33,words:398},title:"17, 电话号码的字母组合",icon:"discover",order:2,type:"article"}}],["/zh/algorithm/leetcode/backtracking/216_combination_sum_iii.html",{loader:()=>r.e(2209).then(r.bind(r,52013)),meta:{date:17067456e5,category:["backtracking"],tag:["medium","array","backtracking"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>找出所有相加之和为<code>n</code>的<code>k</code>个数的组合，且满足下列条件：</p>\n<ul>\n<li>只使用数字<code>1</code>到<code>9</code></li>\n<li>每个数字<strong>最多使用一次</strong></li>\n</ul>\n<p>返回<em>所有可能的有效组合的列表</em>。该列表不能包含相同的组合两次，组合可以以任何顺序返回。</p>\n<p><strong>示例 1</strong><br>\n输入: k = 3, n = 7<br>\n输出: [[1, 2, 4]]<br>\n解释: <code>1 + 2 + 4 = 7</code>，没有其他符合的组合了。</p>",readingTime:{minutes:2.11,words:632},title:"216, 组合总和III",icon:"discover",order:5,type:"article"}}],["/zh/algorithm/leetcode/backtracking/332_reconstruct_itinerary.html",{loader:()=>r.e(95181).then(r.bind(r,95658)),meta:{date:17083872e5,category:["backtracking"],tag:["medium","depth first search","graph","backtracking"],sticky:!0,excerpt:'<h2>一、题目描述</h2>\n<p>给你一份航线列表<code>tickets</code>，其中<code>tickets[i] = [fromi, toi]</code>表示飞机出发和降落的机场地点。请你对该行程进行重新规划排序。</p>\n<p>所有这些机票都属于一个从<code>JFK</code>（肯尼迪国际机场）出发的先生，所以该行程必须从<code>JFK</code>开始。如果存在多种有效的行程，请你按字典排序返回最小的行程组合。</p>\n<ul>\n<li>例如，行程<code>["JFK", "LGA"]</code>与<code>["JFK", "LGB"]</code>相比就更小，排序更靠前。</li>\n</ul>',readingTime:{minutes:2.64,words:793},title:"332, 重新安排行程",icon:"discover",order:17,type:"article"}}],["/zh/algorithm/leetcode/backtracking/36_valid_sudoku.html",{loader:()=>r.e(73782).then(r.bind(r,74900)),meta:{date:17079552e5,category:["backtracking"],tag:["medium","array","hash table","matrix"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>请你判断一个<code>9 x 9</code>的数独是否有效。只需要<strong>根据以下规则</strong>，验证已经填入的数字是否有效即可。</p>\n<ol>\n<li>数字<code>1-9</code>在每一行只能出现一次。</li>\n<li>数字<code>1-9</code>在每一列只能出现一次。</li>\n<li>数字<code>1-9</code>在每一个以粗实线分隔的<code>3x3</code>宫内只能出现一次。（请参考示例图）</li>\n</ol>\n<p><strong>注意</strong>：</p>\n<ul>\n<li>一个有效的数独（部分已被填充）不一定是可解的。</li>\n<li>只需要根据以上规则，验证已经填入的数字是否有效即可。</li>\n<li>空白格用<code>'.'</code>表示。</li>\n</ul>",readingTime:{minutes:3.27,words:980},title:"36, 有效的数独",icon:"discover",order:14,type:"article"}}],["/zh/algorithm/leetcode/backtracking/37_sudoku_solver.html",{loader:()=>r.e(21804).then(r.bind(r,49606)),meta:{date:1708128e6,category:["backtracking"],tag:["hard","array","hash table","matrix","backtracking"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>编写一个程序，通过填充空格来解决数独问题。</p>\n<p>数独的解法需<strong>遵循如下规则</strong>：</p>\n<ol>\n<li>数字<code>1-9</code>在每一行只能出现一次。</li>\n<li>数字<code>1-9</code>在每一列只能出现一次。</li>\n<li>数字<code>1-9</code>在每一个以粗实线分隔的<code>3x3</code>宫内只能出现一次。（请参考示例图）</li>\n</ol>\n<p>数独部分空格内已填入了数字，空白格用<code>'.'</code>表示。</p>\n<p><strong>示例 1</strong><br>\n<br>\n输入: board =</p>",readingTime:{minutes:4.41,words:1322},title:"37, 解数独",icon:"discover",order:15,type:"article"}}],["/zh/algorithm/leetcode/backtracking/39_combination_sum.html",{loader:()=>r.e(29940).then(r.bind(r,38730)),meta:{date:17064864e5,category:["backtracking"],tag:["medium","array","backtracking"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给你一个<strong>无重复元素</strong>的整数数组<code>candidates</code>和一个目标整数<code>target</code>，找出<code>candidates</code>中可以使数字和为目标数<code>target</code>的所有<strong>不同组合</strong>，并以列表形式返回。你可以按<strong>任意顺序</strong>返回这些组合。</p>\n<p><code>candidates</code>中的<strong>同一个</strong>数字可以<strong>无限制重复被选取</strong>。如果至少一个数字的被选数量不同，则两种组合是不同的。</p>",readingTime:{minutes:2.13,words:638},title:"39, 组合总和",icon:"discover",order:3,type:"article"}}],["/zh/algorithm/leetcode/backtracking/40_combination_sum_ii.html",{loader:()=>r.e(63633).then(r.bind(r,2150)),meta:{date:17065728e5,category:["backtracking"],tag:["medium","array","backtracking"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给定一个候选人编号的集合<code>candidates</code>和一个目标数<code>target</code>，找出<code>candidates</code>中所有可以使数字和为<code>target</code>的组合。</p>\n<p><code>candidates</code>中的每个数字在每个组合中只能使用<strong>一次</strong>。</p>\n<p><strong>注意</strong>：解集不能包含重复的组合。</p>\n<p><strong>示例 1</strong><br>\n输入: candidates = [10, 1, 2, 7, 6, 1, 5], target = 8<br>\n输出:</p>",readingTime:{minutes:2.19,words:656},title:"40, 组合总和II",icon:"discover",order:4,type:"article"}}],["/zh/algorithm/leetcode/backtracking/46_permutations.html",{loader:()=>r.e(35624).then(r.bind(r,41547)),meta:{date:1707264e6,category:["backtracking"],tag:["medium","array","backtracking"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给定一个不含重复数字的数组<code>nums</code>，返回其<em>所有可能的全排列</em>。你可以<strong>按任意顺序</strong>返回答案。</p>\n<p><strong>示例 1</strong><br>\n输入: nums = [1, 2, 3]<br>\n输出: [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]</p>\n<p><strong>示例 2</strong><br>\n输入: nums = [0, 1]<br>\n输出: [[0, 1], [1, 0]]</p>",readingTime:{minutes:1.59,words:477},title:"46, 全排列",icon:"discover",order:10,type:"article"}}],["/zh/algorithm/leetcode/backtracking/47_permutations_ii.html",{loader:()=>r.e(43130).then(r.bind(r,35365)),meta:{date:17075232e5,category:["backtracking"],tag:["medium","array","backtracking"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给定一个可包含重复数字的序列<code>nums</code>，按<strong>任意顺序</strong>返回所有不重复的全排列。</p>\n<p><strong>示例 1</strong><br>\n输入: nums = [1, 1, 2]<br>\n输出: [[1, 1, 2], [1, 2, 1], [2, 1, 1]]</p>\n<p><strong>示例 2</strong><br>\n输入: nums = [1, 2, 3]<br>\n输出: [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]</p>",readingTime:{minutes:1.66,words:498},title:"47, 全排列II",icon:"discover",order:11,type:"article"}}],["/zh/algorithm/leetcode/backtracking/491_non_decreasing_subsequences.html",{loader:()=>r.e(37107).then(r.bind(r,60724)),meta:{date:17083008e5,category:["backtracking"],tag:["medium","array","hash table","bit manipulation","backtracking"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给你一个整数数组<code>nums</code>，找出并返回所有该数组中不同的递增子序列，递增子序列中<strong>至少有两个元素</strong>。你可以按<strong>任意顺序</strong>返回答案。</p>\n<p>数组中可能含有重复元素，如出现两个整数相等，也可以视作递增序列的一种特殊情况。</p>\n<p><strong>示例 1</strong><br>\n输入: nums = [4, 6, 7, 7]<br>\n输出: [[4, 6], [4, 6, 7], [4, 6, 7, 7], [4, 7], [4, 7, 7], [6, 7], [6, 7, 7], [7, 7]]</p>",readingTime:{minutes:1.31,words:392},title:"491, 递增子序列",icon:"discover",order:16,type:"article"}}],["/zh/algorithm/leetcode/backtracking/51_n_queens.html",{loader:()=>r.e(4717).then(r.bind(r,54200)),meta:{date:17076096e5,category:["backtracking"],tag:["hard","array","backtracking"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>按照国际象棋的规则，皇后可以攻击与之处在同一行或同一列或同一斜线上的棋子。</p>\n<p><code>n</code><strong>皇后问题</strong>研究的是如何将<code>n</code>个皇后放置在<code>n×n</code>的棋盘上，并且使皇后彼此之间不能相互攻击。</p>\n<p>给你一个整数<code>n</code>，返回所有不同的<code>n</code><strong>皇后问题</strong>的解决方案。</p>\n<p>每一种解法包含一个不同的<code>n</code><strong>皇后问题</strong>的棋子放置方案，该方案中<code>'Q'</code>和<code>'.'</code>分别代表了皇后和空位。</p>",readingTime:{minutes:1.71,words:513},title:"51, N皇后",icon:"discover",order:12,type:"article"}}],["/zh/algorithm/leetcode/backtracking/52_n_queens_ii.html",{loader:()=>r.e(80367).then(r.bind(r,38840)),meta:{date:1707696e6,category:["backtracking"],tag:["hard","backtracking"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p><code>n</code><strong>皇后问题</strong>研究的是如何将<code>n</code>个皇后放置在<code>n×n</code>的棋盘上，并且使皇后彼此之间不能相互攻击。</p>\n<p>给你一个整数<code>n</code>，返回所有不同的<code>n</code><strong>皇后问题</strong>的解决方案的数量。</p>\n<p><strong>示例 1</strong><br>\n<br>\n输入: n = 4<br>\n输出: 2<br>\n解释: 如上图所示，<code>4</code>皇后问题存在两个不同的解法。</p>",readingTime:{minutes:1.2,words:361},title:"52, N皇后II",icon:"discover",order:13,type:"article"}}],["/zh/algorithm/leetcode/backtracking/77_combinations.html",{loader:()=>r.e(61257).then(r.bind(r,85388)),meta:{date:17062272e5,category:["Backtracking"],tag:["medium","backtracking"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给定两个整数<code>n</code>和<code>k</code>，返回范围<code>[1, n]</code>中所有可能的<code>k</code>个数的组合。</p>\n<p>你可以按<strong>任何顺序</strong>返回答案。</p>\n<p><strong>示例 1</strong><br>\n输入: n = 4, k = 2<br>\n输出: [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]</p>\n<p><strong>示例 2</strong><br>\n输入: n = 1, k = 1<br>\n输出: [[1]]</p>",readingTime:{minutes:2.11,words:634},title:"77, 组合",icon:"discover",order:1,type:"article"}}],["/zh/algorithm/leetcode/backtracking/78_subsets.html",{loader:()=>r.e(49875).then(r.bind(r,29854)),meta:{date:17070912e5,category:["backtracking"],tag:["medium","array","backtracking","bit manipulation"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给你一个整数数组<code>nums</code>，数组中的元素<strong>互不相同</strong>。返回该数组所有可能的子集（幂集）。</p>\n<p>解集<strong>不能</strong>包含重复的子集。你可以按<strong>任意顺序</strong>返回解集。</p>\n<p><strong>示例 1</strong><br>\n输入: nums = [1, 2, 3]<br>\n输出: [[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]]</p>\n<p><strong>示例 2</strong><br>\n输入: nums = [0]<br>\n输出: [[], [0]]</p>",readingTime:{minutes:1.31,words:394},title:"78, 子集",icon:"discover",order:8,type:"article"}}],["/zh/algorithm/leetcode/backtracking/90_subsets_ii.html",{loader:()=>r.e(57858).then(r.bind(r,51986)),meta:{date:17071776e5,category:["backtracking"],tag:["medium","array","backtracking","bit manipulation"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给你一个整数数组<code>nums</code>，其中可能包含重复元素，请你返回该数组所有可能的子集（幂集）。</p>\n<p>解集<strong>不能</strong>包含重复的子集。返回的解集中，子集可以按<strong>任意顺序</strong>排列。</p>\n<p><strong>示例 1</strong><br>\n输入: nums = [1, 2, 2]<br>\n输出: [[], [1], [1, 2], [1, 2, 2], [2], [2, 2]]</p>\n<p><strong>示例 2</strong><br>\n输入: nums = [0]<br>\n输出: [[], [0]]</p>",readingTime:{minutes:1.49,words:447},title:"90, 子集II",icon:"discover",order:9,type:"article"}}],["/zh/algorithm/leetcode/backtracking/93_restore_ip_addresses.html",{loader:()=>r.e(71770).then(r.bind(r,4573)),meta:{date:17070048e5,category:["backtracking"],tag:["medium","string","backtracking"],sticky:!0,excerpt:'<h2>一、题目描述</h2>\n<p><strong>有效IP地址</strong>正好由四个整数（每个整数位于<code>0</code>到<code>255</code>之间组成，且不能含有前导<code>0</code>），整数之间用<code>\'.\'</code>分隔。</p>\n<ul>\n<li>例如：<code>"0.1.2.201"</code>和<code>"192.168.1.1"</code>是<strong>有效</strong>IP地址，但是<code>"0.011.255.245"</code>、<code>"192.168.1.312"</code>和<code>"192.168@1.1"</code>是<strong>无效</strong>IP地址。</li>\n</ul>',readingTime:{minutes:1.44,words:432},title:"93, 复原IP地址",icon:"discover",order:7,type:"article"}}],["/zh/algorithm/leetcode/backtracking/",{loader:()=>r.e(95210).then(r.bind(r,85702)),meta:{date:17061408e5,category:["leetcode"],tag:["backtracking"],sticky:!1,excerpt:"<h2>回溯</h2>\n<p>回溯算法实际上是一个类似枚举的搜索尝试过程，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就<strong>回溯</strong>返回，尝试别的路径。</p>\n<p>回溯是递归的副产品，只要有递归就会有回溯。</p>\n<p>回溯法并不是什么⾼效的算法，如果想让回溯法⾼效⼀些，可以加⼀些剪枝的操作，但也改不了回溯法就是穷举的本质。</p>\n<p>回溯法解决的问题可以概括如下：</p>\n<ul>\n<li>组合问题：N个数⾥⾯按⼀定规则找出k个数的集合</li>\n<li>切割问题：⼀个字符串按⼀定规则有⼏种切割⽅式</li>\n<li>⼦集问题：⼀个N个数的集合⾥有多少符合条件的⼦集</li>\n<li>排列问题：N个数按⼀定规则全排列，有⼏种排列⽅式</li>\n<li>棋盘问题：N皇后，解数独等等</li>\n</ul>",readingTime:{minutes:1.52,words:457},title:"回溯",icon:"discover",order:8,type:"article"}}],["/zh/algorithm/leetcode/dp/1137_nth_tribonacci_number.html",{loader:()=>r.e(13340).then(r.bind(r,65003)),meta:{date:17119296e5,category:["dynamic programming"],tag:["easy","math","dynamic programming","memoization"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>泰波那契序列<code>Tn</code>定义如下：<br>\nT0 = 0, T1 = 1, T2 = 1, 且在 n &gt;= 0 的条件下 Tn+3 = Tn + Tn+1 + Tn+2</p>\n<p>给你整数<code>n</code>，请返回第<code>n</code>个泰波那契数<code>Tn</code>的值。</p>\n<p><strong>示例 1</strong><br>\n输入: n = 4<br>\n输出: 4<br>\n解释:<br>\nT_3 = 0 + 1 + 1 = 2<br>\nT_4 = 1 + 1 + 2 = 4</p>\n<p><strong>示例 2</strong><br>\n输入: n = 25<br>\n输出: 1389537</p>",readingTime:{minutes:3.42,words:1027},title:"1137, 第N个泰波那契数",icon:"discover",order:3,type:"article"}}],["/zh/algorithm/leetcode/dp/198_house_robber.html",{loader:()=>r.e(16068).then(r.bind(r,15605)),meta:{date:1712448e6,category:["dynamic programming"],tag:["medium","array","dynamic programming"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，<strong>如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警</strong>。</p>\n<p>给定一个代表每个房屋存放金额的非负整数数组，计算你<strong>不触动警报装置的情况下</strong>，一夜之内能够偷窃到的最高金额。</p>\n<p><strong>示例 1</strong><br>\n输入: [1, 2, 3, 1]<br>\n输出: 4<br>\n解释: 偷窃<code>1</code>号房屋(金额 = 1)，然后偷窃<code>3</code>号房屋(金额 = 3)。<br>\n偷窃到的<code>最高金额 = 1 + 3 = 4</code>。</p>",readingTime:{minutes:2.12,words:635},title:"198, 打家劫舍",icon:"discover",order:6,type:"article"}}],["/zh/algorithm/leetcode/dp/343_integer_break.html",{loader:()=>r.e(6281).then(r.bind(r,28818)),meta:{date:17131392e5,category:["dynamic programming"],tag:["medium","math","dynamic programming"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给定一个正整数<code>n</code>，将其拆分为<code>k</code>个<strong>正整数</strong>的和（<code>k &gt;= 2</code>），并使这些整数的乘积最大化。</p>\n<p>返回<em>你可以获得的最大乘积</em>。</p>\n<p><strong>示例 1</strong><br>\n输入: n = 2<br>\n输出: 1<br>\n解释: 2 = 1 + 1, 1 × 1 = 1。</p>\n<p><strong>示例 2</strong><br>\n输入: n = 10<br>\n输出: 36<br>\n解释: 10 = 3 + 3 + 4, 3 ×&nbsp;3 ×&nbsp;4 = 36。</p>",readingTime:{minutes:2.48,words:744},title:"343, 整数拆分",icon:"discover",order:7,type:"article"}}],["/zh/algorithm/leetcode/dp/509_fibonacci_number.html",{loader:()=>r.e(23943).then(r.bind(r,67359)),meta:{date:17117568e5,category:["dynamic programming"],tag:["easy","recursion","memoization","math","dynamic programming"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p><strong>斐波那契数</strong>（通常用<code>F(n)</code>表示）形成的序列称为<strong>斐波那契数列</strong>。该数列由<code>0</code>和<code>1</code>开始，后面的每一项数字都是前面两项数字的和。也就是：</p>\n<ul>\n<li>F(0) = 0，F(1)&nbsp;= 1</li>\n<li>F(n) = F(n - 1) + F(n - 2)，其中 n &gt; 1</li>\n</ul>\n<p>给定<code>n</code>，请计算<code>F(n)</code>。</p>\n<p><strong>示例 1</strong><br>\n输入: n = 2<br>\n输出: 1<br>\n解释: F(2) = F(1) + F(0) = 1 + 0 = 1</p>",readingTime:{minutes:3.87,words:1161},title:"509, 斐波那契数",icon:"discover",order:1,type:"article"}}],["/zh/algorithm/leetcode/dp/62_unique_paths.html",{loader:()=>r.e(36445).then(r.bind(r,86632)),meta:{date:17132256e5,category:["dynamic programming"],tag:["medium","math","dynamic programming","combinatorics"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>一个机器人位于一个<code>m x n</code>网格的左上角（起始点在下图中标记为<code>Start</code>）。</p>\n<p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为<code>Finish</code>）。</p>\n<p>问总共有多少条不同的路径？</p>\n<p><strong>示例 1</strong><br>\n<br>\n输入: m = 3, n = 7<br>\n输出: 28</p>\n<p><strong>示例 2</strong><br>\n输入: m = 3, n = 2<br>\n输出: 3<br>\n解释: 从左上角开始，总共有 3 条路径可以到达右下角。</p>",readingTime:{minutes:2.36,words:709},title:"62, 不同路径",icon:"discover",order:8,type:"article"}}],["/zh/algorithm/leetcode/dp/70_climbing_stairs.html",{loader:()=>r.e(43192).then(r.bind(r,70988)),meta:{date:17118432e5,category:["dynamic programming"],tag:["easy","math","dynamic programming","memoization"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>假设你正在爬楼梯。需要<code>n</code>阶你才能到达楼顶。</p>\n<p>每次你可以爬<code>1</code>或<code>2</code>个台阶。你有多少种不同的方法可以爬到楼顶呢？</p>\n<p><strong>示例 1</strong><br>\n输入: n = 2<br>\n输出: 2<br>\n解释: 有两种方法可以爬到楼顶。</p>\n<ol>\n<li>1 阶 + 1 阶</li>\n<li>2 阶</li>\n</ol>\n<p><strong>示例 2</strong><br>\n输入: n = 3<br>\n输出: 3<br>\n解释: 有三种方法可以爬到楼顶。</p>",readingTime:{minutes:2.91,words:874},title:"70, 爬楼梯",icon:"discover",order:2,type:"article"}}],["/zh/algorithm/leetcode/dp/740_delete_and_earn.html",{loader:()=>r.e(41302).then(r.bind(r,31373)),meta:{date:17121888e5,category:["dynamic programming"],tag:["medium","array","hash table","dynamic programming"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给你一个整数数组<code>nums</code>，你可以对它进行一些操作。</p>\n<p>每次操作中，选择任意一个<code>nums[i]</code>，删除它并获得<code>nums[i]</code>的点数。之后，你必须删除<strong>所有</strong>等于<code>nums[i] - 1</code>和<code>nums[i] + 1</code>的元素。</p>\n<p>开始你拥有<code>0</code>个点数。返回你能通过这些操作获得的最大点数。</p>\n<p><strong>示例 1</strong><br>\n输入: nums = [3, 4, 2]<br>\n输出: 6<br>\n解释:<br>\n删除<code>4</code>获得<code>4</code>个点数，因此<code>3</code>也被删除。<br>\n之后，删除<code>2</code>获得<code>2</code>个点数。总共获得<code>6</code>个点数。</p>",readingTime:{minutes:2.75,words:824},title:"740, 删除并获得点数",icon:"discover",order:5,type:"article"}}],["/zh/algorithm/leetcode/dp/746_min_cost_climbing_stairs.html",{loader:()=>r.e(84811).then(r.bind(r,16137)),meta:{date:17121024e5,category:["dynamic programming"],tag:["easy","array","dynamic programming"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给你一个整数数组<code>cost</code>，其中<code>cost[i]</code>是从楼梯第<code>i</code>个台阶向上爬需要支付的费用。一旦你支付此费用，即可选择向上爬一个或者两个台阶。</p>\n<p>你可以选择从下标为<code>0</code>或下标为<code>1</code>的台阶开始爬楼梯。</p>\n<p>请你计算并返回达到楼梯顶部的最低花费。</p>\n<p><strong>示例 1</strong><br>\n输入: cost = [10, 15, 20]<br>\n输出: 15<br>\n解释: 你将从下标为<code>1</code>的台阶开始。</p>",readingTime:{minutes:2.13,words:639},title:"746, 使用最小花费爬楼梯",icon:"discover",order:4,type:"article"}}],["/zh/algorithm/leetcode/dp/",{loader:()=>r.e(24580).then(r.bind(r,56455)),meta:{date:1711584e6,category:["leetcode"],tag:["dynamic programming"],sticky:!1,excerpt:"<h2>动态规划</h2>\n<h3>动态规划概述</h3>\n<p><strong>动态规划</strong>(dynamic programming)是运筹学的一个分支，是求解决策过程(decision process)最优化的数学方法。</p>\n<p>在现实生活中，有一类活动的过程，由于它的特殊性，可将过程分解成若干个互相联系的阶段，在它的每一个阶段都需要作出决策，从而使整个过程达到最好的活动效果。因此各个阶段决策的选取不能任意确定，它依赖于当前面临的状态，又影响以后的发展。当各个阶段决策确定后，就组成一个决策序列，因而也就确定了整个过程的一条活动路线。这种把一个问题看做是一个前后关联具有链状结构的多阶段过程就称为<strong>多阶段决策过程</strong>，这种问题称为<strong>多阶段决策最优化问题</strong>。</p>",readingTime:{minutes:4.54,words:1363},title:"动态规划",icon:"discover",order:10,type:"article"}}],["/zh/algorithm/leetcode/graph/",{loader:()=>r.e(76672).then(r.bind(r,95372)),meta:{date:16957728e5,category:["leetcode"],tag:["graph"],sticky:!0,readingTime:{minutes:.06,words:17},title:"图",icon:"discover",order:12,type:"article"}}],["/zh/algorithm/leetcode/binary_tree/100_same_tree.html",{loader:()=>r.e(28813).then(r.bind(r,9976)),meta:{date:17058816e5,category:["binary tree"],tag:["easy","binary tree","depth first search","breadth first search"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给你两棵二叉树的根节点<code>p</code>和<code>q</code>，编写一个函数来检验这两棵树是否相同。</p>\n<p>如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。</p>\n<p><strong>示例 1</strong><br>\n<br>\n输入: p = [1, 2, 3], q = [1, 2, 3]<br>\n输出: true</p>\n<p><strong>示例 2</strong><br>\n<br>\n输入: p = [1, 2], q = [1, null, 2]<br>\n输出: false</p>\n<p><strong>示例 3</strong><br>\n<br>\n输入: p = [1, 2, 1], q = [1, 1, 2]<br>\n输出: false</p>",readingTime:{minutes:2.34,words:703},title:"100, 相同的树",icon:"discover",order:39,type:"article"}}],["/zh/algorithm/leetcode/binary_tree/101_symmetric_tree.html",{loader:()=>r.e(82849).then(r.bind(r,13987)),meta:{date:17030304e5,category:["binary tree"],tag:["easy","binary tree","depth first search","breadth first search"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给你一个二叉树的根节点<code>root</code>，检查它是否轴对称。</p>\n<p><strong>示例 1</strong><br>\n<br>\n输入: root = [1, 2, 2, 3, 4, 4, 3]<br>\n输出: true</p>\n<p><strong>示例 2</strong><br>\n<br>\n输入: root = [1, 2, 2, null, 3, null, 3]<br>\n输出: false</p>\n<p><strong>提示</strong></p>\n<ul>\n<li>树中节点数目在范围<code>[1, 1000]</code>内</li>\n<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>",readingTime:{minutes:2.41,words:723},title:"101, 对称二叉树",icon:"discover",order:12,type:"article"}}],["/zh/algorithm/leetcode/binary_tree/102_binary_tree_level_order_traversal.html",{loader:()=>r.e(42205).then(r.bind(r,95457)),meta:{date:17022528e5,category:["binary tree"],tag:["medium","queue","binary tree","breadth first search"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给你二叉树的根节点<code>root</code>，返回其节点值的<strong>层序遍历</strong>。（即逐层地，从左到右访问所有节点）。</p>\n<p><strong>示例 1</strong><br>\n<br>\n输入: root = [3, 9, 20, null, null, 15, 7]<br>\n输出: [[3], [9, 20], [15, 7]]</p>\n<p><strong>示例 2</strong><br>\n输入: root = [1]<br>\n输出: [[1]]</p>\n<p><strong>示例 3</strong><br>\n输入: root = []<br>\n输出: []</p>",readingTime:{minutes:2.29,words:687},title:"102, 二叉树的层序遍历",icon:"discover",order:4,type:"article"}}],["/zh/algorithm/leetcode/binary_tree/104_maximum_depth_of_binary_tree.html",{loader:()=>r.e(17530).then(r.bind(r,88462)),meta:{date:17031168e5,category:["binary tree"],tag:["easy","binary tree","depth first search","breadth first search"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给定一个二叉树<code>root</code>，返回其最大深度。</p>\n<p>二叉树的<strong>最大深度</strong>是指从根节点到最远叶子节点的最长路径上的节点数。</p>\n<p><strong>示例 1</strong><br>\n<br>\n输入: root = [3, 9, 20, null, null, 15, 7]<br>\n输出: 3</p>\n<p><strong>示例 2</strong><br>\n输入: root = [1, null, 2]<br>\n输出: 2</p>\n<p><strong>提示</strong></p>\n<ul>\n<li>树中节点的数量在<code>[0, 10⁴]</code>区间内。</li>\n<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>",readingTime:{minutes:1.88,words:565},title:"104, 二叉树的最大深度",icon:"discover",order:13,type:"article"}}],["/zh/algorithm/leetcode/binary_tree/105_construct_binary_tree_from_preorder_and_inorder_traversal.html",{loader:()=>r.e(52621).then(r.bind(r,25765)),meta:{date:17041536e5,category:["binary tree"],tag:["medium","array","hash table","divide and conquer","binary tree"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给定两个整数数组<code>preorder</code>和<code>inorder</code>，其中<code>preorder</code>是二叉树的<strong>先序遍历</strong>，<code>inorder</code>是同一棵树的<strong>中序遍历</strong>，请构造二叉树并返回其根节点。</p>\n<p><strong>示例 1</strong><br>\n<br>\n输入: preorder = [3, 9, 20, 15, 7], inorder = [9, 3, 15, 20, 7]<br>\n输出: [3, 9, 20, null, null, 15, 7]</p>",readingTime:{minutes:3.39,words:1018},title:"105, 从中序与先序遍历序列构造二叉树",icon:"discover",order:23,type:"article"}}],["/zh/algorithm/leetcode/binary_tree/106_construct_binary_tree_from_post_order_and_in_order_traversal.html",{loader:()=>r.e(69257).then(r.bind(r,89382)),meta:{date:170424e7,category:["binary tree"],tag:["medium","array","hash table","divide and conquer","binary tree"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给定两个整数数组<code>inorder</code>和<code>postorder</code>，其中<code>inorder</code>是二叉树的中序遍历，<code>postorder</code>是同一棵树的后序遍历，请你构造并返回这颗<em>二叉树</em>。</p>\n<p><strong>示例 1</strong><br>\n<br>\n输入: inorder = [9, 3, 15, 20, 7], postorder = [9, 15, 7, 20, 3]<br>\n输出: [3, 9, 20, null, null, 15, 7]</p>",readingTime:{minutes:3.39,words:1016},title:"106, 从中序与后序遍历序列构造二叉树",icon:"discover",order:24,type:"article"}}],["/zh/algorithm/leetcode/binary_tree/107_binary_tree_level_order_traversal_ii.html",{loader:()=>r.e(1455).then(r.bind(r,99636)),meta:{date:17023392e5,category:["binary tree"],tag:["medium","queue","binary tree","breadth first search"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给你二叉树的根节点<code>root</code>，返回其节点值<strong>自底向上的层序遍历</strong>。（即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）</p>\n<p><strong>示例 1</strong><br>\n<br>\n输入: root = [3, 9, 20, null, null, 15, 7]<br>\n输出: [[15, 7], [9, 20], [3]]</p>\n<p><strong>示例 2</strong><br>\n输入: root = [1]<br>\n输出: [[1]]</p>\n<p><strong>示例 3</strong><br>\n输入: root = []<br>\n输出: []</p>",readingTime:{minutes:2.34,words:703},title:"107, 二叉树的层序遍历II",icon:"discover",order:5,type:"article"}}],["/zh/algorithm/leetcode/binary_tree/108_convert_sorted_array_to_binary_search_tree.html",{loader:()=>r.e(77893).then(r.bind(r,65704)),meta:{date:17056224e5,category:["binary tree"],tag:["easy","tree","binary tree","binary search tree","array","divide and conquer"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给你一个整数数组<code>nums</code>，其中元素已经按<strong>升序</strong>排列，请你将其转换为一棵<strong>高度平衡</strong>二叉搜索树。</p>\n<p><strong>高度平衡</strong>二叉树是一棵满足「每个节点的左右两个子树的高度差的绝对值不超过<code>1</code>」的二叉树。</p>\n<p><strong>示例 1</strong><br>\n<br>\n输入: nums = [-10, -3, 0, 5, 9]<br>\n输出: [0, -3, 9, -10, null, 5]<br>\n解释: [0, -10, 5, null, -3, null, 9] 也将被视为正确答案：<br>\n</p>",readingTime:{minutes:3.41,words:1024},title:"108, 将有序数组转换为二叉搜索树",icon:"discover",order:37,type:"article"}}],["/zh/algorithm/leetcode/binary_tree/109_convert_sorted_list_to_binary_search_tree.html",{loader:()=>r.e(91429).then(r.bind(r,8490)),meta:{date:17057088e5,category:["binary tree"],tag:["medium","linked list","binary tree","binary search tree","divide and conquer"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给定一个单链表的头节点<code>head</code>，其中的元素<strong>按升序排序</strong>，将其转换为高度平衡的二叉搜索树。</p>\n<p>本题中，一个高度平衡二叉树是指一个二叉树<em>每个节点</em>的左右两个子树的高度差不超过<code>1</code>。</p>\n<p><strong>示例 1</strong><br>\n<br>\n输入: head = [-10, -3, 0, 5, 9]<br>\n输出: [0, -3, 9, -10, null, 5]<br>\n解释: 一个可能的答案是[0，-3, 9，-10, null, 5]，它表示所示的高度平衡的二叉搜索树。</p>",readingTime:{minutes:2.8,words:841},title:"109, 将有序列表转换为二叉搜索树",icon:"discover",order:38,type:"article"}}],["/zh/algorithm/leetcode/binary_tree/110_balanced_binary_tree.html",{loader:()=>r.e(79534).then(r.bind(r,22601)),meta:{date:17034624e5,category:["binary tree"],tag:["easy","binary tree","depth first search"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给定一个二叉树，判断它是否是高度平衡的二叉树。</p>\n<p>本题中，一棵高度平衡二叉树定义为：</p>\n<blockquote>\n<p>一个二叉树<em>每个节点</em>的左右两个子树的高度差的绝对值不超过1。</p>\n</blockquote>\n<p><strong>示例 1</strong><br>\n<br>\n输入: root = [3, 9, 20, null, null, 15, 7]<br>\n输出: true</p>\n<p><strong>示例 2</strong><br>\n<br>\n输入: root = [1, 2, 2, 3, 3, null, null, 4, 4]<br>\n输出: false</p>",readingTime:{minutes:1.98,words:593},title:"110, 平衡二叉树",icon:"discover",order:16,type:"article"}}],["/zh/algorithm/leetcode/binary_tree/111_minimum_depth_of_binary_tree.html",{loader:()=>r.e(35517).then(r.bind(r,1187)),meta:{date:17032032e5,category:["binary tree"],tag:["easy","binary tree","depth first search","breadth first search"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给定一个二叉树，找出其最小深度。</p>\n<p>最小深度是从根节点到最近叶子节点的最短路径上的节点数量。</p>\n<p><strong>说明</strong>：叶子节点是指没有子节点的节点。</p>\n<p><strong>示例 1</strong><br>\n<br>\n输入: root = [3, 9, 20, null, null, 15, 7]<br>\n输出: 2</p>\n<p><strong>示例 2</strong><br>\n输入: root = [2, null, 3, null, 4, null, 5, null, 6]<br>\n输出: 5</p>",readingTime:{minutes:3.66,words:1097},title:"111, 二叉树的最小深度",icon:"discover",order:14,type:"article"}}],["/zh/algorithm/leetcode/binary_tree/112_path_sum.html",{loader:()=>r.e(60398).then(r.bind(r,37514)),meta:{date:1703808e6,category:["binary tree"],tag:["easy","binary tree","depth first search","breadth first search"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给你二叉树的根节点<code>root</code>和一个表示目标和的整数<code>targetSum</code>。判断该树中是否存在<strong>根节点到叶子节点</strong>的路径，这条路径上所有节点值相加等于目标和<code>targetSum</code>。如果存在，返回<code>true</code>；否则返回<code>false</code>。</p>\n<p><strong>叶子节点</strong>是指没有子节点的节点。</p>\n<p><strong>示例 1</strong><br>\n<br>\n输入: root = [5, 4, 8, 11, null, 13, 4, 7, 2, null, null, null, 1], targetSum = 22<br>\n输出: true<br>\n解释: 等于目标和的根节点到叶节点路径如上图所示。</p>",readingTime:{minutes:5.28,words:1585},title:"112, 路径总和",icon:"discover",order:20,type:"article"}}],["/zh/algorithm/leetcode/binary_tree/113_path_sum_ii.html",{loader:()=>r.e(25520).then(r.bind(r,19481)),meta:{date:17038944e5,category:["binary tree"],tag:["medium","backtracking","binary tree","depth first search","breadth first search"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给你二叉树的根节点<code>root</code>和一个整数目标和<code>targetSum</code>，找出所有<strong>从根节点到叶子节点</strong>路径总和等于给定目标和的路径。</p>\n<p><strong>叶子节点</strong>是指没有子节点的节点。</p>\n<p><strong>示例 1</strong><br>\n<br>\n输入: root = [5, 4, 8, 11, null, 13, 4, 7, 2, null, null, 5, 1], targetSum = 22<br>\n输出: [[5, 4, 11, 2], [5, 8, 4, 5]]</p>",readingTime:{minutes:3.72,words:1115},title:"113, 路径总和II",icon:"discover",order:21,type:"article"}}],["/zh/algorithm/leetcode/binary_tree/116_populating_next_right_pointers_in_each_node.html",{loader:()=>r.e(25265).then(r.bind(r,63404)),meta:{date:17027712e5,category:["binary tree"],tag:["medium","binary tree","linked list","depth first search","breadth first search"],sticky:!0,excerpt:'<h2>一、题目描述</h2>\n<p>给定一个 完美二叉树 ，其所有叶子节点都在同一层，每个父节点都有两个子节点。二叉树定义如下：</p>\n<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> Node {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> val;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    Node </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">left;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    Node </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">right;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    Node </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">next;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:6.04,words:1813},title:"116, 填充每个节点的下一个右侧节点指针",icon:"discover",order:10,type:"article"}}],["/zh/algorithm/leetcode/binary_tree/117_populating_next_right_pointers_in_each_node_ii.html",{loader:()=>r.e(58967).then(r.bind(r,63225)),meta:{date:17028576e5,category:["binary tree"],tag:["medium","binary tree","linked list","depth first search","breadth first search"],sticky:!0,excerpt:'<h2>一、题目描述</h2>\n<p>给定一个二叉树：</p>\n<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> Node {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> val;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    Node </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">left;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    Node </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">right;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    Node </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">next;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:7.53,words:2259},title:"117, 填充每个节点的下一个右侧节点指针II",icon:"discover",order:11,type:"article"}}],["/zh/algorithm/leetcode/binary_tree/144_binary_tree_pre_order_traversal.html",{loader:()=>r.e(6952).then(r.bind(r,54179)),meta:{date:17019072e5,category:["binary tree"],tag:["easy","stack","binary tree","depth first search"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给你二叉树的根节点<code>root</code>，返回它节点值的<strong>前序</strong>遍历。</p>\n<p><strong>示例 1</strong><br>\n<br>\n输入: root = [1, null, 2, 3]<br>\n输出: [1, 2, 3]</p>\n<p><strong>示例 2</strong><br>\n输入: root = []<br>\n输出: []</p>\n<p><strong>示例 3</strong><br>\n输入: root = [1]<br>\n输出: [1]</p>\n<p><strong>提示</strong></p>",readingTime:{minutes:2.51,words:752},title:"144, 二叉树的前序遍历",icon:"discover",order:1,type:"article"}}],["/zh/algorithm/leetcode/binary_tree/145_binary_tree_post_order_traversal.html",{loader:()=>r.e(20122).then(r.bind(r,39887)),meta:{date:17021664e5,category:["binary tree"],tag:["easy","stack","binary tree","depth first search"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给你一棵二叉树的根节点<code>root</code>，返回其节点值的<strong>后序遍历</strong>。</p>\n<p><strong>示例 1</strong><br>\n<br>\n输入: root = [1, null, 2, 3]<br>\n输出: [3, 2, 1]</p>\n<p><strong>示例 2</strong><br>\n输入: root = []<br>\n输出: []</p>\n<p><strong>示例 3</strong><br>\n输入: root = [1]<br>\n输出: [1]</p>\n<p><strong>提示</strong></p>",readingTime:{minutes:2.71,words:813},title:"145, 二叉树的后序遍历",icon:"discover",order:3,type:"article"}}],["/zh/algorithm/leetcode/binary_tree/199_binary_tree_right_side_view.html",{loader:()=>r.e(96477).then(r.bind(r,97455)),meta:{date:17024256e5,category:["binary tree"],tag:["medium","binary tree","depth first search","breadth first search"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给定一个二叉树的<strong>根节点</strong><code>root</code>，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。</p>\n<p><strong>示例 1</strong><br>\n<br>\n输入: root = [1, 2, 3, null, 5, null, 4]<br>\n输出: [1, 3, 4]</p>\n<p><strong>示例 2</strong><br>\n输入: root = [1, null, 3]<br>\n输出: [1, 3]</p>\n<p><strong>示例 3</strong><br>\n输入: root = []<br>\n输出: []</p>",readingTime:{minutes:4.49,words:1346},title:"199, 二叉树的右视图",icon:"discover",order:6,type:"article"}}],["/zh/algorithm/leetcode/binary_tree/222_count_complete_tree_nodes.html",{loader:()=>r.e(52857).then(r.bind(r,6595)),meta:{date:17032896e5,category:["binary tree"],tag:["easy","binary tree","bit manipulation"],sticky:!0,excerpt:'<h2>一、题目描述</h2>\n<p>给你一棵<strong>完全二叉树</strong>的根节点<code>root</code>，求出该树的节点个数。</p>\n<p><a href="https://baike.baidu.com/item/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91/7773232?fr=aladdin" target="_blank" rel="noopener noreferrer"><strong>完全二叉树</strong></a>的定义如下：在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置。若最底层为第<code>h</code>层，则该层包含<code>1~ 2ʰ</code>个节点。</p>',readingTime:{minutes:2.97,words:892},title:"222, 完全二叉树的节点个数",icon:"discover",order:15,type:"article"}}],["/zh/algorithm/leetcode/binary_tree/226_invert_binary_tree.html",{loader:()=>r.e(70390).then(r.bind(r,39095)),meta:{date:17039808e5,category:["binary tree"],tag:["easy","binary tree","depth first search","breadth first search"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给你一棵二叉树的根节点<code>root</code>，翻转这棵二叉树，并返回其根节点。</p>\n<p><strong>示例 1</strong><br>\n<br>\n输入: root = [4, 2, 7, 1, 3, 6, 9]<br>\n输出: [4, 7, 2, 9, 6, 3, 1]</p>\n<p><strong>示例 2</strong><br>\n<br>\n输入: root = [2, 1, 3]<br>\n输出: [2, 3, 1]</p>\n<p><strong>示例 3</strong><br>\n输入: root = []<br>\n输出: []</p>",readingTime:{minutes:1.91,words:573},title:"226, 翻转二叉树",icon:"discover",order:22,type:"article"}}],["/zh/algorithm/leetcode/binary_tree/235_lowest_common_ancestor_of_a_binary_search_tree.html",{loader:()=>r.e(77759).then(r.bind(r,54895)),meta:{date:17051904e5,category:["binary tree"],tag:["medium","tree","binary tree","binary search tree","depth first search"],sticky:!0,excerpt:'<h2>一、题目描述</h2>\n<p>给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。</p>\n<p><a href="https://baike.baidu.com/item/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/8918834?fr=aladdin" target="_blank" rel="noopener noreferrer">百度百科</a>中最近公共祖先的定义为："对于有根树<code>T</code>的两个结点<code>p</code>、<code>q</code>，最近公共祖先表示为一个结点<code>x</code>，满足<code>x</code>是<code>p</code>、<code>q</code>的祖先且<code>x</code>的深度尽可能大（<strong>一个节点也可以是它自己的祖先</strong>）。"</p>',readingTime:{minutes:4.1,words:1229},title:"235, 二叉搜索树的最近公共祖先",icon:"discover",order:33,type:"article"}}],["/zh/algorithm/leetcode/binary_tree/236_lowest_common_ancestor_of_a_binary_tree.html",{loader:()=>r.e(65945).then(r.bind(r,41290)),meta:{date:17050176e5,category:["binary tree"],tag:["medium","binary tree","depth first search"],sticky:!0,excerpt:'<h2>一、题目描述</h2>\n<p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p>\n<p><a href="https://baike.baidu.com/item/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/8918834?fr=aladdin" target="_blank" rel="noopener noreferrer">百度百科</a>中关于公共祖先的定义为："对于有根树<code>T</code>的两个节点<code>p</code>、<code>q</code>，最近公共祖先表示为一个节点<code>x</code>，满足<code>x</code>是<code>p</code>、<code>q</code>的祖先且<code>x</code>的深度尽可能大（<strong>一个节点也可以是它自己的祖先</strong>）。"</p>',readingTime:{minutes:2.76,words:827},title:"236, 二叉树的最近公共祖先",icon:"discover",order:32,type:"article"}}],["/zh/algorithm/leetcode/binary_tree/257_binary_tree_paths.html",{loader:()=>r.e(14130).then(r.bind(r,66470)),meta:{date:17035488e5,category:["binary tree"],tag:["easy","string","backtracking","depth first search","binary tree"],sticky:!0,excerpt:'<h2>一、题目描述</h2>\n<p>给你一个二叉树的根节点<code>root</code>，按<strong>任意顺序</strong>返回所有从根节点到叶子节点的路径。</p>\n<p><strong>叶子节点</strong>是指没有子节点的节点。</p>\n<p><strong>示例 1</strong><br>\n<br>\n输入: root = [1, 2, 3, null, 5]<br>\n输出: ["1-&gt;2-&gt;5", "1-&gt;3"]</p>\n<p><strong>示例 2</strong><br>\n输入: root = [1]<br>\n输出: ["1"]</p>\n<p><strong>提示</strong></p>',readingTime:{minutes:2.97,words:892},title:"257, 二叉树的所有路径",icon:"discover",order:17,type:"article"}}],["/zh/algorithm/leetcode/binary_tree/404_sum_of_left_leaves.html",{loader:()=>r.e(87685).then(r.bind(r,63944)),meta:{date:17036352e5,category:["binary tree"],tag:["easy","binary tree","depth first search","breadth first search"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给定二叉树的根节点<code>root</code>，返回所有左叶子之和。</p>\n<p><strong>示例 1</strong><br>\n<br>\n输入: [3, 9, 20, null, null, 15, 7]<br>\n输出: 24<br>\n解释: 在这个二叉树中，有两个左叶子，分别是9和15，所以返回24</p>\n<p><strong>示例 2</strong><br>\n输入: root = [1]<br>\n输出: 0</p>\n<p><strong>提示</strong></p>\n<ul>\n<li>节点数在<code>[1, 1000]</code>范围内</li>\n<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\n</ul>",readingTime:{minutes:2.63,words:789},title:"404, 左叶子之和",icon:"discover",order:18,type:"article"}}],["/zh/algorithm/leetcode/binary_tree/429_n_ary_tree_level_order_traversal.html",{loader:()=>r.e(62697).then(r.bind(r,95573)),meta:{date:17025984e5,category:["binary tree"],tag:["medium","tree","depth first search","breadth first search"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给定一个<code>N</code>叉树，返回其节点值的层序遍历。（即从左到右，逐层遍历）。</p>\n<p>树的序列化输入是用层序遍历，每组子节点都由<code>null</code>值分隔（参见示例）。</p>\n<p><strong>示例 1</strong><br>\n<br>\n输入: root = [1, null, 3, 2, 4, null, 5, 6]<br>\n输出: [[1], [3, 2, 4], [5, 6]]</p>\n<p><strong>示例 2</strong><br>\n<br>\n输入: root = [1, null, 2, 3, 4, 5, null, null, 6, 7, null, 8, null, 9, 10, null, null, 11, null, 12, null, 13, null, null, 14]<br>\n输出: [[1], [2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13], [14]]</p>",readingTime:{minutes:5.23,words:1569},title:"429, N叉树的层序遍历",icon:"discover",order:8,type:"article"}}],["/zh/algorithm/leetcode/binary_tree/450_delete_node_in_a_bst.html",{loader:()=>r.e(77794).then(r.bind(r,13909)),meta:{date:17054496e5,category:["binary tree"],tag:["medium","binary tree","binary search tree"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给定一个二叉搜索树的根节点<code>root</code>和一个值<code>key</code>，删除二叉搜索树中的<code>key</code>对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用。</p>\n<p>一般来说，删除节点可分为两个步骤：</p>\n<ol>\n<li>首先找到需要删除的节点；</li>\n<li>如果找到了，删除它。</li>\n</ol>\n<p><strong>示例 1</strong><br>\n<br>\n输入: root = [5, 3, 6, 2, 4, null, 7], key = 3<br>\n输出: [5, 4, 6, 2, null, null, 7]<br>\n解释: 给定需要删除的节点值是<code>3</code>，所以我们首先找到<code>3</code>这个节点，然后删除它。</p>",readingTime:{minutes:3.01,words:904},title:"450, 删除二叉搜索树中的节点",icon:"discover",order:35,type:"article"}}],["/zh/algorithm/leetcode/binary_tree/501_find_mode_in_binary_search_tree.html",{loader:()=>r.e(85542).then(r.bind(r,65475)),meta:{date:17048448e5,category:["binary tree"],tag:["easy","binary tree","depth first search","binary search tree"],sticky:!0,excerpt:'<h2>一、题目描述</h2>\n<p>给你一个含重复值的二叉搜索树（BST）的根节点<code>root</code>，找出并返回<code>BST</code>中的所有<a href="https://baike.baidu.com/item/%E4%BC%97%E6%95%B0/44796" target="_blank" rel="noopener noreferrer">众数</a>（即出现频率最高的元素）。</p>\n<p>如果树中有不止一个众数，可以按<strong>任意顺序</strong>返回。</p>\n<p>假定<strong>BST</strong>满足如下定义：</p>\n<ul>\n<li>结点左子树中所含节点的值<strong>小于等于</strong>当前节点的值</li>\n<li>结点右子树中所含节点的值<strong>大于等于</strong>当前节点的值</li>\n<li>左子树和右子树都是二叉搜索树</li>\n</ul>',readingTime:{minutes:5.81,words:1742},title:"501, 二叉搜索树中的众数",icon:"discover",order:30,type:"article"}}],["/zh/algorithm/leetcode/binary_tree/513_find_bottom_left_tree_value.html",{loader:()=>r.e(97074).then(r.bind(r,31042)),meta:{date:17037216e5,category:["binary tree"],tag:["medium","binary tree","depth first search","breadth first search"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给定一个二叉树的<strong>根节点</strong><code>root</code>，请找出该二叉树的<strong>最底层最左边</strong>节点的值。</p>\n<p>假设二叉树中至少有一个节点。</p>\n<p><strong>示例 1</strong><br>\n<br>\n输入: root = [2, 1, 3]<br>\n输出: 1</p>\n<p><strong>示例 2</strong><br>\n<br>\n输入: root = [1, 2, 3, 4, null, 5, 6, null, null, 7]<br>\n输出: 7</p>\n<p><strong>提示</strong></p>",readingTime:{minutes:3.17,words:950},title:"513, 找树左下角的值",icon:"discover",order:19,type:"article"}}],["/zh/algorithm/leetcode/binary_tree/515_find_largest_value_in_each_tree_row.html",{loader:()=>r.e(20362).then(r.bind(r,79921)),meta:{date:17026848e5,category:["binary tree"],tag:["medium","binary tree","depth first search","breadth first search"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给定一棵二叉树的根节点<code>root</code>，请找出该二叉树中每一层的最大值。</p>\n<p><strong>示例 1</strong><br>\n<br>\n输入: root = [1, 3, 2, 5, 3, null, 9]<br>\n输出: [1, 3, 9]</p>\n<p><strong>示例 2</strong><br>\n输入: root = [1, 2, 3]<br>\n输出: [1, 3]</p>\n<p><strong>提示</strong></p>\n<ul>\n<li>二叉树的节点个数的范围是<code>[0,10⁴]</code></li>\n<li><code>-2³¹ &lt;= Node.val &lt;= 2³¹ - 1</code></li>\n</ul>",readingTime:{minutes:3.65,words:1096},title:"515, 在每个树行中找最大值",icon:"discover",order:9,type:"article"}}],["/zh/algorithm/leetcode/binary_tree/530_minimum_absolute_difference_in_bst.html",{loader:()=>r.e(56795).then(r.bind(r,43265)),meta:{date:17047584e5,category:["binary tree"],tag:["easy","binary tree","binary search tree","depth first search","breadth first search"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给你一个二叉搜索树的根节点<code>root</code>，返回<strong>树中任意两个不同节点值之间的最小差值</strong>。</p>\n<p>差值是一个正数，其数值等于两值之差的绝对值。</p>\n<p><strong>示例 1</strong><br>\n<br>\n输入: root = [4, 2, 6, 1, 3]<br>\n输出: 1</p>\n<p><strong>示例 2</strong><br>\n<br>\n输入: root = [1, 0, 48, null, null, 12, 49]<br>\n输出: 1</p>\n<p><strong>提示</strong></p>",readingTime:{minutes:2.02,words:606},title:"530, 二叉搜索树的最小绝对差",icon:"discover",order:29,type:"article"}}],["/zh/algorithm/leetcode/binary_tree/538_convert_bst_to_greater_tree.html",{loader:()=>r.e(28422).then(r.bind(r,83064)),meta:{date:17049312e5,category:["binary tree"],tag:["medium","binary tree","depth first search","binary search tree"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给出二叉<strong>搜索</strong>树的根节点，该树的节点值各不相同，请你将其转换为累加树（Greater Sum Tree），使每个节点<code>node</code>的新值等于原树中大于或等于<code>node.val</code>的值之和。</p>\n<p>提醒一下，二叉搜索树满足下列约束条件：</p>\n<ul>\n<li>节点的左子树仅包含键<strong>小于</strong>节点键的节点。</li>\n<li>节点的右子树仅包含键<strong>大于</strong>节点键的节点。</li>\n<li>左右子树也必须是二叉搜索树。</li>\n</ul>",readingTime:{minutes:3.15,words:946},title:"538, 把二叉搜索树转换为累加树",icon:"discover",order:31,type:"article"}}],["/zh/algorithm/leetcode/binary_tree/559_maximum_depth_of_n_ary_tree.html",{loader:()=>r.e(39049).then(r.bind(r,14756)),meta:{date:17061408e5,category:["binary tree"],tag:["easy","tree","depth first search","breadth first search"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给定一个<code>N</code>叉树，找到其最大深度。</p>\n<p>最大深度是指从根节点到最远叶子节点的最长路径上的节点总数。</p>\n<p><code>N</code>叉树输入按层序遍历序列化表示，每组子节点由空值分隔（请参见示例）。</p>\n<p><strong>示例 1</strong><br>\n<br>\n输入: root = [1, null, 3, 2, 4, null, 5, 6]<br>\n输出: 3</p>\n<p><strong>示例 2</strong><br>\n<br>\n输入: root = [1, null, 2, 3, 4, 5, null, null, 6, 7, null, 8, null, 9, 10, null, null, 11, null, 12, null, 13, null, null, 14]<br>\n输出: 3</p>",readingTime:{minutes:2.72,words:817},title:"559, N叉树的最大深度",icon:"discover",order:41,type:"article"}}],["/zh/algorithm/leetcode/binary_tree/572_subtree_of_another_tree.html",{loader:()=>r.e(31172).then(r.bind(r,46861)),meta:{date:1705968e6,category:["binary tree"],tag:["easy","binary tree","depth first search","string matching","hash function"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给你两棵二叉树<code>root</code>和<code>subRoot</code>。检验<code>root</code>中是否包含和<code>subRoot</code>具有相同结构和节点值的子树。如果存在则返回<code>true</code>；否则返回<code>false</code>。</p>\n<p>二叉树<code>tree</code>的一棵子树包括<code>tree</code>的某个节点和这个节点的所有后代节点。<code>tree</code>也可以看做它自身的一棵子树。</p>\n<p><strong>示例 1</strong><br>\n<br>\n输入: root = [3, 4, 5, 1, 2], subRoot = [4, 1, 2]<br>\n输出: true</p>",readingTime:{minutes:3.65,words:1096},title:"572, 另一棵树的子树",icon:"discover",order:40,type:"article"}}],["/zh/algorithm/leetcode/binary_tree/617_merge_two_binary_trees.html",{loader:()=>r.e(34266).then(r.bind(r,58640)),meta:{date:17044128e5,category:["binary tree"],tag:["easy","binary tree","depth first search","breadth first search"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给你两棵二叉树：<code>root1</code>和<code>root2</code>。</p>\n<p>想象一下，当你将其中一棵覆盖到另一棵之上时，两棵树上的一些节点将会重叠（而另一些不会）。你需要将这两棵树合并成一棵新二叉树。合并的规则是：如果两个节点重叠，那么将这两个节点的值相加作为合并后节点的新值；否则，<strong>不为</strong><code>null</code>的节点将直接作为新二叉树的节点。</p>\n<p>返回合并后的二叉树。</p>\n<p><strong>注意</strong>：合并过程必须从两个树的根节点开始。</p>\n<p><strong>示例 1</strong><br>\n<br>\n输入: root1 = [1, 3, 2, 5], root2 = [2, 1, 3, null, 4, null, 7]<br>\n输出: [3, 4, 5, 5, 4, null, 7]</p>",readingTime:{minutes:5.4,words:1620},title:"617, 合并二叉树",icon:"discover",order:26,type:"article"}}],["/zh/algorithm/leetcode/binary_tree/637_average_of_levels_in_binary_tree.html",{loader:()=>r.e(13425).then(r.bind(r,54708)),meta:{date:1702512e6,category:["binary tree"],tag:["easy","binary tree","depth first search","breadth first search"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给定一个非空二叉树的根节点<code>root</code>，以数组的形式返回每一层节点的平均值。与实际答案相差<code>10⁻⁵</code>以内的答案可以被接受。</p>\n<p><strong>示例 1</strong><br>\n<br>\n输入: root = [3, 9, 20, null, null, 15, 7]<br>\n输出: [3.00000, 14.50000, 11.00000]<br>\n解释: 第0层的平均值为3，第1层的平均值为14.5，第2层的平均值为11。因此返回[3, 14.5, 11]。</p>\n<p><strong>示例 2</strong><br>\n<br>\n输入: root = [3, 9, 20, 15, 7]<br>\n输出: [3.00000, 14.50000, 11.00000]</p>",readingTime:{minutes:3.59,words:1077},title:"637, 二叉树的层平均值",icon:"discover",order:7,type:"article"}}],["/zh/algorithm/leetcode/binary_tree/654_maximum_binary_tree.html",{loader:()=>r.e(65369).then(r.bind(r,41287)),meta:{date:17043264e5,category:["binary tree"],tag:["medium","array","binary tree","stack","divide and conquer","monotonic stack"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给定一个不重复的整数数组<code>nums</code>。<strong>最大二叉树</strong>可以用下面的算法从<code>nums</code>递归地构建:</p>\n<ol>\n<li>创建一个根节点，其值为<code>nums</code>中的最大值。</li>\n<li>递归地在最大值<strong>左边</strong>的<strong>子数组前缀上</strong>构建左子树。</li>\n<li>递归地在最大值<strong>右边</strong>的<strong>子数组后缀上</strong>构建右子树。</li>\n</ol>\n<p>返回<code>nums</code>构建的<strong>最大二叉树</strong>。</p>",readingTime:{minutes:4.83,words:1448},title:"654, 最大二叉树",icon:"discover",order:25,type:"article"}}],["/zh/algorithm/leetcode/binary_tree/669_trim_a_binary_search_tree.html",{loader:()=>r.e(39536).then(r.bind(r,1557)),meta:{date:1705536e6,category:["binary tree"],tag:["medium","binary tree","binary search tree","depth first search"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给你二叉搜索树的根节点<code>root</code>，同时给定最小边界<code>low</code>和最大边界<code>high</code>。通过修剪二叉搜索树，使得所有节点的值在<code>[low, high]</code>中。修剪树<strong>不应该</strong>改变保留在树中的元素的相对结构 (即，如果没有被移除，原有的父代子代关系都应当保留)。可以证明，存在<strong>唯一的答案</strong>。</p>\n<p>所以结果应当返回修剪好的二叉搜索树的新的根节点。注意，根节点可能会根据给定的边界发生改变。</p>\n<p><strong>示例 1</strong><br>\n<br>\n输入: root = [1, 0, 2], low = 1, high = 2<br>\n输出: [1, null, 2]</p>",readingTime:{minutes:2.48,words:745},title:"669, 修剪二叉搜索树",icon:"discover",order:36,type:"article"}}],["/zh/algorithm/leetcode/binary_tree/700_search_in_a_binary_search_tree.html",{loader:()=>r.e(86002).then(r.bind(r,45047)),meta:{date:17045856e5,category:["binary tree"],tag:["easy","binary tree","binary search tree"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给定二叉搜索树（BST）的根节点<code>root</code>和一个整数值<code>val</code>。</p>\n<p>你需要在BST中找到节点值等于<code>val</code>的节点。返回以该节点为根的子树。如果节点不存在，则返回<code>null</code>。</p>\n<p><strong>示例 1</strong><br>\n<br>\n输入: root = [4, 2, 7, 1, 3], val = 2<br>\n输出: [2, 1, 3]</p>\n<p><strong>示例 2</strong><br>\n<br>\n输入: root = [4, 2, 7, 1, 3], val = 5<br>\n输出: []</p>",readingTime:{minutes:1.76,words:527},title:"700, 二叉搜索树中的搜索",icon:"discover",order:27,type:"article"}}],["/zh/algorithm/leetcode/binary_tree/701_insert_into_a_binary_search_tree.html",{loader:()=>r.e(80313).then(r.bind(r,52401)),meta:{date:17053632e5,category:["binary tree"],tag:["medium","binary tree","binary search tree"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给定二叉搜索树（BST）的根节点<code>root</code>和要插入树中的值<code>value</code>，将值插入二叉搜索树。返回插入后二叉搜索树的根节点。输入数据<strong>保证</strong>新值和原始二叉搜索树中的任意节点值都不同。</p>\n<p><strong>注意</strong>：可能存在多种有效的插入方式，只要树在插入后仍保持为二叉搜索树即可。你可以返回<strong>任意有效的结果</strong>。</p>\n<p><strong>示例 1</strong><br>\n<br>\n输入: root = [4, 2, 7, 1, 3], val = 5<br>\n输出: [4, 2, 7, 1, 3, 5]<br>\n解释: 另一个满足题目要求可以通过的树是：<br>\n</p>",readingTime:{minutes:3.3,words:991},title:"701, 二叉搜索树中的插入操作",icon:"discover",order:34,type:"article"}}],["/zh/algorithm/leetcode/binary_tree/94_binary_tree_in_order_traversal.html",{loader:()=>r.e(11646).then(r.bind(r,50680)),meta:{date:170208e7,category:["binary tree"],tag:["easy","stack","binary tree","depth first search"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给定一个二叉树的根节点<code>root</code>，返回<em>它的<strong>中序</strong>遍历</em>。</p>\n<p><strong>示例 1</strong><br>\n<br>\n输入: root = [1, null, 2, 3]<br>\n输出: [1, 3, 2]</p>\n<p><strong>示例 2</strong><br>\n输入: root = []<br>\n输出: []</p>\n<p><strong>示例 3</strong><br>\n输入: root = [1]<br>\n输出: [1]</p>\n<p><strong>提示</strong></p>",readingTime:{minutes:2.18,words:653},title:"94, 二叉树的中序遍历",icon:"discover",order:2,type:"article"}}],["/zh/algorithm/leetcode/binary_tree/98_validate_binary_search_tree.html",{loader:()=>r.e(16058).then(r.bind(r,2151)),meta:{date:1704672e6,category:["binary tree"],tag:["medium","binary tree","depth first search","binary search tree"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给你一个二叉树的根节点<code>root</code>，判断其是否是一个有效的二叉搜索树。</p>\n<p><strong>有效</strong>二叉搜索树定义如下：</p>\n<ul>\n<li>节点的左子树只包含<strong>小于</strong>当前节点的数。</li>\n<li>节点的右子树只包含<strong>大于</strong>当前节点的数。</li>\n<li>所有左子树和右子树自身必须也是二叉搜索树。</li>\n</ul>\n<p><strong>示例 1</strong><br>\n<br>\n输入: root = [2, 1, 3]<br>\n输出: true</p>",readingTime:{minutes:3.71,words:1113},title:"98, 验证二叉搜索树",icon:"discover",order:28,type:"article"}}],["/zh/algorithm/leetcode/binary_tree/",{loader:()=>r.e(55158).then(r.bind(r,24508)),meta:{date:17017344e5,category:["leetcode"],tag:["binary tree"],sticky:!1,excerpt:'<h2>二叉树</h2>\n<h3>定义</h3>\n<p>在计算机科学中，<a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91" target="_blank" rel="noopener noreferrer"><strong>二叉树</strong></a>是每个节点最多只有两个分支（即不存在分支度大于2的节点）的树结构。通常分支被称作<code>左子树</code>或<code>右子树</code>。二叉树的分支具有左右次序，不能随意颠倒。<br>\n</p>\n<h3>在图论中的定义</h3>\n<p>二叉树是一个连通的无环图，并且每一个顶点的度不大于3。有根二叉树还要满足根节点的度不大于2。有了根节点之后，每个顶点定义了唯一的父节点，和最多2个子节点。然而，没有足够的信息来区分左节点和右节点。如果不考虑连通性，允许图中有多个连通分量，这样的结构叫做森林。</p>',readingTime:{minutes:6.79,words:2036},title:"二叉树",icon:"discover",order:7,type:"article"}}],["/zh/algorithm/leetcode/greedy/1005_maximize_sum_of_array_after_k_negations.html",{loader:()=>r.e(56011).then(r.bind(r,89722)),meta:{date:1708992e6,category:["greedy"],tag:["easy","greedy","array","sorting"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给你一个整数数组<code>nums</code>和一个整数<code>k</code>，按以下方法修改该数组：</p>\n<ul>\n<li>选择某个下标<code>i</code>并将<code>nums[i]</code>替换为<code>-nums[i]</code>。</li>\n</ul>\n<p>重复这个过程恰好<code>k</code>次。可以多次选择同一个下标<code>i</code>。</p>\n<p>以这种方式修改数组后，返回数组<strong>可能的最大和</strong>。</p>\n<p><strong>示例 1</strong><br>\n输入: nums = [4, 2, 3], k = 1<br>\n输出: 5<br>\n解释: 选择下标<code>1</code>，<code>nums</code>变为<code>[4, -2, 3]</code>。</p>",readingTime:{minutes:2.72,words:816},title:"1005, K次取反后最大化的数组和",icon:"discover",order:2,type:"article"}}],["/zh/algorithm/leetcode/greedy/122_best_time_to_buy_and_sell_stock_ii.html",{loader:()=>r.e(30446).then(r.bind(r,92450)),meta:{date:17095968e5,category:["greedy"],tag:["medium","greedy","array","dynamic programming"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给你一个整数数组<code>prices</code>，其中<code>prices[i]</code>表示某支股票第<code>i</code>天的价格。</p>\n<p>在每一天，你可以决定是否购买和/或出售股票。你在任何时候<strong>最多</strong>只能持有<strong>一股</strong>股票。你也可以先购买，然后在<strong>同一天</strong>出售。</p>\n<p>返回<em>你能获得的<strong>最大</strong>利润</em>。</p>\n<p><strong>示例 1</strong><br>\n输入: prices = [7, 1, 5, 3, 6, 4]<br>\n输出: 7<br>\n解释: 在第<code>2</code>天（股票价格 = 1）的时候买入，在第<code>3</code>天（股票价格 = 5）的时候卖出，这笔交易所能获得利润 = <code>5 - 1 = 4</code>。随后，在第<code>4</code>天（股票价格 = 3）的时候买入，在第<code>5</code>天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = <code>6 - 3 = 3</code>。总利润为<code>4 + 3 = 7</code>。</p>",readingTime:{minutes:2.68,words:804},title:"122, 买卖股票的最佳时机II",icon:"discover",order:6,type:"article"}}],["/zh/algorithm/leetcode/greedy/134_gas_station.html",{loader:()=>r.e(52061).then(r.bind(r,3162)),meta:{date:17113248e5,category:["greedy"],tag:["medium","array","greedy"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>在一条环路上有<code>n</code>个加油站，其中第<code>i</code>个加油站有汽油<code>gas[i]</code>升。</p>\n<p>你有一辆油箱容量无限的的汽车，从第<code>i</code>个加油站开往第<code>i+1</code>个加油站需要消耗汽油<code>cost[i]</code>升。你从其中的一个加油站出发，开始时油箱为空。</p>\n<p>给定两个整数数组<code>gas</code>和<code>cost</code>，如果你可以按顺序绕环路行驶一周，则返回出发时加油站的编号，否则返回<code>-1</code>。如果存在解，则<strong>保证</strong>它是<strong>唯一</strong>的。</p>",readingTime:{minutes:3.16,words:949},title:"134, 加油站",icon:"discover",order:17,type:"article"}}],["/zh/algorithm/leetcode/greedy/135_candy.html",{loader:()=>r.e(7957).then(r.bind(r,15524)),meta:{date:1709856e6,category:["greedy"],tag:["hard","array","greedy"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p><code>n</code>个孩子站成一排。给你一个整数数组<code>ratings</code>表示每个孩子的评分。</p>\n<p>你需要按照以下要求，给这些孩子分发糖果：</p>\n<ul>\n<li>每个孩子至少分配到<code>1</code>个糖果。</li>\n<li>相邻两个孩子评分更高的孩子会获得更多的糖果。</li>\n</ul>\n<p>请你给每个孩子分发糖果，计算并返回需要准备的<strong>最少糖果数目</strong>。</p>\n<p><strong>示例 1</strong><br>\n输入: ratings = [1, 0, 2]<br>\n输出: 5<br>\n解释: 你可以分别给第一个、第二个、第三个孩子分发<code>2、1、2</code>颗糖果。</p>",readingTime:{minutes:2.24,words:673},title:"135, 分发糖果",icon:"discover",order:8,type:"article"}}],["/zh/algorithm/leetcode/greedy/376_wiggle_subsequence.html",{loader:()=>r.e(90154).then(r.bind(r,29617)),meta:{date:17092512e5,category:["greedy"],tag:["medium","array","greedy","dynamic programming"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为<strong>摆动序列</strong>。第一个差（如果存在的话）可能是正数或负数。仅有一个元素或者含两个不等元素的序列也视作摆动序列。</p>\n<ul>\n<li>例如，<code>[1, 7, 4, 9, 2, 5]</code>是一个<strong>摆动序列</strong>，因为差值<code>(6, -3, 5, -7, 3)</code>是正负交替出现的。</li>\n<li>相反，<code>[1, 4, 7, 2, 5]</code>和<code>[1, 7, 4, 5, 5]</code>不是摆动序列，第一个序列是因为它的前两个差值都是正数，第二个序列是因为它的最后一个差值为零。</li>\n</ul>",readingTime:{minutes:2.99,words:896},title:"376, 摆动序列",icon:"discover",order:4,type:"article"}}],["/zh/algorithm/leetcode/greedy/406_queue_reconstruction_by_height.html",{loader:()=>r.e(17203).then(r.bind(r,43446)),meta:{date:17102016e5,category:["greedy"],tag:["medium","binary indexed tree","segment tree","array","sorting"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>假设有打乱顺序的一群人站成一个队列，数组<code>people</code>表示队列中一些人的属性（不一定按顺序）。每个<code>people[i] = [hi, ki]</code>表示第<code>i</code>个人的身高为<code>hi</code>，前面<strong>正好</strong>有<code>ki</code>个身高大于或等于<code>hi</code>的人。</p>\n<p>请你重新构造并返回输入数组<code>people</code>所表示的队列。返回的队列应该格式化为数组<code>queue</code>，其中<code>queue[j] = [hj, kj]</code>是队列中第<code>j</code>个人的属性（<code>queue[0]</code>是排在队列前面的人）。</p>",readingTime:{minutes:2.88,words:863},title:"406, 根据身高重建队列",icon:"discover",order:9,type:"article"}}],["/zh/algorithm/leetcode/greedy/435_non_overlapping_intervals.html",{loader:()=>r.e(16105).then(r.bind(r,8477)),meta:{date:17108928e5,category:["greedy"],tag:["medium","array","greedy","dynamic programming"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给定一个区间的集合<code>intervals</code>，其中<code>intervals[i] = [starti, endi]</code>。返回<em>需要移除区间的最小数量，使剩余区间互不重叠</em>。</p>\n<p><strong>示例 1</strong><br>\n输入: intervals = [[1, 2], [2, 3], [3, 4], [1, 3]]<br>\n输出: 1<br>\n解释: 移除<code>[1, 3]</code>后，剩下的区间没有重叠。</p>\n<p><strong>示例 2</strong><br>\n输入: intervals = [[1, 2], [1, 2], [1, 2]]<br>\n输出: 2<br>\n解释: 你需要移除两个<code>[1, 2]</code>来使剩下的区间没有重叠。</p>",readingTime:{minutes:2.24,words:671},title:"435, 无重叠区间",icon:"discover",order:13,type:"article"}}],["/zh/algorithm/leetcode/greedy/452_minimum_number_of_arrows_to_burst_balloons.html",{loader:()=>r.e(65783).then(r.bind(r,32681)),meta:{date:171072e7,category:["greedy"],tag:["medium","array","greedy","sorting"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>有一些球形气球贴在一堵用<code>XY</code>平面表示的墙面上。墙面上的气球记录在整数数组<code>points</code>，其中<code>points[i] = [xstart, xend]</code>表示水平直径在<code>xstart</code>和<code>xend</code>之间的气球。你不知道气球的确切<code>y</code>坐标。</p>\n<p>一支弓箭可以沿着<code>x</code>轴从不同点<strong>完全垂直</strong>地射出。在坐标<code>x</code>处射出一支箭，若有一个气球的直径的开始和结束坐标为<code>xstart</code>，<code>xend</code>，且满足<code>xstart ≤ x ≤ xend</code>，则该气球会被<strong>引爆</strong>。可以射出的弓箭的数量<strong>没有限制</strong>。弓箭一旦被射出之后，可以无限地前进。</p>",readingTime:{minutes:2.92,words:877},title:"452, 用最少数量的箭引爆气球",icon:"discover",order:12,type:"article"}}],["/zh/algorithm/leetcode/greedy/455_assign_cookies.html",{loader:()=>r.e(75832).then(r.bind(r,45745)),meta:{date:17089056e5,category:["greedy"],tag:["easy","greedy","array","two pointers","sorting"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。</p>\n<p>对每个孩子<code>i</code>，都有一个胃口值<code>g[i]</code>，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干<code>j</code>，都有一个尺寸<code>s[j]</code>。如果<code>s[j] &gt;= g[i]</code>，我们可以将这个饼干<code>j</code>分配给孩子<code>i</code>，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。</p>\n<p><strong>示例 1</strong><br>\n输入: g = [1, 2, 3], s = [1, 1]<br>\n输出: 1<br>\n解释: 你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。所以你应该输出1。</p>",readingTime:{minutes:2.28,words:685},title:"455, 分发饼干",icon:"discover",order:1,type:"article"}}],["/zh/algorithm/leetcode/greedy/45_jump_game_ii.html",{loader:()=>r.e(27486).then(r.bind(r,64679)),meta:{date:17106336e5,category:["greedy"],tag:["medium","array","greedy","dynamic programming"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给定一个长度为<code>n</code>的<code>0</code><strong>索引</strong>整数数组<code>nums</code>。初始位置为<code>nums[0]</code>。</p>\n<p>每个元素<code>nums[i]</code>表示从索引<code>i</code>向前跳转的最大长度。换句话说，如果你在<code>nums[i]</code>处，你可以跳转到任意<code>nums[i + j]</code>处:</p>\n<ul>\n<li><code>0 &lt;= j &lt;= nums[i]</code></li>\n<li><code>i + j &lt; n</code></li>\n</ul>",readingTime:{minutes:1.69,words:507},title:"45, 跳跃游戏II",icon:"discover",order:11,type:"article"}}],["/zh/algorithm/leetcode/greedy/53_maximum_subarray.html",{loader:()=>r.e(48429).then(r.bind(r,12294)),meta:{date:17112384e5,category:["greedy"],tag:["medium","array","divide and conquer","dynamic programming"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给你一个整数数组<code>nums</code>，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>\n<p><strong>子数组</strong>是数组中的一个连续部分。</p>\n<p><strong>示例 1</strong><br>\n输入: nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]<br>\n输出: 6<br>\n解释: 连续子数组<code>[4,-1,2,1]</code>的和最大，为<code>6</code>。</p>\n<p><strong>示例 2</strong><br>\n输入: nums = [1]<br>\n输出: 1</p>",readingTime:{minutes:3.19,words:958},title:"53, 最大子序和",icon:"discover",order:16,type:"article"}}],["/zh/algorithm/leetcode/greedy/55_jump_game.html",{loader:()=>r.e(8816).then(r.bind(r,29589)),meta:{date:17103744e5,category:["greedy"],tag:["medium","array","greedy","dynamic programming"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给你一个非负整数数组<code>nums</code>，你最初位于数组的<strong>第一个下标</strong>。数组中的每个元素代表你在该位置可以跳跃的最大长度。</p>\n<p>判断你是否能够到达最后一个下标，如果可以，返回<code>true</code>；否则，返回<code>false</code>。</p>\n<p><strong>示例 1</strong><br>\n输入: nums = [2, 3, 1, 1, 4]<br>\n输出: true<br>\n解释: 可以先跳<code>1</code>步，从下标<code>0</code>到达下标<code>1</code>, 然后再从下标<code>1</code>跳<code>3</code>步到达最后一个下标。</p>",readingTime:{minutes:1.53,words:458},title:"55, 跳跃游戏",icon:"discover",order:10,type:"article"}}],["/zh/algorithm/leetcode/greedy/56_merge_intervals.html",{loader:()=>r.e(45939).then(r.bind(r,51772)),meta:{date:1711152e6,category:["greedy"],tag:["medium","array","sorting"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>以数组<code>intervals</code>表示若干个区间的集合，其中单个区间为<code>intervals[i] = [starti, endi]</code>。请你合并所有重叠的区间，并返回<em>一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间</em>。</p>\n<p><strong>示例 1</strong><br>\n输入: intervals = [[1, 3], [2, 6], [8, 10], [15, 18]]<br>\n输出: [[1, 6], [8, 10], [15, 18]]<br>\n解释: 区间<code>[1, 3]</code>和<code>[2, 6]</code>重叠, 将它们合并为<code>[1, 6]</code>.</p>",readingTime:{minutes:2,words:599},title:"56, 合并区间",icon:"discover",order:15,type:"article"}}],["/zh/algorithm/leetcode/greedy/714_best_time_to_buy_and_sell_stock_with_transaction_fee.html",{loader:()=>r.e(58409).then(r.bind(r,72767)),meta:{date:17096832e5,category:["greedy"],tag:["medium","greedy","array","dynamic programming"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给定一个整数数组<code>prices</code>，其中<code>prices[i]</code>表示第<code>i</code>天的股票价格；整数<code>fee</code>代表了交易股票的手续费用。</p>\n<p>你可以无限次地完成交易，但是你每笔交易都需要付手续费。如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。</p>\n<p>返回获得利润的最大值。</p>\n<p><strong>注意:</strong> 这里的一笔交易指买入持有并卖出股票的整个过程，每笔交易你只需要为支付一次手续费。</p>\n<p><strong>示例 1</strong><br>\n输入: prices = [1, 3, 2, 8, 4, 9], fee = 2<br>\n输出: 8<br>\n解释: 能够达到的最大利润:<br>\n在此处买入<code>prices[0] = 1</code><br>\n在此处卖出<code>prices[3] = 8</code><br>\n在此处买入<code>prices[4] = 4</code><br>\n在此处卖出<code>prices[5] = 9</code><br>\n总利润:&nbsp;<code>((8 - 1) - 2) + ((9 - 4) - 2) = 8</code></p>",readingTime:{minutes:2.66,words:799},title:"714, 买卖股票的最佳时机含手续费",icon:"discover",order:7,type:"article"}}],["/zh/algorithm/leetcode/greedy/738_monotone_increasing_digits.html",{loader:()=>r.e(9835).then(r.bind(r,1420)),meta:{date:17095104e5,category:["greedy"],tag:["medium","greedy","math"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>当且仅当每个相邻位数上的数字<code>x</code>和<code>y</code>满足<code>x &lt;= y</code>时，我们称这个整数是<strong>单调递增</strong>的。</p>\n<p>给定一个整数<code>n</code>，返回<em>小于或等于<code>n</code>的最大数字，且数字呈<strong>单调递增</strong></em>。</p>\n<p><strong>示例 1</strong><br>\n输入: n = 10<br>\n输出: 9</p>\n<p><strong>示例 2</strong><br>\n输入: n = 1234<br>\n输出: 1234</p>",readingTime:{minutes:1.31,words:393},title:"738, 单调递增的数字",icon:"discover",order:5,type:"article"}}],["/zh/algorithm/leetcode/greedy/763_partition_labels.html",{loader:()=>r.e(64493).then(r.bind(r,12332)),meta:{date:17109792e5,category:["greedy"],tag:["medium","greedy","two pointers","hash table","string"],sticky:!0,excerpt:'<h2>一、题目描述</h2>\n<p>给你一个字符串 s 。我们要把这个字符串划分为尽可能多的片段，同一字母最多出现在一个片段中。</p>\n<p>注意，划分结果需要满足：将所有划分结果按顺序连接，得到的字符串仍然是 s 。</p>\n<p>返回一个表示每个字符串片段的长度的列表。</p>\n<p><strong>示例 1</strong><br>\n输入: s = "ababcbacadefegdehijhklij"<br>\n输出: [9, 7, 8]<br>\n解释:<br>\n划分结果为<code>"ababcbaca"</code>、<code>"defegde"</code>、<code>"hijhklij"</code>。<br>\n每个字母最多出现在一个片段中。<br>\n像<code>"ababcbacadefegde"</code>, <code>"hijhklij"</code>这样的划分是错误的，因为划分的片段数较少。</p>',readingTime:{minutes:1.46,words:439},title:"763, 划分字母区间",icon:"discover",order:14,type:"article"}}],["/zh/algorithm/leetcode/greedy/860_lemonade_change.html",{loader:()=>r.e(99447).then(r.bind(r,45312)),meta:{date:17091648e5,category:["greedy"],tag:["easy","greedy","array"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>在柠檬水摊上，每一杯柠檬水的售价为<code>5</code>美元。顾客排队购买你的产品，（按账单<code>bills</code>支付的顺序）一次购买一杯。</p>\n<p>每位顾客只买一杯柠檬水，然后向你付<code>5</code>美元、<code>10</code>美元或<code>20</code>美元。你必须给每个顾客正确找零，也就是说净交易是每位顾客向你支付<code>5</code>美元。</p>\n<p>注意，一开始你手头没有任何零钱。</p>\n<p>给你一个整数数组<code>bills</code>，其中<code>bills[i]</code>是第<code>i</code>位顾客付的账。如果你能给每位顾客正确找零，返回<code>true</code>，否则返回<code>false</code>。</p>",readingTime:{minutes:2.16,words:649},title:"860, 柠檬水找零",icon:"discover",order:3,type:"article"}}],["/zh/algorithm/leetcode/greedy/968_binary_tree_cameras.html",{loader:()=>r.e(79495).then(r.bind(r,59234)),meta:{date:17114112e5,category:["greedy"],tag:["hard","binary tree","depth first search","dynamic programming"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给定一个二叉树，我们在树的节点上安装摄像头。</p>\n<p>节点上的每个摄影头都可以监视<strong>其父对象、自身及其直接子对象</strong>。</p>\n<p>计算监控树的所有节点所需的最小摄像头数量。</p>\n<p><strong>示例 1</strong><br>\n<br>\n输入: root = [0, 0, null, 0, 0]<br>\n输出: 1<br>\n解释: 如图所示，一台摄像头足以监控所有节点。</p>\n<p><strong>示例 2</strong><br>\n<br>\n输入: root = [0, 0, null, 0, null, 0, null, null, 0]<br>\n输出: 2<br>\n解释: 需要至少两个摄像头来监视树的所有节点。上图显示了摄像头放置的有效位置之一。</p>",readingTime:{minutes:3.71,words:1114},title:"968, 监控二叉树",icon:"discover",order:18,type:"article"}}],["/zh/algorithm/leetcode/greedy/",{loader:()=>r.e(3e4).then(r.bind(r,36318)),meta:{date:17088192e5,category:["leetcode"],tag:["greedy"],sticky:!1,excerpt:"<h2>贪心算法</h2>\n<p><strong>贪心算法</strong>（greedy algorithm，又称<strong>贪婪算法</strong>）是指，在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，算法得到的是在某种意义上的局部最优解。</p>\n<p>贪心算法不是对所有问题都能得到整体最优解，关键是贪心策略的选择。</p>\n<p>贪心算法一般分为如下四步：</p>\n<ul>\n<li>将问题分解为若干个子问题</li>\n<li>找出适合的贪心策略</li>\n<li>求解每一个子问题的最优解</li>\n<li>将局部最优解堆叠成全局最优解</li>\n</ul>",readingTime:{minutes:1.2,words:360},title:"贪心算法",icon:"discover",order:9,type:"article"}}],["/zh/algorithm/leetcode/hashtable/15_three_sum.html",{loader:()=>r.e(29459).then(r.bind(r,19546)),meta:{date:16996608e5,category:["hashtable"],tag:["medium","array","two pointers","sorting"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给你一个整数数组<code>nums</code>，判断是否存在三元组<code>[nums[i], nums[j], nums[k]]</code>满足<code>i != j、i != k 且 j != k</code>，同时还满足<code>nums[i] + nums[j] + nums[k] == 0</code>。请你返回所有和为<code>0</code>且不重复的三元组。</p>\n<p><strong>注意</strong>：答案中不可以包含重复的三元组。</p>\n<p><strong>示例 1</strong><br>\n输入: nums = [-1, 0, 1, 2, -1, -4]<br>\n输出: [[-1, -1, 2], [-1, 0, 1]]<br>\n解释:<br>\nnums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0。<br>\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0。<br>\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0。<br>\n不同的三元组是[-1, 0, 1] 和 [-1, -1, 2]。<br>\n注意，输出的顺序和三元组的顺序并不重要。</p>",readingTime:{minutes:2.25,words:676},title:"15, 三数之和",icon:"discover",order:9,type:"article"}}],["/zh/algorithm/leetcode/hashtable/16_three_sum_closest.html",{loader:()=>r.e(18190).then(r.bind(r,34148)),meta:{date:16997472e5,category:["hashtable"],tag:["medium","array","two pointers","sorting"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给你一个长度为<code>n</code>的整数数组<code>nums</code>和一个目标值<code>target</code>。请你从<code>nums</code>中选出三个整数，使它们的和与<code>target</code>最接近。</p>\n<p>返回这三个数的和。</p>\n<p>假定每组输入恰好只存在一个解。</p>\n<p><strong>示例 1</strong><br>\n输入: nums = [-1, 2, 1, -4], target = 1<br>\n输出: 2<br>\n解释: 与target最接近的和是2 (-1 + 2 + 1 = 2)。</p>",readingTime:{minutes:1.92,words:575},title:"16, 最接近的三数之和",icon:"discover",order:10,type:"article"}}],["/zh/algorithm/leetcode/hashtable/18_four_sum.html",{loader:()=>r.e(36586).then(r.bind(r,63790)),meta:{date:16998336e5,category:["hashtable"],tag:["medium","array","two pointers","sorting"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给你一个由<code>n</code>个整数组成的数组<code>nums</code>，和一个目标值<code>target</code>。请你找出并返回满足下述全部条件且<strong>不重复</strong>的四元组<code>[nums[a], nums[b], nums[c], nums[d]]</code>（若两个四元组元素一一对应，则认为两个四元组重复）：</p>\n<ul>\n<li><code>0 &lt;= a, b, c, d &lt; n</code></li>\n<li><code>a</code>、<code>b</code>、<code>c</code>和<code>d</code><strong>互不相同</strong></li>\n<li><code>nums[a] + nums[b] + nums[c] + nums[d] == target</code></li>\n</ul>",readingTime:{minutes:2.78,words:833},title:"18, 四数之和",icon:"discover",order:11,type:"article"}}],["/zh/algorithm/leetcode/hashtable/1_two_sum.html",{loader:()=>r.e(68978).then(r.bind(r,46230)),meta:{date:16995744e5,category:["hashtable"],tag:["easy","array","hash table"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给定一个整数数组<code>nums</code>和一个整数目标值<code>target</code>，请你在该数组中找出<strong>和为目标值</strong><code>target</code>的那<strong>两个</strong>整数，并返回它们的数组下标。</p>\n<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p>\n<p>你可以按任意顺序返回答案。</p>\n<p><strong>示例 1</strong><br>\n输入: nums = [2, 7, 11, 15], target = 9<br>\n输出: [0, 1]<br>\n解释: 因为<code>nums[0] + nums[1] == 9</code>，返回[0, 1]。</p>",readingTime:{minutes:1.55,words:466},title:"1, 两数之和",icon:"discover",order:8,type:"article"}}],["/zh/algorithm/leetcode/hashtable/202_happy_number.html",{loader:()=>r.e(33177).then(r.bind(r,53642)),meta:{date:16995744e5,category:["hashtable"],tag:["easy","hash table","math","two pointers"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>编写一个算法来判断一个数<code>n</code>是不是快乐数。</p>\n<p>「<strong>快乐数</strong>」的定义为：</p>\n<ul>\n<li>对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。</li>\n<li>然后重复这个过程直到这个数变为<code>1</code>，也可能是<strong>无限循环</strong>但始终变不到<code>1</code>。</li>\n<li>如果这个过程的结果为<code>1</code>，那么这个数就是快乐数。</li>\n</ul>\n<p>如果<code>n</code>是<em>快乐数</em>就返回<code>true</code>；不是则返回<code>false</code>。</p>",readingTime:{minutes:1.34,words:401},title:"202, 快乐数",icon:"discover",order:7,type:"article"}}],["/zh/algorithm/leetcode/hashtable/242_valid_anagram.html",{loader:()=>r.e(35927).then(r.bind(r,48577)),meta:{date:1698624e6,category:["hashtable"],tag:["easy","hash table","string","sorting"],sticky:!0,excerpt:'<h2>一、题目描述</h2>\n<p>给定两个字符串<code>s</code>和<code>t</code>，编写一个函数来判断<code>t</code>是否是<code>s</code>的字母异位词。</p>\n<p>注意：若<code>s</code>和<code>t</code>中每个字符出现的次数都相同，则称<code>s</code>和<code>t</code>互为字母异位词。</p>\n<p><strong>示例 1</strong><br>\n输入: s = "anagram", t = "nagaram"<br>\n输出: true</p>\n<p><strong>示例 2</strong><br>\n输入: s = "rat", t = "car"<br>\n输出: false</p>',readingTime:{minutes:1.37,words:412},title:"242, 有效的字母异位词",icon:"discover",order:1,type:"article"}}],["/zh/algorithm/leetcode/hashtable/349_intersection_of_two_arrays.html",{loader:()=>r.e(33604).then(r.bind(r,80234)),meta:{date:16993152e5,category:["hashtable"],tag:["easy","array","hash table","binary search","sorting","two pointers"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给定两个数组<code>nums1</code>和<code>nums2</code>，返回<em>它们的交集</em>。输出结果中的每个元素一定是<strong>唯一</strong>的。我们可以<strong>不考虑输出结果的顺序</strong>。</p>\n<p><strong>示例 1</strong><br>\n输入: nums1 = [1, 2, 2, 1], nums2 = [2, 2]<br>\n输出: [2]</p>\n<p><strong>示例 2</strong><br>\n输入: nums1 = [4, 9, 5], nums2 = [9, 4, 9, 8, 4]<br>\n输出: [9, 4]<br>\n解释: [4, 9]也是可以通过的</p>",readingTime:{minutes:1.29,words:388},title:"349, 两个数组的交集",icon:"discover",order:5,type:"article"}}],["/zh/algorithm/leetcode/hashtable/350_intersection_of_two_arrays_ii.html",{loader:()=>r.e(32275).then(r.bind(r,23922)),meta:{date:16994016e5,category:["hashtable"],tag:["easy","array","hash table","binary search","sorting","two pointers"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给你两个整数数组<code>nums1</code>和<code>nums2</code>，请你以数组形式返回两数组的交集。返回结果中每个元素出现的次数，应与元素在两个数组中都出现的次数一致（如果出现次数不一致，则考虑取较小值）。可以不考虑输出结果的顺序。</p>\n<p><strong>示例 1</strong><br>\n输入: nums1 = [1, 2, 2, 1], nums2 = [2, 2]<br>\n输出: [2, 2]</p>\n<p><strong>示例 2</strong><br>\n输入: nums1 = [4, 9, 5], nums2 = [9, 4, 9, 8, 4]<br>\n输出: [4, 9]<br>\n解释: [9, 4]也是可以接受的。</p>",readingTime:{minutes:2,words:601},title:"350, 两个数组的交集II",icon:"discover",order:6,type:"article"}}],["/zh/algorithm/leetcode/hashtable/383_ransom_note.html",{loader:()=>r.e(87616).then(r.bind(r,21484)),meta:{date:16988832e5,category:["hashtable"],tag:["easy","hash table","string","counting"],sticky:!0,excerpt:'<h2>一、题目描述</h2>\n<p>给你两个字符串:<code>ransomNote</code>和<code>magazine</code>，判断<code>ransomNote</code>能不能由<code>magazine</code>里面的字符构成。</p>\n<p>如果可以，返回<code>true</code>；否则返回<code>false</code>。</p>\n<p><code>magazine</code>中的每个字符只能在<code>ransomNote</code>中使用一次。</p>\n<p><strong>示例 1</strong><br>\n输入: ransomNote = "a", magazine = "b"<br>\n输出: false</p>',readingTime:{minutes:.86,words:257},title:"383, 赎金信",icon:"discover",order:2,type:"article"}}],["/zh/algorithm/leetcode/hashtable/438_find_all_anagrams_in_a_string.html",{loader:()=>r.e(87848).then(r.bind(r,99281)),meta:{date:16992288e5,category:["hashtable"],tag:["medium","hash table","string","sliding window"],sticky:!0,excerpt:'<h2>一、题目描述</h2>\n<p>给定两个字符串<code>s</code>和<code>p</code>，找到<code>s</code>中所有<code>p</code>的<strong>异位词</strong>的子串，返回这些子串的起始索引。不考虑答案输出的顺序。</p>\n<p><strong>异位词</strong>指由相同字母重排列形成的字符串（包括相同的字符串）。</p>\n<p><strong>示例 1</strong><br>\n输入: s = "cbaebabacd", p = "abc"<br>\n输出: [0, 6]<br>\n解释:<br>\n起始索引等于 0 的子串是 "cba", 它是 "abc" 的异位词。<br>\n起始索引等于 6 的子串是 "bac", 它是 "abc" 的异位词。</p>',readingTime:{minutes:3.16,words:949},title:"438, 找到字符串中所有字母异位词",icon:"discover",order:4,type:"article"}}],["/zh/algorithm/leetcode/hashtable/454_four_sum_ii.html",{loader:()=>r.e(65625).then(r.bind(r,30058)),meta:{date:169992e7,category:["hashtable"],tag:["medium","array","hash table"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给你四个整数数组<code>nums1</code>、<code>nums2</code>、<code>nums3</code>和<code>nums4</code>，数组长度都是<code>n</code>，请你计算有多少个元组<code>(i, j, k, l)</code>能满足：</p>\n<ul>\n<li><code>0 &lt;= i, j, k, l &lt; n</code></li>\n<li><code>nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0</code></li>\n</ul>\n<p><strong>示例 1</strong><br>\n输入: nums1 = [1, 2], nums2 = [-2, -1], nums3 = [-1, 2], nums4 = [0, 2]<br>\n输出: 2<br>\n解释: 两个元组如下：</p>",readingTime:{minutes:1.28,words:384},title:"454, 四数之和II",icon:"discover",order:12,type:"article"}}],["/zh/algorithm/leetcode/hashtable/49_group_anagrams.html",{loader:()=>r.e(60978).then(r.bind(r,80684)),meta:{date:16989696e5,category:["hashtable"],tag:["medium","array","hash table","string","sorting"],sticky:!0,excerpt:'<h2>一、题目描述</h2>\n<p>给你一个字符串数组，请你将<strong>字母异位词</strong>组合在一起。可以按任意顺序返回结果列表。</p>\n<p><strong>字母异位词</strong>是由重新排列源单词的所有字母得到的一个新单词。</p>\n<p><strong>示例 1</strong><br>\n输入: strs = ["eat", "tea", "tan", "ate", "nat", "bat"]<br>\n输出: [["bat"], ["nat", "tan"], ["ate", "eat", "tea"]]</p>\n<p><strong>示例 2</strong><br>\n输入: strs = [""]<br>\n输出: [[""]]</p>',readingTime:{minutes:1.41,words:423},title:"49, 字母异位词分组",icon:"discover",order:3,type:"article"}}],["/zh/algorithm/leetcode/hashtable/",{loader:()=>r.e(12912).then(r.bind(r,53747)),meta:{date:16984512e5,category:["leetcode"],tag:["hashtable"],sticky:!1,excerpt:"<h2>哈希表的理论知识</h2>\n<h3>概念</h3>\n<p>散列表（Hash table，也叫哈希表），是根据键（Key）而直接访问在内存储存位置的数据结构。也就是说，它通过计算出一个键值的函数，将所需查询的数据映射到表中一个位置来让人访问，这加快了查找速度。这个映射函数称做<strong>散列函数</strong>，存放记录的数组称做<strong>散列表</strong>。</p>\n<figure><figcaption>hash table</figcaption></figure>\n<h3>哈希函数</h3>\n<p>若关键字为<code>k</code>，则其值存放在<code>f(k)</code>的存储位置上。由此，不需比较便可直接取得所查记录。称这个对应关系<code>f</code>为散列函数。</p>",readingTime:{minutes:1.91,words:572},title:"哈希表",icon:"discover",order:3,type:"article"}}],["/zh/algorithm/leetcode/mono_stack/",{loader:()=>r.e(72564).then(r.bind(r,40902)),meta:{date:16957728e5,category:["leetcode"],tag:["monotonic stack"],sticky:!0,readingTime:{minutes:.07,words:20},title:"单调栈",icon:"discover",order:11,type:"article"}}],["/zh/algorithm/leetcode/linkedlist/141_linked_list_cycle.html",{loader:()=>r.e(7285).then(r.bind(r,32915)),meta:{date:16982784e5,category:["linkedlist"],tag:["easy","hash table","linked list","two pointers"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给你一个链表的头节点<code>head</code>，判断链表中是否有环。</p>\n<p>如果链表中有某个节点，可以通过连续跟踪<code>next</code>指针再次到达，则链表中存在环。<br>\n为了表示给定链表中的环，评测系统内部使用整数<code>pos</code>来表示链表尾连接到链表中的位置（索引从0开始）。<br>\n<strong>注意：<code>pos</code>不作为参数进行传递</strong>。仅仅是为了标识链表的实际情况。</p>\n<p>如果<em>链表中存在环</em>，则返回<code>true</code>。否则返回<code>false</code>。</p>",readingTime:{minutes:1.83,words:549},title:"141, 环形链表",icon:"discover",order:7,type:"article"}}],["/zh/algorithm/leetcode/linkedlist/142_linked_list_cycle_II.html",{loader:()=>r.e(61877).then(r.bind(r,34508)),meta:{date:16983648e5,category:["linkedlist"],tag:["medium","hash table","linked list","two pointers"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给定一个链表的头节点<code>head</code>，返回链表开始入环的第一个节点。<em>如果链表无环，则返回<code>null</code></em>。</p>\n<p>如果链表中有某个节点，可以通过连续跟踪<code>next</code>指针再次到达，则链表中存在环。<br>\n为了表示给定链表中的环，评测系统内部使用整数<code>pos</code>来表示链表尾连接到链表中的位置（<strong>索引从<code>0</code>开始</strong>）。<br>\n如果<code>pos</code>是<code>-1</code>，则在该链表中没有环。<strong>注意：<code>pos</code>不作为参数进行传递</strong>，仅仅是为了标识链表的实际情况。</p>",readingTime:{minutes:2.03,words:610},title:"142, 环形链表II",icon:"discover",order:8,type:"article"}}],["/zh/algorithm/leetcode/linkedlist/160_intersection_of_two_linked_lists.html",{loader:()=>r.e(53115).then(r.bind(r,6958)),meta:{date:1698192e6,category:["linkedlist"],tag:["easy","hash table","linked list","two pointers"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给你两个单链表的头节点<code>headA</code>和<code>headB</code>，请你找出并返回两个单链表相交的起始节点。如果两个链表不存在相交节点，返回<code>null</code>。</p>\n<p>图示两个链表在节点 c1 开始相交：<br>\n<br>\n题目数据<strong>保证</strong>整个链式结构中不存在环。<br>\n<strong>注意</strong>，函数返回结果后，链表必须<strong>保持其原始结构</strong>。</p>\n<p><strong>自定义评测:</strong><br>\n<code>评测系统</code>的输入如下（你设计的程序<code>不适用</code>此输入）：</p>",readingTime:{minutes:3.58,words:1074},title:"160, 链表相交",icon:"discover",order:6,type:"article"}}],["/zh/algorithm/leetcode/linkedlist/19_remove_nth_node_from_end_of_list.html",{loader:()=>r.e(27230).then(r.bind(r,53034)),meta:{date:16981056e5,category:["linkedlist"],tag:["medium","linked list","two pointers"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给你一个链表，删除链表的倒数第n个结点，并且返回链表的头结点。</p>\n<p><strong>示例 1</strong><br>\n<br>\n输入: head = [1, 2, 3, 4, 5], n = 2<br>\n输出: [1, 2, 3, 5]</p>\n<p><strong>示例 2</strong><br>\n输入: head = [1], n = 1<br>\n输出: []</p>\n<p><strong>示例 3</strong><br>\n输入: head = [1, 2], n = 1<br>\n输出: [1]</p>\n<p><strong>提示</strong></p>",readingTime:{minutes:2.72,words:817},title:"19, 删除链表的倒数第N个节点",icon:"discover",order:5,type:"article"}}],["/zh/algorithm/leetcode/linkedlist/203_remove_linked_list_elements.html",{loader:()=>r.e(73586).then(r.bind(r,65555)),meta:{date:169776e7,category:["linkedlist"],tag:["easy","linked list","recursion"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给你一个链表的头节点head和一个整数val，请你删除链表中所有满足Node.val == val的节点，并返回新的头节点。</p>\n<p><strong>示例 1</strong><br>\n<br>\n输入: head = [1, 2, 6, 3, 4, 5, 6], val = 6<br>\n输出: [1, 2, 3, 4, 5]</p>\n<p><strong>示例 2</strong><br>\n输入: head = [], val = 1<br>\n输出: []</p>\n<p><strong>示例 3</strong><br>\n输入: head = [7, 7, 7, 7], val = 7<br>\n输出: []</p>",readingTime:{minutes:1.27,words:381},title:"203, 移除链表元素",icon:"discover",order:1,type:"article"}}],["/zh/algorithm/leetcode/linkedlist/206_reverse_linked_list.html",{loader:()=>r.e(46041).then(r.bind(r,59047)),meta:{date:16979328e5,category:["linkedlist"],tag:["easy","linked list","recursion"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给你单链表的头节点head，请你反转链表，并返回反转后的链表。</p>\n<p><strong>示例 1</strong><br>\n<br>\n输入: head = [1, 2, 3, 4, 5]<br>\n输出: [5, 4, 3, 2, 1]</p>\n<p><strong>示例 2</strong><br>\n<br>\n输入: head = [1, 2]<br>\n输出: [2, 1]</p>\n<p><strong>示例 3</strong><br>\n输入: head = []<br>\n输出: []</p>\n<p><strong>提示</strong></p>\n",readingTime:{minutes:1.24,words:371},title:"206, 反转链表",icon:"discover",order:3,type:"article"}}],["/zh/algorithm/leetcode/linkedlist/24_swap_nodes_in_pairs.html",{loader:()=>r.e(65567).then(r.bind(r,16379)),meta:{date:16980192e5,category:["linkedlist"],tag:["medium","linked list","recursion"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即：只能进行节点交换）。</p>\n<p><strong>示例 1</strong><br>\n<br>\n输入: head = [1, 2, 3, 4]<br>\n输出: [2, 1, 4, 3]</p>\n<p><strong>示例 2</strong><br>\n输入: head = []<br>\n输出: []</p>\n<p><strong>示例 3</strong><br>\n输入: head = [1]<br>\n输出: [1]</p>\n<p><strong>提示</strong></p>",readingTime:{minutes:1.39,words:417},title:"24, 两两交换链表中的节点",icon:"discover",order:4,type:"article"}}],["/zh/algorithm/leetcode/linkedlist/707_design_linked_list.html",{loader:()=>r.e(79199).then(r.bind(r,9302)),meta:{date:16978464e5,category:["linkedlist"],tag:["medium","linked list","design"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>你可以选择使用单链表或者双链表，设计并实现自己的链表。</p>\n<p>单链表中的节点应该具备两个属性：<code>val</code>和<code>next</code>。<code>val</code>是当前节点的值，<code>next</code>是指向下一个节点的指针/引用。</p>\n<p>如果是双向链表，则还需要属性<code>prev</code>以指示链表中的上一个节点。假设链表中的所有节点下标从0开始。</p>\n<p>实现MyLinkedList类：</p>\n<ul>\n<li><code>MyLinkedList()</code> 初始化<code>MyLinkedList</code>对象。</li>\n<li><code>int get(int index)</code> 获取链表中下标为<code>index</code>的节点的值。如果下标无效，则返回-1。</li>\n<li><code>void addAtHead(int val)</code> 将一个值为<code>val</code>的节点插入到链表中第一个元素之前。在插入完成后，新节点会成为链表的第一个节点。</li>\n<li><code>void addAtTail(int val)</code> 将一个值为<code>val</code>的节点追加到链表中作为链表的最后一个元素。</li>\n<li><code>void addAtIndex(int index, int val)</code> 将一个值为<code>val</code>的节点插入到链表中下标为<code>index</code>的节点之前。如果<code>index</code>等于链表的长度，那么该节点会被追加到链表的末尾。如果<code>index</code>比长度更大，该节点将<strong>不会插入</strong>到链表中。</li>\n<li><code>void deleteAtIndex(int index)</code> 如果下标有效，则删除链表中下标为<code>index</code>的节点。</li>\n</ul>",readingTime:{minutes:6.48,words:1943},title:"707, 设计链表",icon:"discover",order:2,type:"article"}}],["/zh/algorithm/leetcode/linkedlist/",{loader:()=>r.e(62457).then(r.bind(r,3766)),meta:{date:169776e7,category:["leetcode"],tag:["linkedlist"],sticky:!1,excerpt:"<h2>链表</h2>\n<p>链表是一种通过指针串联在一起的线性结构，每一个节点由两部分组成，一个是数据域，另一个是指针域。<br>\n</p>\n<h3>链表的类型</h3>\n<ul>\n<li>单链表<br>\n</li>\n<li>双链表<br>\n</li>\n<li>循环单链表<br>\n</li>\n<li>循环双链表<br>\n</li>\n</ul>\n<h3>链表的内存分配</h3>\n<p>链表中的节点在内存中不是连续分布的 ，而是散乱分布在内存中的某地址上。<br>\n</p>\n<h3>链表的操作</h3>\n<h4>添加节点</h4>\n<p><br>\n</p>\n<h4>删除节点</h4>\n<p><br>\n</p>",readingTime:{minutes:1,words:299},title:"链表",icon:"discover",order:2,type:"article"}}],["/zh/algorithm/leetcode/other/",{loader:()=>r.e(65106).then(r.bind(r,46911)),meta:{date:16957728e5,category:["leetcode"],tag:["other"],sticky:!0,readingTime:{minutes:.06,words:18},title:"其他",icon:"discover",order:13,type:"article"}}],["/zh/algorithm/leetcode/string/151_reverse_words_in_a_string.html",{loader:()=>r.e(33353).then(r.bind(r,87668)),meta:{date:17005248e5,category:["string"],tag:["medium","string","two pointers"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给你一个字符串<code>s</code>，请你反转字符串中<strong>单词</strong>的顺序。</p>\n<p><strong>单词</strong>是由非空格字符组成的字符串。<code>s</code>中使用至少一个空格将字符串中的<strong>单词</strong>分隔开。</p>\n<p>返回<strong>单词</strong>顺序颠倒且<strong>单词</strong>之间用单个空格连接的结果字符串。</p>\n<p><strong>注意</strong>：输入字符串<code>s</code>中可能会存在前导空格、尾随空格或者单词间的多个空格。返回的结果字符串中，单词间应当仅用单个空格分隔，且不包含任何额外的空格。</p>",readingTime:{minutes:3.09,words:927},title:"151, 翻转字符串里的单词",icon:"discover",order:4,type:"article"}}],["/zh/algorithm/leetcode/string/28_find_the_index_of_the_first_occurrence_in_a_string.html",{loader:()=>r.e(98395).then(r.bind(r,86297)),meta:{date:17006976e5,category:["string"],tag:["easy","string","string matching","two pointers"],sticky:!0,excerpt:'<h2>一、题目描述</h2>\n<p>给你两个字符串<code>haystack</code>和<code>needle</code>，请你在<code>haystack</code>字符串中找出<code>needle</code>字符串的第一个匹配项的下标（下标从<code>0</code>开始）。如果<code>needle</code>不是<code>haystack</code>的一部分，则返回 <code>-1</code>。</p>\n<p><strong>示例 1</strong><br>\n输入: <code>haystack = "sadbutsad", needle = "sad"</code><br>\n输出: <code>0</code><br>\n解释: <code>"sad"</code>在下标<code>0</code>和<code>6</code>处匹配。第一个匹配项的下标是<code>0</code>，所以返回<code>0</code>。</p>',readingTime:{minutes:1.92,words:577},title:"28, 找出字符串中第一个匹配项的下标",icon:"discover",order:6,type:"article"}}],["/zh/algorithm/leetcode/string/344_reverse_string.html",{loader:()=>r.e(12353).then(r.bind(r,20157)),meta:{date:17000928e5,category:["string"],tag:["easy","string","two pointers"],sticky:!0,excerpt:'<h2>一、题目描述</h2>\n<p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组<code>s</code>的形式给出。</p>\n<p>不要给另外的数组分配额外的空间，你必须<a href="https://zh.wikipedia.org/wiki/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95" target="_blank" rel="noopener noreferrer"><strong>原地</strong></a>修改输入数组，使用<code>O(1)</code>的额外空间解决这一问题。</p>\n<p><strong>示例 1</strong><br>\n输入: s = ["h", "e", "l", "l", "o"]<br>\n输出: ["o", "l", "l", "e", "h"]</p>',readingTime:{minutes:.92,words:276},title:"344, 反转字符串",icon:"discover",order:1,type:"article"}}],["/zh/algorithm/leetcode/string/459_repeated_substring_pattern.html",{loader:()=>r.e(40361).then(r.bind(r,94901)),meta:{date:1700784e6,category:["string"],tag:["easy","string","string matching"],sticky:!0,excerpt:'<h2>一、题目描述</h2>\n<p>给定一个非空的字符串<code>s</code>，检查是否可以通过由它的一个子串重复多次构成。</p>\n<p><strong>示例 1</strong><br>\n输入: <code>s = "abab"</code><br>\n输出: true<br>\n解释: 可由子串<code>"ab"</code>重复两次构成。</p>\n<p><strong>示例 2</strong><br>\n输入: <code>s = "aba"</code><br>\n输出: false</p>\n<p><strong>示例 3</strong><br>\n输入: <code>s = "abcabcabcabc"</code><br>\n输出: true<br>\n解释: 可由子串<code>"abc"</code>重复四次构成。(或子串<code>"abcabc"</code>重复两次构成。)</p>',readingTime:{minutes:1.53,words:460},title:"459, 重复的子字符串",icon:"discover",order:7,type:"article"}}],["/zh/algorithm/leetcode/string/541_reverse_string_ii.html",{loader:()=>r.e(4663).then(r.bind(r,46370)),meta:{date:17002656e5,category:["string"],tag:["easy","string","two pointers"],sticky:!0,excerpt:'<h2>一、题目描述</h2>\n<p>给定一个字符串<code>s</code>和一个整数<code>k</code>，从字符串开头算起，每计数至<code>2k</code>个字符，就反转这<code>2k</code>字符中的前<code>k</code>个字符。</p>\n<ul>\n<li>如果剩余字符少于<code>k</code>个，则将剩余字符全部反转。</li>\n<li>如果剩余字符小于<code>2k</code>但大于或等于<code>k</code>个，则反转前<code>k</code>个字符，其余字符保持原样。</li>\n</ul>\n<p><strong>示例 1</strong><br>\n输入: "abcdefg", k = 2<br>\n输出: "bacdfeg"</p>',readingTime:{minutes:1.07,words:320},title:"541, 反转字符串II",icon:"discover",order:2,type:"article"}}],["/zh/algorithm/leetcode/string/",{loader:()=>r.e(30729).then(r.bind(r,37458)),meta:{date:17000928e5,category:["leetcode"],tag:["string"],sticky:!1,excerpt:'<h2>字符串</h2>\n<p><br>\n字符串是由零个或多个字符组成的有限序列。</p>\n<h2>习题</h2>\n<h3>反转字符串</h3>\n<p><a href="/zh/algorithm/leetcode/string/344_reverse_string.html" target="_blank">344: 反转字符串</a><br>\n<a href="/zh/algorithm/leetcode/string/541_reverse_string_ii.html" target="_blank">541: 反转字符串II</a></p>\n<h3>替换数字</h3>\n<p><a href="/zh/algorithm/leetcode/string/kamacoder_54_replace_numbers.html" target="_blank">卡码网54: 替换数字</a></p>',readingTime:{minutes:.54,words:163},title:"字符串",icon:"discover",order:4,type:"article"}}],["/zh/algorithm/leetcode/string/kamacoder_54_replace_numbers.html",{loader:()=>r.e(99238).then(r.bind(r,73204)),meta:{date:17004384e5,category:["string"],tag:["easy","string"],sticky:!0,excerpt:'<h2>一、题目描述</h2>\n<p>给定一个字符串<code>s</code>，它包含小写字母和数字字符，请编写一个函数，将字符串中的字母字符保持不变，而将每个数字字符替换为<code>number</code>。 例如，对于输入字符串<code>"a1b2c3"</code>，函数应该将其转换为<code>"anumberbnumbercnumber"</code>。</p>\n<p><strong>示例 1</strong><br>\n输入: a1b2c3<br>\n输出: anumberbnumbercnumber</p>\n<p><strong>提示</strong></p>\n<ul>\n<li><code>1 &lt;= s.length &lt; 10000</code></li>\n</ul>',readingTime:{minutes:.64,words:193},title:"卡码网-54, 替换数字",icon:"discover",order:3,type:"article"}}],["/zh/algorithm/leetcode/string/kamacoder_55_right_rotated_string.html",{loader:()=>r.e(6662).then(r.bind(r,20795)),meta:{date:17006112e5,category:["string"],tag:["easy","string"],sticky:!0,excerpt:'<h2>一、题目描述</h2>\n<p>字符串的右旋转操作是把字符串尾部的若干个字符转移到字符串的前面。给定一个字符串<code>s</code>和一个正整数<code>k</code>，请编写一个函数，将字符串中的后面<code>k</code>个字符移到字符串的前面，实现字符串的右旋转操作。</p>\n<p>例如，对于输入字符串<code>"abcdefg"</code>和整数<code>2</code>，函数应该将其转换为<code>"fgabcde"</code>。</p>\n<p><strong>示例 1</strong><br>\n输入: k = 2, s = <code>"abcdefg"</code><br>\n输出: <code>"fgabcde"</code></p>',readingTime:{minutes:2.04,words:613},title:"卡码网-55, 右旋字符串",icon:"discover",order:5,type:"article"}}],["/zh/algorithm/leetcode/stack_queue/1047_remove_all_adjacent_duplicates_in_string.html",{loader:()=>r.e(17749).then(r.bind(r,94642)),meta:{date:17013024e5,category:["stack/queue"],tag:["easy","string","stack"],sticky:!0,excerpt:'<h2>一、题目描述</h2>\n<p>给出由小写字母组成的字符串<code>S</code>，<strong>重复项删除操作</strong>会选择两个相邻且相同的字母，并删除它们。</p>\n<p>在<code>S</code>上反复执行重复项删除操作，直到无法继续删除。</p>\n<p>在完成所有重复项删除操作后返回最终的字符串。答案保证唯一。</p>\n<p><strong>示例 1</strong><br>\n输入: <code>"abbaca"</code><br>\n输出: <code>"ca"</code><br>\n解释: 在<code>"abbaca"</code>中，我们可以删除<code>"bb"</code>由于两字母相邻且相同，这是此时唯一可以执行删除操作的重复项。之后我们得到字符串<code>"aaca"</code>，其中又只有<code>"aa"</code>可以执行重复项删除操作，所以最后的字符串为<code>"ca"</code>。</p>',readingTime:{minutes:1.72,words:516},title:"1047, 删除字符串中的所有相邻重复项",icon:"discover",order:4,type:"article"}}],["/zh/algorithm/leetcode/stack_queue/150_evaluate_reverse_polish_notation.html",{loader:()=>r.e(50856).then(r.bind(r,35266)),meta:{date:17013888e5,category:["stack/queue"],tag:["medium","array","math","stack"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给你一个字符串数组<code>tokens</code>，表示一个根据<a href=\"https://zh.wikipedia.org/wiki/%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E7%A4%BA%E6%B3%95\" target=\"_blank\" rel=\"noopener noreferrer\">逆波兰表示法</a>表示的算术表达式。</p>\n<p>请你计算该表达式。返回一个表示表达式值的整数。</p>\n<p><strong>注意：</strong></p>\n<ul>\n<li>有效的算符为<code>'+'</code>、<code>'-'</code>、<code>'*'</code>和<code>'/'</code>。</li>\n<li>每个操作数（运算对象）都可以是一个整数或者另一个表达式。</li>\n<li>两个整数之间的除法总是<strong>向零截断</strong>。</li>\n<li>表达式中不含除零运算。</li>\n<li>输入是一个根据逆波兰表示法表示的算术表达式。</li>\n<li>答案及所有中间计算结果可以用<strong>32 位</strong>整数表示。</li>\n</ul>",readingTime:{minutes:3.16,words:948},title:"150, 逆波兰表达式求值",icon:"discover",order:5,type:"article"}}],["/zh/algorithm/leetcode/stack_queue/20_valid_parentheses.html",{loader:()=>r.e(49314).then(r.bind(r,25337)),meta:{date:1701216e6,category:["stack/queue"],tag:["easy","string","stack"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给定一个只包括<code>'('</code>，<code>')'</code>，<code>'{'</code>，<code>'}'</code>，<code>'['</code>，<code>']'</code>的字符串<code>s</code>，判断字符串是否有效。</p>\n<p>有效字符串需满足：</p>\n<ol>\n<li>左括号必须用相同类型的右括号闭合。</li>\n<li>左括号必须以正确的顺序闭合。</li>\n<li>每个右括号都有一个对应的相同类型的左括号。</li>\n</ol>\n<p><strong>示例 1</strong><br>\n输入: s = <code>\"()\"</code><br>\n输出: true</p>",readingTime:{minutes:1.39,words:418},title:"20, 有效的括号",icon:"discover",order:3,type:"article"}}],["/zh/algorithm/leetcode/stack_queue/225_implement_stack_using_queues.html",{loader:()=>r.e(83872).then(r.bind(r,16129)),meta:{date:17011296e5,category:["stack/queue"],tag:["easy","stack","queue","design"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>请你仅使用两个队列实现一个后入先出（LIFO）的栈，并支持普通栈的全部四种操作（<code>push</code>、<code>top</code>、<code>pop</code>和<code>empty</code>）。</p>\n<p>实现<code>MyStack</code>类：</p>\n<ul>\n<li><code>void push(int x)</code>将元素<code>x</code>压入栈顶。</li>\n<li><code>int pop()</code>移除并返回栈顶元素。</li>\n<li><code>int top()</code>返回栈顶元素。</li>\n<li><code>boolean empty()</code>如果栈是空的，返回<code>true</code>；否则，返回<code>false</code>。</li>\n</ul>",readingTime:{minutes:2.44,words:733},title:"225, 用队列实现栈",icon:"discover",order:2,type:"article"}}],["/zh/algorithm/leetcode/stack_queue/232_implement_queue_using_stacks.html",{loader:()=>r.e(93176).then(r.bind(r,59161)),meta:{date:17010432e5,category:["stack/queue"],tag:["easy","stack","queue","design"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（<code>push</code>、<code>pop</code>、<code>peek</code>、<code>empty</code>）。</p>\n<p>实现<code>MyQueue</code>类：</p>\n<ul>\n<li><code>void push(int x)</code>将元素<code>x</code>推到队列的末尾</li>\n<li><code>int pop()</code>从队列的开头移除并返回元素</li>\n<li><code>int peek()</code>返回队列开头的元素</li>\n<li><code>boolean empty()</code>如果队列为空，返回<code>true</code>；否则，返回<code>false</code></li>\n</ul>",readingTime:{minutes:2.75,words:826},title:"232, 用栈实现队列",icon:"discover",order:1,type:"article"}}],["/zh/algorithm/leetcode/stack_queue/239_sliding_window_maximum.html",{loader:()=>r.e(89603).then(r.bind(r,94800)),meta:{date:17014752e5,category:["stack/queue"],tag:["hard","array","queue","sliding window","head","monotonic queue"],sticky:!0,excerpt:'<h2>一、题目描述</h2>\n<p>给你一个整数数组<code>nums</code>，有一个大小为<code>k</code>的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的<code>k</code>个数字。滑动窗口每次只向右移动一位。</p>\n<p>返回<em>滑动窗口中的最大值</em>。</p>\n<p><strong>示例 1</strong><br>\n输入: nums = [1, 3, -1, -3, 5, 3, 6, 7], k = 3<br>\n输出: [3, 3, 5, 5, 6, 7]<br>\n解释:</p>\n<div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>滑动窗口的位置                  最大值</span></span>\n<span class="line"><span>-----------------------------------</span></span>\n<span class="line"><span>[1  3  -1] -3  5  3  6  7       3</span></span>\n<span class="line"><span> 1 [3  -1  -3] 5  3  6  7       3</span></span>\n<span class="line"><span> 1  3 [-1  -3  5] 3  6  7       5</span></span>\n<span class="line"><span> 1  3  -1 [-3  5  3] 6  7       5</span></span>\n<span class="line"><span> 1  3  -1  -3 [5  3  6] 7       6</span></span>\n<span class="line"><span> 1  3  -1  -3  5 [3  6  7]      7</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:2.92,words:875},title:"239, 滑动窗口最大值",icon:"discover",order:6,type:"article"}}],["/zh/algorithm/leetcode/stack_queue/347_top_k_frequent_elements.html",{loader:()=>r.e(5859).then(r.bind(r,12071)),meta:{date:17015616e5,category:["stack/queue"],tag:["medium","hash table","divide and conquer","sorting","heap(priority queue)","bucket sort","counting","quick select"],sticky:!0,excerpt:"<h2>一、题目描述</h2>\n<p>给你一个整数数组<code>nums</code>和一个整数<code>k</code>，请你返回其中出现频率前<code>k</code>高的元素。你可以按<strong>任意顺序</strong>返回答案。</p>\n<p><strong>示例 1</strong><br>\n输入: nums = [1, 1, 1, 2, 2, 3], k = 2<br>\n输出: [1, 2]</p>\n<p><strong>示例 2</strong><br>\n输入: nums = [1], k = 1<br>\n输出: [1]</p>\n<p><strong>提示</strong></p>",readingTime:{minutes:4.7,words:1409},title:"347, 前K个高频元素",icon:"discover",order:7,type:"article"}}],["/zh/algorithm/leetcode/stack_queue/",{loader:()=>r.e(45660).then(r.bind(r,94725)),meta:{date:17009568e5,category:["leetcode"],tag:["stack","queue"],sticky:!1,excerpt:"<h2>栈/队列</h2>\n<h3>栈</h3>\n<p><code>栈</code>是计算机科学中的一种抽象数据类型，只允许在有序的线性数据集合的一端（称为栈顶，top）进行加入数据（<strong>push</strong>）和移除数据（<strong>pop</strong>）。因而按照后进先出（<strong>LIFO</strong>, Last In First Out）的原理运作，栈常用一维数组或链表来实现。常与另一种有序的线性数据集合<strong>队列</strong>相提并论。<br>\n</p>\n<p><strong>栈</strong>使用两种基本操作：</p>\n<ul>\n<li>入栈：将元素放入栈的顶端。</li>\n<li>出栈：将栈顶端的元素移除。<br>\n</li>\n</ul>",readingTime:{minutes:1.3,words:390},title:"栈/队列",icon:"discover",order:6,type:"article"}}],["/zh/algorithm/leetcode/two_pointers/",{loader:()=>r.e(69961).then(r.bind(r,68524)),meta:{date:17008704e5,category:["leetcode"],tag:["two pointers"],sticky:!1,excerpt:"<h2>双指针</h2>\n<p>双指针技术是一种以受控的方式遍历数据集（通常是数组或列表）的技术。它包括两个指针，一个指向数据集的开头，另一个指向数据集的结尾，并根据特定条件将它们相互移动。这种技术通常用于解决涉及在数据集中搜索特定条件或模式的问题，或者需要对数据集中的不同元素进行比较的问题。</p>\n<p>双指针技术主要用于解决具有线性时间复杂度的问题，与暴力解法相比，它可以大大提高性能。使用该技术解决的一些常见问题包括：</p>\n<ul>\n<li>查找一组数据中的最大/最小值。</li>\n<li>计算特定元素的出现次数。</li>\n<li>查找没有重复字符的最长子串。</li>\n<li>查找大小为<code>k</code>的子数组的最大和。</li>\n</ul>",readingTime:{minutes:1.76,words:528},title:"双指针",icon:"discover",order:5,type:"article"}}],["/404.html",{loader:()=>r.e(27490).then(r.bind(r,83431)),meta:{title:""}}],["/algorithm/",{loader:()=>r.e(71068).then(r.bind(r,32890)),meta:{title:"Algorithm"}}],["/rust/",{loader:()=>r.e(57513).then(r.bind(r,69349)),meta:{title:"Rust"}}],["/zh/algorithm/",{loader:()=>r.e(43643).then(r.bind(r,23993)),meta:{title:"Algorithm"}}],["/zh/rust/",{loader:()=>r.e(73152).then(r.bind(r,54259)),meta:{title:"Rust"}}],["/category/",{loader:()=>r.e(23583).then(r.bind(r,65065)),meta:{title:"Category",index:!1}}],["/category/data-structure/",{loader:()=>r.e(99128).then(r.bind(r,90587)),meta:{title:"Data Structure Category",index:!1}}],["/category/algorithm/",{loader:()=>r.e(22025).then(r.bind(r,61595)),meta:{title:"algorithm Category",index:!1}}],["/category/leetcode/",{loader:()=>r.e(38359).then(r.bind(r,44715)),meta:{title:"leetcode Category",index:!1}}],["/category/rust-syntax/",{loader:()=>r.e(36338).then(r.bind(r,20839)),meta:{title:"Rust Syntax Category",index:!1}}],["/category/array/",{loader:()=>r.e(2493).then(r.bind(r,4563)),meta:{title:"array Category",index:!1}}],["/category/dynamic-programming/",{loader:()=>r.e(64809).then(r.bind(r,60002)),meta:{title:"dynamic programming Category",index:!1}}],["/category/backtracking/",{loader:()=>r.e(63990).then(r.bind(r,51985)),meta:{title:"backtracking Category",index:!1}}],["/category/binary-tree/",{loader:()=>r.e(43632).then(r.bind(r,49739)),meta:{title:"binary tree Category",index:!1}}],["/category/linkedlist/",{loader:()=>r.e(95149).then(r.bind(r,14441)),meta:{title:"linkedlist Category",index:!1}}],["/category/hashtable/",{loader:()=>r.e(27972).then(r.bind(r,37326)),meta:{title:"hashtable Category",index:!1}}],["/category/greedy/",{loader:()=>r.e(39348).then(r.bind(r,93708)),meta:{title:"greedy Category",index:!1}}],["/category/stackqueue/",{loader:()=>r.e(37291).then(r.bind(r,35188)),meta:{title:"stack/queue Category",index:!1}}],["/category/string/",{loader:()=>r.e(65205).then(r.bind(r,27665)),meta:{title:"string Category",index:!1}}],["/zh/category/",{loader:()=>r.e(40086).then(r.bind(r,37929)),meta:{title:"分类",index:!1}}],["/zh/category/data-structure/",{loader:()=>r.e(77515).then(r.bind(r,48864)),meta:{title:"Data Structure 分类",index:!1}}],["/zh/category/algorithm/",{loader:()=>r.e(43708).then(r.bind(r,55304)),meta:{title:"algorithm 分类",index:!1}}],["/zh/category/leetcode/",{loader:()=>r.e(75908).then(r.bind(r,22910)),meta:{title:"leetcode 分类",index:!1}}],["/zh/category/rust%E8%AF%AD%E6%B3%95/",{loader:()=>r.e(90847).then(r.bind(r,12341)),meta:{title:"Rust语法 分类",index:!1}}],["/zh/category/array/",{loader:()=>r.e(20936).then(r.bind(r,91920)),meta:{title:"array 分类",index:!1}}],["/zh/category/backtracking/",{loader:()=>r.e(92337).then(r.bind(r,98146)),meta:{title:"backtracking 分类",index:!1}}],["/zh/category/backtracking/",{loader:()=>r.e(92337).then(r.bind(r,98146)),meta:{title:"Backtracking 分类",index:!1}}],["/zh/category/dynamic-programming/",{loader:()=>r.e(15100).then(r.bind(r,90083)),meta:{title:"dynamic programming 分类",index:!1}}],["/zh/category/binary-tree/",{loader:()=>r.e(51233).then(r.bind(r,59452)),meta:{title:"binary tree 分类",index:!1}}],["/zh/category/greedy/",{loader:()=>r.e(85607).then(r.bind(r,89662)),meta:{title:"greedy 分类",index:!1}}],["/zh/category/hashtable/",{loader:()=>r.e(1501).then(r.bind(r,86139)),meta:{title:"hashtable 分类",index:!1}}],["/zh/category/linkedlist/",{loader:()=>r.e(53318).then(r.bind(r,5336)),meta:{title:"linkedlist 分类",index:!1}}],["/zh/category/string/",{loader:()=>r.e(52726).then(r.bind(r,21454)),meta:{title:"string 分类",index:!1}}],["/zh/category/stackqueue/",{loader:()=>r.e(26360).then(r.bind(r,34477)),meta:{title:"stack/queue 分类",index:!1}}],["/tag/",{loader:()=>r.e(1797).then(r.bind(r,3992)),meta:{title:"Tag",index:!1}}],["/tag/foreword/",{loader:()=>r.e(34080).then(r.bind(r,48266)),meta:{title:"Tag: Foreword",index:!1}}],["/tag/medium/",{loader:()=>r.e(62269).then(r.bind(r,40889)),meta:{title:"Tag: medium",index:!1}}],["/tag/array/",{loader:()=>r.e(15975).then(r.bind(r,12967)),meta:{title:"Tag: array",index:!1}}],["/tag/binary-search/",{loader:()=>r.e(40806).then(r.bind(r,99413)),meta:{title:"Tag: binary search",index:!1}}],["/tag/sliding-window/",{loader:()=>r.e(4523).then(r.bind(r,98144)),meta:{title:"Tag: sliding window",index:!1}}],["/tag/prefix-sum/",{loader:()=>r.e(30292).then(r.bind(r,14029)),meta:{title:"Tag: prefix sum",index:!1}}],["/tag/easy/",{loader:()=>r.e(75716).then(r.bind(r,23401)),meta:{title:"Tag: easy",index:!1}}],["/tag/two-pointers/",{loader:()=>r.e(74081).then(r.bind(r,13310)),meta:{title:"Tag: two pointers",index:!1}}],["/tag/math/",{loader:()=>r.e(20980).then(r.bind(r,99186)),meta:{title:"Tag: math",index:!1}}],["/tag/matrix/",{loader:()=>r.e(84091).then(r.bind(r,7717)),meta:{title:"Tag: matrix",index:!1}}],["/tag/simulation/",{loader:()=>r.e(23285).then(r.bind(r,1672)),meta:{title:"Tag: simulation",index:!1}}],["/tag/hard/",{loader:()=>r.e(99383).then(r.bind(r,36103)),meta:{title:"Tag: hard",index:!1}}],["/tag/hash-table/",{loader:()=>r.e(34347).then(r.bind(r,20784)),meta:{title:"Tag: hash table",index:!1}}],["/tag/string/",{loader:()=>r.e(11139).then(r.bind(r,95620)),meta:{title:"Tag: string",index:!1}}],["/tag/stack/",{loader:()=>r.e(32794).then(r.bind(r,92945)),meta:{title:"Tag: stack",index:!1}}],["/tag/sorting/",{loader:()=>r.e(50598).then(r.bind(r,77768)),meta:{title:"Tag: sorting",index:!1}}],["/tag/dynamic-programming/",{loader:()=>r.e(83e3).then(r.bind(r,61359)),meta:{title:"Tag: dynamic programming",index:!1}}],["/tag/memoization/",{loader:()=>r.e(58824).then(r.bind(r,69574)),meta:{title:"Tag: memoization",index:!1}}],["/tag/recursion/",{loader:()=>r.e(25370).then(r.bind(r,10851)),meta:{title:"Tag: recursion",index:!1}}],["/tag/combinatorics/",{loader:()=>r.e(16181).then(r.bind(r,6396)),meta:{title:"Tag: combinatorics",index:!1}}],["/tag/backtracking/",{loader:()=>r.e(40484).then(r.bind(r,45161)),meta:{title:"Tag: backtracking",index:!1}}],["/tag/depth-first-search/",{loader:()=>r.e(48591).then(r.bind(r,88416)),meta:{title:"Tag: depth first search",index:!1}}],["/tag/graph/",{loader:()=>r.e(94582).then(r.bind(r,40844)),meta:{title:"Tag: graph",index:!1}}],["/tag/bit-manipulation/",{loader:()=>r.e(52053).then(r.bind(r,44931)),meta:{title:"Tag: bit manipulation",index:!1}}],["/tag/binary-tree/",{loader:()=>r.e(4722).then(r.bind(r,24985)),meta:{title:"Tag: binary tree",index:!1}}],["/tag/breadth-first-search/",{loader:()=>r.e(30610).then(r.bind(r,89260)),meta:{title:"Tag: breadth first search",index:!1}}],["/tag/queue/",{loader:()=>r.e(61501).then(r.bind(r,19373)),meta:{title:"Tag: queue",index:!1}}],["/tag/divide-and-conquer/",{loader:()=>r.e(12987).then(r.bind(r,60103)),meta:{title:"Tag: divide and conquer",index:!1}}],["/tag/tree/",{loader:()=>r.e(56674).then(r.bind(r,79989)),meta:{title:"Tag: tree",index:!1}}],["/tag/binary-search-tree/",{loader:()=>r.e(42037).then(r.bind(r,83169)),meta:{title:"Tag: binary search tree",index:!1}}],["/tag/linked-list/",{loader:()=>r.e(71646).then(r.bind(r,45001)),meta:{title:"Tag: linked list",index:!1}}],["/tag/string-matching/",{loader:()=>r.e(38777).then(r.bind(r,58611)),meta:{title:"Tag: string matching",index:!1}}],["/tag/hash-function/",{loader:()=>r.e(61533).then(r.bind(r,89489)),meta:{title:"Tag: hash function",index:!1}}],["/tag/monotonic-stack/",{loader:()=>r.e(83767).then(r.bind(r,59951)),meta:{title:"Tag: monotonic stack",index:!1}}],["/tag/design/",{loader:()=>r.e(18444).then(r.bind(r,19156)),meta:{title:"Tag: design",index:!1}}],["/tag/linkedlist/",{loader:()=>r.e(10255).then(r.bind(r,14326)),meta:{title:"Tag: linkedlist",index:!1}}],["/tag/counting/",{loader:()=>r.e(18843).then(r.bind(r,98236)),meta:{title:"Tag: counting",index:!1}}],["/tag/hashtable/",{loader:()=>r.e(42998).then(r.bind(r,89268)),meta:{title:"Tag: hashtable",index:!1}}],["/tag/greedy/",{loader:()=>r.e(55018).then(r.bind(r,64246)),meta:{title:"Tag: greedy",index:!1}}],["/tag/binary-indexed-tree/",{loader:()=>r.e(34898).then(r.bind(r,34065)),meta:{title:"Tag: binary indexed tree",index:!1}}],["/tag/segment-tree/",{loader:()=>r.e(58678).then(r.bind(r,40269)),meta:{title:"Tag: segment tree",index:!1}}],["/tag/other/",{loader:()=>r.e(58056).then(r.bind(r,78848)),meta:{title:"Tag: other",index:!1}}],["/tag/head/",{loader:()=>r.e(45368).then(r.bind(r,4486)),meta:{title:"Tag: head",index:!1}}],["/tag/monotonic-queue/",{loader:()=>r.e(16736).then(r.bind(r,55333)),meta:{title:"Tag: monotonic queue",index:!1}}],["/tag/heap(priority-queue)/",{loader:()=>r.e(46285).then(r.bind(r,65811)),meta:{title:"Tag: heap(priority queue)",index:!1}}],["/tag/bucket-sort/",{loader:()=>r.e(56159).then(r.bind(r,8447)),meta:{title:"Tag: bucket sort",index:!1}}],["/tag/quick-select/",{loader:()=>r.e(93388).then(r.bind(r,29338)),meta:{title:"Tag: quick select",index:!1}}],["/zh/tag/",{loader:()=>r.e(35230).then(r.bind(r,4625)),meta:{title:"标签",index:!1}}],["/zh/tag/%E5%89%8D%E8%A8%80/",{loader:()=>r.e(15838).then(r.bind(r,20404)),meta:{title:"标签: 前言",index:!1}}],["/zh/tag/medium/",{loader:()=>r.e(34896).then(r.bind(r,68311)),meta:{title:"标签: medium",index:!1}}],["/zh/tag/array/",{loader:()=>r.e(52048).then(r.bind(r,56747)),meta:{title:"标签: array",index:!1}}],["/zh/tag/binary-search/",{loader:()=>r.e(24757).then(r.bind(r,55948)),meta:{title:"标签: binary search",index:!1}}],["/zh/tag/sliding-window/",{loader:()=>r.e(46446).then(r.bind(r,1169)),meta:{title:"标签: sliding window",index:!1}}],["/zh/tag/prefix-sum/",{loader:()=>r.e(32841).then(r.bind(r,73419)),meta:{title:"标签: prefix sum",index:!1}}],["/zh/tag/easy/",{loader:()=>r.e(98789).then(r.bind(r,85368)),meta:{title:"标签: easy",index:!1}}],["/zh/tag/two-pointers/",{loader:()=>r.e(49532).then(r.bind(r,56933)),meta:{title:"标签: two pointers",index:!1}}],["/zh/tag/math/",{loader:()=>r.e(27033).then(r.bind(r,21065)),meta:{title:"标签: math",index:!1}}],["/zh/tag/matrix/",{loader:()=>r.e(49714).then(r.bind(r,3920)),meta:{title:"标签: matrix",index:!1}}],["/zh/tag/simulation/",{loader:()=>r.e(45952).then(r.bind(r,7910)),meta:{title:"标签: simulation",index:!1}}],["/zh/tag/hard/",{loader:()=>r.e(94722).then(r.bind(r,13298)),meta:{title:"标签: hard",index:!1}}],["/zh/tag/hash-table/",{loader:()=>r.e(32206).then(r.bind(r,94173)),meta:{title:"标签: hash table",index:!1}}],["/zh/tag/string/",{loader:()=>r.e(69822).then(r.bind(r,31917)),meta:{title:"标签: string",index:!1}}],["/zh/tag/stack/",{loader:()=>r.e(37353).then(r.bind(r,44769)),meta:{title:"标签: stack",index:!1}}],["/zh/tag/sorting/",{loader:()=>r.e(2649).then(r.bind(r,28138)),meta:{title:"标签: sorting",index:!1}}],["/zh/tag/dynamic-programming/",{loader:()=>r.e(28340).then(r.bind(r,35063)),meta:{title:"标签: dynamic programming",index:!1}}],["/zh/tag/backtracking/",{loader:()=>r.e(35993).then(r.bind(r,74059)),meta:{title:"标签: backtracking",index:!1}}],["/zh/tag/depth-first-search/",{loader:()=>r.e(39982).then(r.bind(r,23233)),meta:{title:"标签: depth first search",index:!1}}],["/zh/tag/graph/",{loader:()=>r.e(15345).then(r.bind(r,93423)),meta:{title:"标签: graph",index:!1}}],["/zh/tag/bit-manipulation/",{loader:()=>r.e(30348).then(r.bind(r,97423)),meta:{title:"标签: bit manipulation",index:!1}}],["/zh/tag/memoization/",{loader:()=>r.e(223).then(r.bind(r,49150)),meta:{title:"标签: memoization",index:!1}}],["/zh/tag/recursion/",{loader:()=>r.e(96721).then(r.bind(r,76640)),meta:{title:"标签: recursion",index:!1}}],["/zh/tag/combinatorics/",{loader:()=>r.e(10082).then(r.bind(r,69335)),meta:{title:"标签: combinatorics",index:!1}}],["/zh/tag/binary-tree/",{loader:()=>r.e(40665).then(r.bind(r,32618)),meta:{title:"标签: binary tree",index:!1}}],["/zh/tag/breadth-first-search/",{loader:()=>r.e(28719).then(r.bind(r,44996)),meta:{title:"标签: breadth first search",index:!1}}],["/zh/tag/queue/",{loader:()=>r.e(10158).then(r.bind(r,16565)),meta:{title:"标签: queue",index:!1}}],["/zh/tag/divide-and-conquer/",{loader:()=>r.e(58318).then(r.bind(r,83672)),meta:{title:"标签: divide and conquer",index:!1}}],["/zh/tag/tree/",{loader:()=>r.e(12507).then(r.bind(r,96866)),meta:{title:"标签: tree",index:!1}}],["/zh/tag/binary-search-tree/",{loader:()=>r.e(45736).then(r.bind(r,16318)),meta:{title:"标签: binary search tree",index:!1}}],["/zh/tag/linked-list/",{loader:()=>r.e(52105).then(r.bind(r,12801)),meta:{title:"标签: linked list",index:!1}}],["/zh/tag/string-matching/",{loader:()=>r.e(33942).then(r.bind(r,81499)),meta:{title:"标签: string matching",index:!1}}],["/zh/tag/hash-function/",{loader:()=>r.e(76178).then(r.bind(r,93647)),meta:{title:"标签: hash function",index:!1}}],["/zh/tag/monotonic-stack/",{loader:()=>r.e(84571).then(r.bind(r,53013)),meta:{title:"标签: monotonic stack",index:!1}}],["/zh/tag/greedy/",{loader:()=>r.e(99231).then(r.bind(r,23254)),meta:{title:"标签: greedy",index:!1}}],["/zh/tag/binary-indexed-tree/",{loader:()=>r.e(51413).then(r.bind(r,42898)),meta:{title:"标签: binary indexed tree",index:!1}}],["/zh/tag/segment-tree/",{loader:()=>r.e(51407).then(r.bind(r,2719)),meta:{title:"标签: segment tree",index:!1}}],["/zh/tag/counting/",{loader:()=>r.e(9754).then(r.bind(r,92409)),meta:{title:"标签: counting",index:!1}}],["/zh/tag/hashtable/",{loader:()=>r.e(74309).then(r.bind(r,97842)),meta:{title:"标签: hashtable",index:!1}}],["/zh/tag/design/",{loader:()=>r.e(76953).then(r.bind(r,82722)),meta:{title:"标签: design",index:!1}}],["/zh/tag/linkedlist/",{loader:()=>r.e(40398).then(r.bind(r,88266)),meta:{title:"标签: linkedlist",index:!1}}],["/zh/tag/other/",{loader:()=>r.e(72555).then(r.bind(r,82484)),meta:{title:"标签: other",index:!1}}],["/zh/tag/head/",{loader:()=>r.e(52173).then(r.bind(r,8475)),meta:{title:"标签: head",index:!1}}],["/zh/tag/monotonic-queue/",{loader:()=>r.e(15903).then(r.bind(r,14501)),meta:{title:"标签: monotonic queue",index:!1}}],["/zh/tag/heap(priority-queue)/",{loader:()=>r.e(41048).then(r.bind(r,33529)),meta:{title:"标签: heap(priority queue)",index:!1}}],["/zh/tag/bucket-sort/",{loader:()=>r.e(60264).then(r.bind(r,48991)),meta:{title:"标签: bucket sort",index:!1}}],["/zh/tag/quick-select/",{loader:()=>r.e(64877).then(r.bind(r,43376)),meta:{title:"标签: quick select",index:!1}}],["/article/",{loader:()=>r.e(97511).then(r.bind(r,81791)),meta:{title:"Articles",index:!1}}],["/zh/article/",{loader:()=>r.e(90716).then(r.bind(r,6478)),meta:{title:"文章",index:!1}}],["/star/",{loader:()=>r.e(47199).then(r.bind(r,10278)),meta:{title:"Star",index:!1}}],["/zh/star/",{loader:()=>r.e(7774).then(r.bind(r,26449)),meta:{title:"星标",index:!1}}],["/timeline/",{loader:()=>r.e(85464).then(r.bind(r,32026)),meta:{title:"Timeline",index:!1}}],["/zh/timeline/",{loader:()=>r.e(18229).then(r.bind(r,15495)),meta:{title:"时间轴",index:!1}}]])},74923:(e,t,r)=>{},94776:(e,t,r)=>{r.d(t,{M:()=>n});const n=JSON.parse('["/algorithm/1800/","/algorithm/introduction/","/algorithm/leetcode/graph/","/algorithm/leetcode/mono_stack/","/algorithm/leetcode/other/","/algorithm/leetcode/dp/","/algorithm/leetcode/greedy/","/algorithm/leetcode/backtracking/","/algorithm/leetcode/binary_tree/","/algorithm/leetcode/stack_queue/","/algorithm/leetcode/two_pointers/","/algorithm/leetcode/string/","/algorithm/leetcode/hashtable/","/algorithm/leetcode/linkedlist/","/algorithm/leetcode/","/algorithm/leetcode/array/","/rust/the_book/","/rust/the_book/foreword.html","/algorithm/leetcode/array/59_spiral_matrix_ii.html","/algorithm/leetcode/array/54_spiral_matrix.html","/algorithm/leetcode/array/76_minimum_window_substring.html","/algorithm/leetcode/array/904_fruit_into_baskets.html","/algorithm/leetcode/array/209_minimum_size_subarray_sum.html","/algorithm/leetcode/array/27_remove_element.html","/algorithm/leetcode/array/704_binary_search.html","/algorithm/leetcode/array/977_squares_of_a_sorted_array.html","/algorithm/leetcode/array/844_backspace_string_compare.html","/algorithm/leetcode/array/283_move_zeroes.html","/algorithm/leetcode/array/26_remove_duplicates_from_sorted_array.html","/algorithm/leetcode/array/367_valid_perfect_square.html","/algorithm/leetcode/array/69_sqrt_x.html","/algorithm/leetcode/array/34_find_first_and_last_position_of_element_in_sorted_array.html","/algorithm/leetcode/array/35_search_insert_position.html","/algorithm/leetcode/dp/62_unique_paths.html","/algorithm/leetcode/dp/343_integer_break.html","/algorithm/leetcode/dp/198_house_robber.html","/algorithm/leetcode/dp/740_delete_and_earn.html","/algorithm/leetcode/dp/746_min_cost_climbing_stairs.html","/algorithm/leetcode/dp/1137_nth_tribonacci_number.html","/algorithm/leetcode/dp/70_climbing_stairs.html","/algorithm/leetcode/dp/509_fibonacci_number.html","/algorithm/leetcode/backtracking/332_reconstruct_itinerary.html","/algorithm/leetcode/backtracking/491_non_decreasing_subsequences.html","/algorithm/leetcode/backtracking/37_sudoku_solver.html","/algorithm/leetcode/backtracking/36_valid_sudoku.html","/algorithm/leetcode/backtracking/52_n_queens_ii.html","/algorithm/leetcode/backtracking/51_n_queens.html","/algorithm/leetcode/backtracking/47_permutations_ii.html","/algorithm/leetcode/backtracking/46_permutations.html","/algorithm/leetcode/backtracking/90_subsets_ii.html","/algorithm/leetcode/backtracking/78_subsets.html","/algorithm/leetcode/backtracking/93_restore_ip_addresses.html","/algorithm/leetcode/backtracking/131_palindrome_partitioning.html","/algorithm/leetcode/backtracking/216_combination_sum_iii.html","/algorithm/leetcode/backtracking/40_combination_sum_ii.html","/algorithm/leetcode/backtracking/39_combination_sum.html","/algorithm/leetcode/backtracking/17_letter_combinations_of_a_phone_number.html","/algorithm/leetcode/backtracking/77_combinations.html","/algorithm/leetcode/binary_tree/559_maximum_depth_of_n_ary_tree.html","/algorithm/leetcode/binary_tree/572_subtree_of_another_tree.html","/algorithm/leetcode/binary_tree/100_same_tree.html","/algorithm/leetcode/binary_tree/109_convert_sorted_list_to_binary_search_tree.html","/algorithm/leetcode/binary_tree/108_convert_sorted_array_to_binary_search_tree.html","/algorithm/leetcode/binary_tree/669_trim_a_binary_search_tree.html","/algorithm/leetcode/binary_tree/450_delete_node_in_a_bst.html","/algorithm/leetcode/binary_tree/701_insert_into_a_binary_search_tree.html","/algorithm/leetcode/binary_tree/235_lowest_common_ancestor_of_a_binary_search_tree.html","/algorithm/leetcode/binary_tree/236_lowest_common_ancestor_of_a_binary_tree.html","/algorithm/leetcode/binary_tree/538_convert_bst_to_greater_tree.html","/algorithm/leetcode/binary_tree/501_find_mode_in_binary_search_tree.html","/algorithm/leetcode/binary_tree/530_minimum_absolute_difference_in_bst.html","/algorithm/leetcode/binary_tree/98_validate_binary_search_tree.html","/algorithm/leetcode/binary_tree/700_search_in_a_binary_search_tree.html","/algorithm/leetcode/binary_tree/617_merge_two_binary_trees.html","/algorithm/leetcode/binary_tree/654_maximum_binary_tree.html","/algorithm/leetcode/binary_tree/106_construct_binary_tree_from_post_order_and_in_order_traversal.html","/algorithm/leetcode/binary_tree/105_construct_binary_tree_from_preorder_and_inorder_traversal.html","/algorithm/leetcode/binary_tree/226_invert_binary_tree.html","/algorithm/leetcode/binary_tree/113_path_sum_ii.html","/algorithm/leetcode/binary_tree/112_path_sum.html","/algorithm/leetcode/binary_tree/513_find_bottom_left_tree_value.html","/algorithm/leetcode/binary_tree/404_sum_of_left_leaves.html","/algorithm/leetcode/binary_tree/257_binary_tree_paths.html","/algorithm/leetcode/binary_tree/110_balanced_binary_tree.html","/algorithm/leetcode/binary_tree/222_count_complete_tree_nodes.html","/algorithm/leetcode/binary_tree/111_minimum_depth_of_binary_tree.html","/algorithm/leetcode/binary_tree/104_maximum_depth_of_binary_tree.html","/algorithm/leetcode/binary_tree/101_symmetric_tree.html","/algorithm/leetcode/binary_tree/117_populating_next_right_pointers_in_each_node_ii.html","/algorithm/leetcode/binary_tree/116_populating_next_right_pointers_in_each_node.html","/algorithm/leetcode/binary_tree/515_find_largest_value_in_each_tree_row.html","/algorithm/leetcode/binary_tree/429_n_ary_tree_level_order_traversal.html","/algorithm/leetcode/binary_tree/637_average_of_levels_in_binary_tree.html","/algorithm/leetcode/binary_tree/199_binary_tree_right_side_view.html","/algorithm/leetcode/binary_tree/107_binary_tree_level_order_traversal_ii.html","/algorithm/leetcode/binary_tree/102_binary_tree_level_order_traversal.html","/algorithm/leetcode/binary_tree/145_binary_tree_post_order_traversal.html","/algorithm/leetcode/binary_tree/94_binary_tree_in_order_traversal.html","/algorithm/leetcode/binary_tree/144_binary_tree_pre_order_traversal.html","/algorithm/leetcode/linkedlist/142_linked_list_cycle_II.html","/algorithm/leetcode/linkedlist/141_linked_list_cycle.html","/algorithm/leetcode/linkedlist/160_intersection_of_two_linked_lists.html","/algorithm/leetcode/linkedlist/19_remove_nth_node_from_end_of_list.html","/algorithm/leetcode/linkedlist/24_swap_nodes_in_pairs.html","/algorithm/leetcode/linkedlist/206_reverse_linked_list.html","/algorithm/leetcode/linkedlist/707_design_linked_list.html","/algorithm/leetcode/linkedlist/203_remove_linked_list_elements.html","/algorithm/leetcode/hashtable/454_four_sum_ii.html","/algorithm/leetcode/hashtable/18_four_sum.html","/algorithm/leetcode/hashtable/16_three_sum_closest.html","/algorithm/leetcode/hashtable/15_three_sum.html","/algorithm/leetcode/hashtable/1_two_sum.html","/algorithm/leetcode/hashtable/202_happy_number.html","/algorithm/leetcode/hashtable/350_intersection_of_two_arrays_ii.html","/algorithm/leetcode/hashtable/349_intersection_of_two_arrays.html","/algorithm/leetcode/hashtable/438_find_all_anagrams_in_a_string.html","/algorithm/leetcode/hashtable/49_group_anagrams.html","/algorithm/leetcode/hashtable/383_ransom_note.html","/algorithm/leetcode/hashtable/242_valid_anagram.html","/algorithm/leetcode/greedy/968_binary_tree_cameras.html","/algorithm/leetcode/greedy/134_gas_station.html","/algorithm/leetcode/greedy/53_maximum_subarray.html","/algorithm/leetcode/greedy/56_merge_intervals.html","/algorithm/leetcode/greedy/763_partition_labels.html","/algorithm/leetcode/greedy/435_non_overlapping_intervals.html","/algorithm/leetcode/greedy/452_minimum_number_of_arrows_to_burst_balloons.html","/algorithm/leetcode/greedy/45_jump_game_ii.html","/algorithm/leetcode/greedy/55_jump_game.html","/algorithm/leetcode/greedy/406_queue_reconstruction_by_height.html","/algorithm/leetcode/greedy/135_candy.html","/algorithm/leetcode/greedy/714_best_time_to_buy_and_sell_stock_with_transaction_fee.html","/algorithm/leetcode/greedy/122_best_time_to_buy_and_sell_stock_ii.html","/algorithm/leetcode/greedy/738_monotone_increasing_digits.html","/algorithm/leetcode/greedy/376_wiggle_subsequence.html","/algorithm/leetcode/greedy/860_lemonade_change.html","/algorithm/leetcode/greedy/1005_maximize_sum_of_array_after_k_negations.html","/algorithm/leetcode/greedy/455_assign_cookies.html","/algorithm/leetcode/stack_queue/347_top_k_frequent_elements.html","/algorithm/leetcode/stack_queue/239_sliding_window_maximum.html","/algorithm/leetcode/stack_queue/150_evaluate_reverse_polish_notation.html","/algorithm/leetcode/stack_queue/1047_remove_all_adjacent_duplicates_in_string.html","/algorithm/leetcode/stack_queue/20_valid_parentheses.html","/algorithm/leetcode/stack_queue/225_implement_stack_using_queues.html","/algorithm/leetcode/stack_queue/232_implement_queue_using_stacks.html","/algorithm/leetcode/string/459_repeated_substring_pattern.html","/algorithm/leetcode/string/28_find_the_index_of_the_first_occurrence_in_a_string.html","/algorithm/leetcode/string/kamacoder_55_right_rotated_string.html","/algorithm/leetcode/string/151_reverse_words_in_a_string.html","/algorithm/leetcode/string/kamacoder_54_replace_numbers.html","/algorithm/leetcode/string/541_reverse_string_ii.html","/algorithm/leetcode/string/344_reverse_string.html","/zh/algorithm/1800/","/zh/algorithm/introduction/","/zh/algorithm/leetcode/graph/","/zh/algorithm/leetcode/mono_stack/","/zh/algorithm/leetcode/other/","/zh/algorithm/leetcode/dp/","/zh/algorithm/leetcode/greedy/","/zh/algorithm/leetcode/backtracking/","/zh/algorithm/leetcode/binary_tree/","/zh/algorithm/leetcode/stack_queue/","/zh/algorithm/leetcode/two_pointers/","/zh/algorithm/leetcode/string/","/zh/algorithm/leetcode/hashtable/","/zh/algorithm/leetcode/linkedlist/","/zh/algorithm/leetcode/","/zh/algorithm/leetcode/array/","/zh/rust/the_book/","/zh/rust/the_book/foreword.html","/zh/algorithm/leetcode/array/59_spiral_matrix_ii.html","/zh/algorithm/leetcode/array/54_spiral_matrix.html","/zh/algorithm/leetcode/array/76_minimum_window_substring.html","/zh/algorithm/leetcode/array/904_fruit_into_baskets.html","/zh/algorithm/leetcode/array/209_minimum_size_subarray_sum.html","/zh/algorithm/leetcode/array/27_remove_element.html","/zh/algorithm/leetcode/array/704_binary_search.html","/zh/algorithm/leetcode/array/977_squares_of_a_sorted_array.html","/zh/algorithm/leetcode/array/844_backspace_string_compare.html","/zh/algorithm/leetcode/array/283_move_zeroes.html","/zh/algorithm/leetcode/array/26_remove_duplicates_from_sorted_array.html","/zh/algorithm/leetcode/array/367_valid_perfect_square.html","/zh/algorithm/leetcode/array/69_sqrt_x.html","/zh/algorithm/leetcode/array/34_find_first_and_last_position_of_element_in_sorted_array.html","/zh/algorithm/leetcode/array/35_search_insert_position.html","/zh/algorithm/leetcode/backtracking/332_reconstruct_itinerary.html","/zh/algorithm/leetcode/backtracking/491_non_decreasing_subsequences.html","/zh/algorithm/leetcode/backtracking/37_sudoku_solver.html","/zh/algorithm/leetcode/backtracking/36_valid_sudoku.html","/zh/algorithm/leetcode/backtracking/52_n_queens_ii.html","/zh/algorithm/leetcode/backtracking/51_n_queens.html","/zh/algorithm/leetcode/backtracking/47_permutations_ii.html","/zh/algorithm/leetcode/backtracking/46_permutations.html","/zh/algorithm/leetcode/backtracking/90_subsets_ii.html","/zh/algorithm/leetcode/backtracking/78_subsets.html","/zh/algorithm/leetcode/backtracking/93_restore_ip_addresses.html","/zh/algorithm/leetcode/backtracking/131_palindrome_partitioning.html","/zh/algorithm/leetcode/backtracking/216_combination_sum_iii.html","/zh/algorithm/leetcode/backtracking/40_combination_sum_ii.html","/zh/algorithm/leetcode/backtracking/39_combination_sum.html","/zh/algorithm/leetcode/backtracking/17_letter_combinations_of_a_phone_number.html","/zh/algorithm/leetcode/backtracking/77_combinations.html","/zh/algorithm/leetcode/dp/62_unique_paths.html","/zh/algorithm/leetcode/dp/343_integer_break.html","/zh/algorithm/leetcode/dp/198_house_robber.html","/zh/algorithm/leetcode/dp/740_delete_and_earn.html","/zh/algorithm/leetcode/dp/746_min_cost_climbing_stairs.html","/zh/algorithm/leetcode/dp/1137_nth_tribonacci_number.html","/zh/algorithm/leetcode/dp/70_climbing_stairs.html","/zh/algorithm/leetcode/dp/509_fibonacci_number.html","/zh/algorithm/leetcode/binary_tree/559_maximum_depth_of_n_ary_tree.html","/zh/algorithm/leetcode/binary_tree/572_subtree_of_another_tree.html","/zh/algorithm/leetcode/binary_tree/100_same_tree.html","/zh/algorithm/leetcode/binary_tree/109_convert_sorted_list_to_binary_search_tree.html","/zh/algorithm/leetcode/binary_tree/108_convert_sorted_array_to_binary_search_tree.html","/zh/algorithm/leetcode/binary_tree/669_trim_a_binary_search_tree.html","/zh/algorithm/leetcode/binary_tree/450_delete_node_in_a_bst.html","/zh/algorithm/leetcode/binary_tree/701_insert_into_a_binary_search_tree.html","/zh/algorithm/leetcode/binary_tree/235_lowest_common_ancestor_of_a_binary_search_tree.html","/zh/algorithm/leetcode/binary_tree/236_lowest_common_ancestor_of_a_binary_tree.html","/zh/algorithm/leetcode/binary_tree/538_convert_bst_to_greater_tree.html","/zh/algorithm/leetcode/binary_tree/501_find_mode_in_binary_search_tree.html","/zh/algorithm/leetcode/binary_tree/530_minimum_absolute_difference_in_bst.html","/zh/algorithm/leetcode/binary_tree/98_validate_binary_search_tree.html","/zh/algorithm/leetcode/binary_tree/700_search_in_a_binary_search_tree.html","/zh/algorithm/leetcode/binary_tree/617_merge_two_binary_trees.html","/zh/algorithm/leetcode/binary_tree/654_maximum_binary_tree.html","/zh/algorithm/leetcode/binary_tree/106_construct_binary_tree_from_post_order_and_in_order_traversal.html","/zh/algorithm/leetcode/binary_tree/105_construct_binary_tree_from_preorder_and_inorder_traversal.html","/zh/algorithm/leetcode/binary_tree/226_invert_binary_tree.html","/zh/algorithm/leetcode/binary_tree/113_path_sum_ii.html","/zh/algorithm/leetcode/binary_tree/112_path_sum.html","/zh/algorithm/leetcode/binary_tree/513_find_bottom_left_tree_value.html","/zh/algorithm/leetcode/binary_tree/404_sum_of_left_leaves.html","/zh/algorithm/leetcode/binary_tree/257_binary_tree_paths.html","/zh/algorithm/leetcode/binary_tree/110_balanced_binary_tree.html","/zh/algorithm/leetcode/binary_tree/222_count_complete_tree_nodes.html","/zh/algorithm/leetcode/binary_tree/111_minimum_depth_of_binary_tree.html","/zh/algorithm/leetcode/binary_tree/104_maximum_depth_of_binary_tree.html","/zh/algorithm/leetcode/binary_tree/101_symmetric_tree.html","/zh/algorithm/leetcode/binary_tree/117_populating_next_right_pointers_in_each_node_ii.html","/zh/algorithm/leetcode/binary_tree/116_populating_next_right_pointers_in_each_node.html","/zh/algorithm/leetcode/binary_tree/515_find_largest_value_in_each_tree_row.html","/zh/algorithm/leetcode/binary_tree/429_n_ary_tree_level_order_traversal.html","/zh/algorithm/leetcode/binary_tree/637_average_of_levels_in_binary_tree.html","/zh/algorithm/leetcode/binary_tree/199_binary_tree_right_side_view.html","/zh/algorithm/leetcode/binary_tree/107_binary_tree_level_order_traversal_ii.html","/zh/algorithm/leetcode/binary_tree/102_binary_tree_level_order_traversal.html","/zh/algorithm/leetcode/binary_tree/145_binary_tree_post_order_traversal.html","/zh/algorithm/leetcode/binary_tree/94_binary_tree_in_order_traversal.html","/zh/algorithm/leetcode/binary_tree/144_binary_tree_pre_order_traversal.html","/zh/algorithm/leetcode/greedy/968_binary_tree_cameras.html","/zh/algorithm/leetcode/greedy/134_gas_station.html","/zh/algorithm/leetcode/greedy/53_maximum_subarray.html","/zh/algorithm/leetcode/greedy/56_merge_intervals.html","/zh/algorithm/leetcode/greedy/763_partition_labels.html","/zh/algorithm/leetcode/greedy/435_non_overlapping_intervals.html","/zh/algorithm/leetcode/greedy/452_minimum_number_of_arrows_to_burst_balloons.html","/zh/algorithm/leetcode/greedy/45_jump_game_ii.html","/zh/algorithm/leetcode/greedy/55_jump_game.html","/zh/algorithm/leetcode/greedy/406_queue_reconstruction_by_height.html","/zh/algorithm/leetcode/greedy/135_candy.html","/zh/algorithm/leetcode/greedy/714_best_time_to_buy_and_sell_stock_with_transaction_fee.html","/zh/algorithm/leetcode/greedy/122_best_time_to_buy_and_sell_stock_ii.html","/zh/algorithm/leetcode/greedy/738_monotone_increasing_digits.html","/zh/algorithm/leetcode/greedy/376_wiggle_subsequence.html","/zh/algorithm/leetcode/greedy/860_lemonade_change.html","/zh/algorithm/leetcode/greedy/1005_maximize_sum_of_array_after_k_negations.html","/zh/algorithm/leetcode/greedy/455_assign_cookies.html","/zh/algorithm/leetcode/hashtable/454_four_sum_ii.html","/zh/algorithm/leetcode/hashtable/18_four_sum.html","/zh/algorithm/leetcode/hashtable/16_three_sum_closest.html","/zh/algorithm/leetcode/hashtable/15_three_sum.html","/zh/algorithm/leetcode/hashtable/1_two_sum.html","/zh/algorithm/leetcode/hashtable/202_happy_number.html","/zh/algorithm/leetcode/hashtable/350_intersection_of_two_arrays_ii.html","/zh/algorithm/leetcode/hashtable/349_intersection_of_two_arrays.html","/zh/algorithm/leetcode/hashtable/438_find_all_anagrams_in_a_string.html","/zh/algorithm/leetcode/hashtable/49_group_anagrams.html","/zh/algorithm/leetcode/hashtable/383_ransom_note.html","/zh/algorithm/leetcode/hashtable/242_valid_anagram.html","/zh/algorithm/leetcode/linkedlist/142_linked_list_cycle_II.html","/zh/algorithm/leetcode/linkedlist/141_linked_list_cycle.html","/zh/algorithm/leetcode/linkedlist/160_intersection_of_two_linked_lists.html","/zh/algorithm/leetcode/linkedlist/19_remove_nth_node_from_end_of_list.html","/zh/algorithm/leetcode/linkedlist/24_swap_nodes_in_pairs.html","/zh/algorithm/leetcode/linkedlist/206_reverse_linked_list.html","/zh/algorithm/leetcode/linkedlist/707_design_linked_list.html","/zh/algorithm/leetcode/linkedlist/203_remove_linked_list_elements.html","/zh/algorithm/leetcode/string/459_repeated_substring_pattern.html","/zh/algorithm/leetcode/string/28_find_the_index_of_the_first_occurrence_in_a_string.html","/zh/algorithm/leetcode/string/kamacoder_55_right_rotated_string.html","/zh/algorithm/leetcode/string/151_reverse_words_in_a_string.html","/zh/algorithm/leetcode/string/kamacoder_54_replace_numbers.html","/zh/algorithm/leetcode/string/541_reverse_string_ii.html","/zh/algorithm/leetcode/string/344_reverse_string.html","/zh/algorithm/leetcode/stack_queue/347_top_k_frequent_elements.html","/zh/algorithm/leetcode/stack_queue/239_sliding_window_maximum.html","/zh/algorithm/leetcode/stack_queue/150_evaluate_reverse_polish_notation.html","/zh/algorithm/leetcode/stack_queue/1047_remove_all_adjacent_duplicates_in_string.html","/zh/algorithm/leetcode/stack_queue/20_valid_parentheses.html","/zh/algorithm/leetcode/stack_queue/225_implement_stack_using_queues.html","/zh/algorithm/leetcode/stack_queue/232_implement_queue_using_stacks.html","/intro.html","/zh/intro.html"]')}},e=>{e.O(0,[25821,80809],()=>e(e.s=93114)),e.O()}]);