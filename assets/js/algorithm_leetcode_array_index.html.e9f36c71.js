"use strict";(self.webpackChunkmike_blog=self.webpackChunkmike_blog||[]).push([[18204],{53127:(e,a,r)=>{e.exports=r.p+"assets/img/array_memory_allocation.d68d9a47.jpg"},72859:(e,a,r)=>{r.r(a),r.d(a,{comp:()=>i,data:()=>l});var n=r(60362),t=r(53127);const s={},i=(0,r(75726).A)(s,[["render",function(e,a){const r=(0,n.g2)("RouteLink");return(0,n.uX)(),(0,n.CE)("div",null,[a[25]||(a[25]=(0,n.Fv)('<h2 id="about-array" tabindex="-1"><a class="header-anchor" href="#about-array"><span>About Array</span></a></h2><p>When memory is allocated for an array, its individual elements are adjacent, so we can access it by index.<br><img src="'+t+'" alt="Array Memory Allocation" loading="lazy"></p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>let nums = [10, 11, 12, 13, 14, 15];</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>Array:   10  11  12  13  14  15</span></span>\n<span class="line"><span>index:    0   1   2   3   4   5</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>assert_eq(nums[0], 10);</span></span>\n<span class="line"><span>assert_eq(nums[5], 15);</span></span>\n<span class="line"><span>assert_eq(nums[6], xx); // ERROR，index out of bounds</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="exercise" tabindex="-1"><a class="header-anchor" href="#exercise"><span>Exercise</span></a></h2><h3 id="binary-search" tabindex="-1"><a class="header-anchor" href="#binary-search"><span>Binary Search</span></a></h3>',5)),(0,n.Lk)("p",null,[(0,n.bF)(r,{to:"/algorithm/leetcode/array/704_binary_search.html"},{default:(0,n.k6)(()=>[...a[0]||(a[0]=[(0,n.eW)("704: Binary Search",-1)])]),_:1}),a[5]||(a[5]=(0,n.Lk)("br",null,null,-1)),(0,n.bF)(r,{to:"/algorithm/leetcode/array/35_search_insert_position.html"},{default:(0,n.k6)(()=>[...a[1]||(a[1]=[(0,n.eW)("35: Search Insert Position",-1)])]),_:1}),a[6]||(a[6]=(0,n.Lk)("br",null,null,-1)),(0,n.bF)(r,{to:"/algorithm/leetcode/array/34_find_first_and_last_position_of_element_in_sorted_array.html"},{default:(0,n.k6)(()=>[...a[2]||(a[2]=[(0,n.eW)("34: Find First and Last Position of Element in Sorted Array",-1)])]),_:1}),a[7]||(a[7]=(0,n.Lk)("br",null,null,-1)),(0,n.bF)(r,{to:"/algorithm/leetcode/array/69_sqrt_x.html"},{default:(0,n.k6)(()=>[...a[3]||(a[3]=[(0,n.eW)("69: Sqrt(x)",-1)])]),_:1}),a[8]||(a[8]=(0,n.Lk)("br",null,null,-1)),(0,n.bF)(r,{to:"/algorithm/leetcode/array/367_valid_perfect_square.html"},{default:(0,n.k6)(()=>[...a[4]||(a[4]=[(0,n.eW)("367: Valid Perfect Square",-1)])]),_:1})]),a[26]||(a[26]=(0,n.Lk)("h3",{id:"remove-element",tabindex:"-1"},[(0,n.Lk)("a",{class:"header-anchor",href:"#remove-element"},[(0,n.Lk)("span",null,"Remove Element")])],-1)),(0,n.Lk)("p",null,[(0,n.bF)(r,{to:"/algorithm/leetcode/array/27_remove_element.html"},{default:(0,n.k6)(()=>[...a[9]||(a[9]=[(0,n.eW)("27: Remove Element",-1)])]),_:1}),a[13]||(a[13]=(0,n.Lk)("br",null,null,-1)),(0,n.bF)(r,{to:"/algorithm/leetcode/array/26_remove_duplicates_from_sorted_array.html"},{default:(0,n.k6)(()=>[...a[10]||(a[10]=[(0,n.eW)("26: Remove Duplicates from Sorted Array",-1)])]),_:1}),a[14]||(a[14]=(0,n.Lk)("br",null,null,-1)),(0,n.bF)(r,{to:"/algorithm/leetcode/array/283_move_zeroes.html"},{default:(0,n.k6)(()=>[...a[11]||(a[11]=[(0,n.eW)("283: Move Zeroes",-1)])]),_:1}),a[15]||(a[15]=(0,n.Lk)("br",null,null,-1)),(0,n.bF)(r,{to:"/algorithm/leetcode/array/844_backspace_string_compare.html"},{default:(0,n.k6)(()=>[...a[12]||(a[12]=[(0,n.eW)("844: Backspace String Compare",-1)])]),_:1})]),a[27]||(a[27]=(0,n.Lk)("h3",{id:"square-of-ordered-arrays",tabindex:"-1"},[(0,n.Lk)("a",{class:"header-anchor",href:"#square-of-ordered-arrays"},[(0,n.Lk)("span",null,"Square of Ordered Arrays")])],-1)),(0,n.Lk)("p",null,[(0,n.bF)(r,{to:"/algorithm/leetcode/array/977_squares_of_a_sorted_array.html"},{default:(0,n.k6)(()=>[...a[16]||(a[16]=[(0,n.eW)("977: Squares of a Sorted Array",-1)])]),_:1})]),a[28]||(a[28]=(0,n.Lk)("h3",{id:"minimum-size-subarray-sum",tabindex:"-1"},[(0,n.Lk)("a",{class:"header-anchor",href:"#minimum-size-subarray-sum"},[(0,n.Lk)("span",null,"Minimum Size Subarray Sum")])],-1)),(0,n.Lk)("p",null,[(0,n.bF)(r,{to:"/algorithm/leetcode/array/209_minimum_size_subarray_sum.html"},{default:(0,n.k6)(()=>[...a[17]||(a[17]=[(0,n.eW)("209: Minimum Size Subarray Sum",-1)])]),_:1}),a[20]||(a[20]=(0,n.Lk)("br",null,null,-1)),(0,n.bF)(r,{to:"/algorithm/leetcode/array/904_fruit_into_baskets.html"},{default:(0,n.k6)(()=>[...a[18]||(a[18]=[(0,n.eW)("904: Fruit Into Baskets",-1)])]),_:1}),a[21]||(a[21]=(0,n.Lk)("br",null,null,-1)),(0,n.bF)(r,{to:"/algorithm/leetcode/array/76_minimum_window_substring.html"},{default:(0,n.k6)(()=>[...a[19]||(a[19]=[(0,n.eW)("76: Minimum Window Substring",-1)])]),_:1})]),a[29]||(a[29]=(0,n.Lk)("h3",{id:"spiral-matrix",tabindex:"-1"},[(0,n.Lk)("a",{class:"header-anchor",href:"#spiral-matrix"},[(0,n.Lk)("span",null,"Spiral Matrix")])],-1)),(0,n.Lk)("p",null,[(0,n.bF)(r,{to:"/algorithm/leetcode/array/54_spiral_matrix.html"},{default:(0,n.k6)(()=>[...a[22]||(a[22]=[(0,n.eW)("54: Spiral Matrix",-1)])]),_:1}),a[24]||(a[24]=(0,n.Lk)("br",null,null,-1)),(0,n.bF)(r,{to:"/algorithm/leetcode/array/59_spiral_matrix_ii.html"},{default:(0,n.k6)(()=>[...a[23]||(a[23]=[(0,n.eW)("59: Spiral Matrix II",-1)])]),_:1})]),a[30]||(a[30]=(0,n.Lk)("h2",{id:"summary",tabindex:"-1"},[(0,n.Lk)("a",{class:"header-anchor",href:"#summary"},[(0,n.Lk)("span",null,"Summary")])],-1))])}]]),l=JSON.parse('{"path":"/algorithm/leetcode/array/","title":"Array","lang":"en-US","frontmatter":{"title":"Array","icon":"discover","date":"2023-09-27T00:00:00.000Z","dir":{"order":1},"category":"leetcode","tag":"array","sticky":false,"description":"About Array When memory is allocated for an array, its individual elements are adjacent, so we can access it by index. Array Memory Allocation Exercise Binary Search Remove Elem...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Array\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-27T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-16T16:41:19.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mike\\"}]}"],["meta",{"property":"og:url","content":"https://thecodedmike.github.io/algorithm/leetcode/array/"}],["meta",{"property":"og:site_name","content":"Mike\'s Blog"}],["meta",{"property":"og:title","content":"Array"}],["meta",{"property":"og:description","content":"About Array When memory is allocated for an array, its individual elements are adjacent, so we can access it by index. Array Memory Allocation Exercise Binary Search Remove Elem..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-16T16:41:19.000Z"}],["meta",{"property":"article:tag","content":"array"}],["meta",{"property":"article:published_time","content":"2023-09-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-16T16:41:19.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://thecodedmike.github.io/zh/algorithm/leetcode/array/"}]]},"git":{"createdTime":1695811035000,"updatedTime":1760632879000,"contributors":[{"name":"mike","username":"mike","email":"lixiaofeng1115@outlook.com","commits":6,"url":"https://github.com/mike"},{"name":"theCodedMike","username":"theCodedMike","email":"lixiaofeng1115@outlook.com","commits":1,"url":"https://github.com/theCodedMike"}]},"readingTime":{"minutes":0.6,"words":181},"filePathRelative":"algorithm/leetcode/array/README.md","excerpt":"<h2>About Array</h2>\\n<p>When memory is allocated for an array, its individual elements are adjacent, so we can access it by index.<br>\\n</p>\\n<div class=\\"language-text line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"text\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code class=\\"language-text\\"><span class=\\"line\\"><span>let nums = [10, 11, 12, 13, 14, 15];</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>Array:   10  11  12  13  14  15</span></span>\\n<span class=\\"line\\"><span>index:    0   1   2   3   4   5</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>assert_eq(nums[0], 10);</span></span>\\n<span class=\\"line\\"><span>assert_eq(nums[5], 15);</span></span>\\n<span class=\\"line\\"><span>assert_eq(nums[6], xx); // ERROR，index out of bounds</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')},75726:(e,a)=>{a.A=(e,a)=>{const r=e.__vccOpts||e;for(const[e,n]of a)r[e]=n;return r}}}]);