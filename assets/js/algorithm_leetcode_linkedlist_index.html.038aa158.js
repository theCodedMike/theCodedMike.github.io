"use strict";(self.webpackChunkmike_blog=self.webpackChunkmike_blog||[]).push([[68754],{6753:(e,i,t)=>{e.exports=t.p+"assets/img/singly_linked_list_delete_node.c154c84c.png"},19045:(e,i,t)=>{e.exports=t.p+"assets/img/linked_list.4a8bf176.png"},39360:(e,i,t)=>{e.exports=t.p+"assets/img/doubly_linked_list_add_node.5ab0d21e.png"},41819:(e,i,t)=>{e.exports=t.p+"assets/img/doubly_linked_list.337b1de3.png"},43775:(e,i,t)=>{e.exports=t.p+"assets/img/doubly_linked_list_delete_node.83044e72.webp"},65144:(e,i,t)=>{e.exports=t.p+"assets/img/singly_linked_list.196e2bd7.jpg"},67163:(e,i,t)=>{e.exports=t.p+"assets/img/circular_singly_linked_list.a06f2e40.webp"},74173:(e,i,t)=>{e.exports=t.p+"assets/img/circular_doubly_linked_list.87dc4c63.jpg"},75726:(e,i)=>{i.A=(e,i)=>{const t=e.__vccOpts||e;for(const[e,l]of i)t[e]=l;return t}},83773:(e,i,t)=>{e.exports=t.p+"assets/img/singly_linked_list_add_node.039c158f.png"},85114:(e,i,t)=>{e.exports=t.p+"assets/img/linked_list_memory_allocation.d9cb88a5.jpg"},98798:(e,i,t)=>{t.r(i),t.d(i,{comp:()=>L,data:()=>g});var l=t(60362),n=t(19045),s=t(65144),a=t(41819),d=t(67163),o=t(74173),r=t(85114),c=t(83773),k=t(39360),p=t(6753),h=t(43775);const m={},L=(0,t(75726).A)(m,[["render",function(e,i){const t=(0,l.g2)("RouteLink");return(0,l.uX)(),(0,l.CE)("div",null,[i[9]||(i[9]=(0,l.Fv)('<h2 id="about-linked-list" tabindex="-1"><a class="header-anchor" href="#about-linked-list"><span>About Linked List</span></a></h2><p>Linked list is a linear structure linked together by a series of pointers, with each node consisting of two parts, a data field and a pointer field.<br><img src="'+n+'" alt="Linked List" loading="lazy"></p><h3 id="type-of-linked-list" tabindex="-1"><a class="header-anchor" href="#type-of-linked-list"><span>Type of Linked List</span></a></h3><ul><li>singly linked list<br><img src="'+s+'" alt="Singly Linked List" loading="lazy"></li><li>doubly linked list<br><img src="'+a+'" alt="Doubly Linked List" loading="lazy"></li><li>circular singly linked list<br><img src="'+d+'" alt="Circular Singly Linked List" loading="lazy"></li><li>circular doubly linked list<br><img src="'+o+'" alt="Circular Doubly Linked List" loading="lazy"></li></ul><h3 id="linked-list-memory-allocation" tabindex="-1"><a class="header-anchor" href="#linked-list-memory-allocation"><span>Linked List Memory Allocation</span></a></h3><p>The nodes in a linked list are not continuously distributed in memory, but are scattered at certain addresses in memory.<br><img src="'+r+'" alt="Linked List Memory Allocation" loading="lazy"></p><h3 id="operation-of-linkedlist" tabindex="-1"><a class="header-anchor" href="#operation-of-linkedlist"><span>Operation of LinkedList</span></a></h3><h4 id="add" tabindex="-1"><a class="header-anchor" href="#add"><span>Add</span></a></h4><p><img src="'+c+'" alt="Singly Linked List Add Node" loading="lazy"><br><img src="'+k+'" alt="Doubly Linked List Add Node" loading="lazy"></p><h4 id="delete" tabindex="-1"><a class="header-anchor" href="#delete"><span>Delete</span></a></h4><p><img src="'+p+'" alt="Singly Linked List Delete Node" loading="lazy"><br><img src="'+h+'" alt="Doubly Linked List Delete Node" loading="lazy"></p><h2 id="exercise" tabindex="-1"><a class="header-anchor" href="#exercise"><span>Exercise</span></a></h2><h3 id="remove-linked-list-elements" tabindex="-1"><a class="header-anchor" href="#remove-linked-list-elements"><span>Remove Linked List Elements</span></a></h3>',13)),(0,l.Lk)("p",null,[(0,l.bF)(t,{to:"/algorithm/leetcode/linkedlist/203_remove_linked_list_elements.html"},{default:(0,l.k6)(()=>[...i[0]||(i[0]=[(0,l.eW)("203: Remove Linked List Elements",-1)])]),_:1})]),i[10]||(i[10]=(0,l.Lk)("h3",{id:"design-linked-list",tabindex:"-1"},[(0,l.Lk)("a",{class:"header-anchor",href:"#design-linked-list"},[(0,l.Lk)("span",null,"Design Linked List")])],-1)),(0,l.Lk)("p",null,[(0,l.bF)(t,{to:"/algorithm/leetcode/linkedlist/707_design_linked_list.html"},{default:(0,l.k6)(()=>[...i[1]||(i[1]=[(0,l.eW)("707: Design Linked List",-1)])]),_:1})]),i[11]||(i[11]=(0,l.Lk)("h3",{id:"reverse-linked-list",tabindex:"-1"},[(0,l.Lk)("a",{class:"header-anchor",href:"#reverse-linked-list"},[(0,l.Lk)("span",null,"Reverse Linked List")])],-1)),(0,l.Lk)("p",null,[(0,l.bF)(t,{to:"/algorithm/leetcode/linkedlist/206_reverse_linked_list.html"},{default:(0,l.k6)(()=>[...i[2]||(i[2]=[(0,l.eW)("206: Reverse Linked List",-1)])]),_:1})]),i[12]||(i[12]=(0,l.Lk)("h3",{id:"swap-nodes-in-pairs",tabindex:"-1"},[(0,l.Lk)("a",{class:"header-anchor",href:"#swap-nodes-in-pairs"},[(0,l.Lk)("span",null,"Swap Nodes in Pairs")])],-1)),(0,l.Lk)("p",null,[(0,l.bF)(t,{to:"/algorithm/leetcode/linkedlist/24_swap_nodes_in_pairs.html"},{default:(0,l.k6)(()=>[...i[3]||(i[3]=[(0,l.eW)("24: Swap Nodes in Pairs",-1)])]),_:1})]),i[13]||(i[13]=(0,l.Lk)("h3",{id:"remove-nth-node-from-end-of-list",tabindex:"-1"},[(0,l.Lk)("a",{class:"header-anchor",href:"#remove-nth-node-from-end-of-list"},[(0,l.Lk)("span",null,"Remove Nth Node From End of List")])],-1)),(0,l.Lk)("p",null,[(0,l.bF)(t,{to:"/algorithm/leetcode/linkedlist/19_remove_nth_node_from_end_of_list.html"},{default:(0,l.k6)(()=>[...i[4]||(i[4]=[(0,l.eW)("19: Remove Nth Node From End of List",-1)])]),_:1})]),i[14]||(i[14]=(0,l.Lk)("h3",{id:"intersection-of-two-linked-lists",tabindex:"-1"},[(0,l.Lk)("a",{class:"header-anchor",href:"#intersection-of-two-linked-lists"},[(0,l.Lk)("span",null,"Intersection of Two Linked Lists")])],-1)),(0,l.Lk)("p",null,[(0,l.bF)(t,{to:"/algorithm/leetcode/linkedlist/160_intersection_of_two_linked_lists.html"},{default:(0,l.k6)(()=>[...i[5]||(i[5]=[(0,l.eW)("160: Intersection of Two Linked Lists",-1)])]),_:1})]),i[15]||(i[15]=(0,l.Lk)("h3",{id:"linked-list-cycle",tabindex:"-1"},[(0,l.Lk)("a",{class:"header-anchor",href:"#linked-list-cycle"},[(0,l.Lk)("span",null,"Linked List Cycle")])],-1)),(0,l.Lk)("p",null,[(0,l.bF)(t,{to:"/algorithm/leetcode/linkedlist/141_linked_list_cycle.html"},{default:(0,l.k6)(()=>[...i[6]||(i[6]=[(0,l.eW)("141: Linked List Cycle",-1)])]),_:1}),i[8]||(i[8]=(0,l.Lk)("br",null,null,-1)),(0,l.bF)(t,{to:"/algorithm/leetcode/linkedlist/142_linked_list_cycle_II.html"},{default:(0,l.k6)(()=>[...i[7]||(i[7]=[(0,l.eW)("142: Linked List Cycle II",-1)])]),_:1})]),i[16]||(i[16]=(0,l.Lk)("h2",{id:"summary",tabindex:"-1"},[(0,l.Lk)("a",{class:"header-anchor",href:"#summary"},[(0,l.Lk)("span",null,"Summary")])],-1))])}]]),g=JSON.parse('{"path":"/algorithm/leetcode/linkedlist/","title":"LinkedList","lang":"en-US","frontmatter":{"title":"LinkedList","icon":"discover","date":"2023-10-20T00:00:00.000Z","dir":{"order":2},"category":"leetcode","tag":"linkedlist","sticky":false,"description":"About Linked List Linked list is a linear structure linked together by a series of pointers, with each node consisting of two parts, a data field and a pointer field. Linked Lis...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"LinkedList\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-20T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-27T11:21:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mike\\"}]}"],["meta",{"property":"og:url","content":"https://thecodedmike.github.io/algorithm/leetcode/linkedlist/"}],["meta",{"property":"og:site_name","content":"Mike\'s Blog"}],["meta",{"property":"og:title","content":"LinkedList"}],["meta",{"property":"og:description","content":"About Linked List Linked list is a linear structure linked together by a series of pointers, with each node consisting of two parts, a data field and a pointer field. Linked Lis..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-27T11:21:34.000Z"}],["meta",{"property":"article:tag","content":"linkedlist"}],["meta",{"property":"article:published_time","content":"2023-10-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-27T11:21:34.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://thecodedmike.github.io/zh/algorithm/leetcode/linkedlist/"}]]},"git":{"createdTime":1695811035000,"updatedTime":1698405694000,"contributors":[{"name":"mike","username":"mike","email":"lixiaofeng1115@outlook.com","commits":10,"url":"https://github.com/mike"}]},"readingTime":{"minutes":0.75,"words":224},"filePathRelative":"algorithm/leetcode/linkedlist/README.md","excerpt":"<h2>About Linked List</h2>\\n<p>Linked list is a linear structure linked together by a series of pointers, with each node consisting of two parts, a data field and a pointer field.<br>\\n</p>\\n<h3>Type of Linked List</h3>\\n<ul>\\n<li>singly linked list<br>\\n</li>\\n<li>doubly linked list<br>\\n</li>\\n<li>circular singly linked list<br>\\n</li>\\n<li>circular doubly linked list<br>\\n</li>\\n</ul>","autoDesc":true}')}}]);