"use strict";(self.webpackChunkmike_blog=self.webpackChunkmike_blog||[]).push([[71841],{18705:(e,a,n)=>{n.r(a),n.d(a,{comp:()=>r,data:()=>i});var t=n(60362),l=n(53127);const s={},r=(0,n(75726).A)(s,[["render",function(e,a){const n=(0,t.g2)("RouteLink");return(0,t.uX)(),(0,t.CE)("div",null,[a[25]||(a[25]=(0,t.Fv)('<h2 id="数组的理论知识" tabindex="-1"><a class="header-anchor" href="#数组的理论知识"><span>数组的理论知识</span></a></h2><p>当给数组分配内存时，数组中的各个元素是相邻的，所以可以通过下标来访问其中的某个元素。<br><img src="'+l+'" alt="Array Memory Allocation" loading="lazy"></p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>let nums = [10, 11, 12, 13, 14, 15];</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>Array:   10  11  12  13  14  15</span></span>\n<span class="line"><span>index:    0   1   2   3   4   5</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>assert_eq(nums[0], 10);</span></span>\n<span class="line"><span>assert_eq(nums[5], 15);</span></span>\n<span class="line"><span>assert_eq(nums[6], xx); // ERROR，index out of bounds</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="习题" tabindex="-1"><a class="header-anchor" href="#习题"><span>习题</span></a></h2><h3 id="二分查找" tabindex="-1"><a class="header-anchor" href="#二分查找"><span>二分查找</span></a></h3>',5)),(0,t.Lk)("p",null,[(0,t.bF)(n,{to:"/zh/algorithm/leetcode/array/704_binary_search.html"},{default:(0,t.k6)(()=>[...a[0]||(a[0]=[(0,t.eW)("704: 二分查找",-1)])]),_:1}),a[5]||(a[5]=(0,t.Lk)("br",null,null,-1)),(0,t.bF)(n,{to:"/zh/algorithm/leetcode/array/35_search_insert_position.html"},{default:(0,t.k6)(()=>[...a[1]||(a[1]=[(0,t.eW)("35: 搜索插入位置",-1)])]),_:1}),a[6]||(a[6]=(0,t.Lk)("br",null,null,-1)),(0,t.bF)(n,{to:"/zh/algorithm/leetcode/array/34_find_first_and_last_position_of_element_in_sorted_array.html"},{default:(0,t.k6)(()=>[...a[2]||(a[2]=[(0,t.eW)("34: 在排序数组中查找元素的第一个和最后一个位置",-1)])]),_:1}),a[7]||(a[7]=(0,t.Lk)("br",null,null,-1)),(0,t.bF)(n,{to:"/zh/algorithm/leetcode/array/69_sqrt_x.html"},{default:(0,t.k6)(()=>[...a[3]||(a[3]=[(0,t.eW)("69: x的平方根",-1)])]),_:1}),a[8]||(a[8]=(0,t.Lk)("br",null,null,-1)),(0,t.bF)(n,{to:"/zh/algorithm/leetcode/array/367_valid_perfect_square.html"},{default:(0,t.k6)(()=>[...a[4]||(a[4]=[(0,t.eW)("367: 有效的完全平方数",-1)])]),_:1})]),a[26]||(a[26]=(0,t.Lk)("h3",{id:"移除元素",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#移除元素"},[(0,t.Lk)("span",null,"移除元素")])],-1)),(0,t.Lk)("p",null,[(0,t.bF)(n,{to:"/zh/algorithm/leetcode/array/27_remove_element.html"},{default:(0,t.k6)(()=>[...a[9]||(a[9]=[(0,t.eW)("27: 移除元素",-1)])]),_:1}),a[13]||(a[13]=(0,t.Lk)("br",null,null,-1)),(0,t.bF)(n,{to:"/zh/algorithm/leetcode/array/26_remove_duplicates_from_sorted_array.html"},{default:(0,t.k6)(()=>[...a[10]||(a[10]=[(0,t.eW)("26: 删除有序数组中的重复项",-1)])]),_:1}),a[14]||(a[14]=(0,t.Lk)("br",null,null,-1)),(0,t.bF)(n,{to:"/zh/algorithm/leetcode/array/283_move_zeroes.html"},{default:(0,t.k6)(()=>[...a[11]||(a[11]=[(0,t.eW)("283: 移动零",-1)])]),_:1}),a[15]||(a[15]=(0,t.Lk)("br",null,null,-1)),(0,t.bF)(n,{to:"/zh/algorithm/leetcode/array/844_backspace_string_compare.html"},{default:(0,t.k6)(()=>[...a[12]||(a[12]=[(0,t.eW)("844: 比较含退格的字符串",-1)])]),_:1})]),a[27]||(a[27]=(0,t.Lk)("h3",{id:"有序数组的平方",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#有序数组的平方"},[(0,t.Lk)("span",null,"有序数组的平方")])],-1)),(0,t.Lk)("p",null,[(0,t.bF)(n,{to:"/zh/algorithm/leetcode/array/977_squares_of_a_sorted_array.html"},{default:(0,t.k6)(()=>[...a[16]||(a[16]=[(0,t.eW)("977: 有序数组的平方",-1)])]),_:1})]),a[28]||(a[28]=(0,t.Lk)("h3",{id:"长度最小的子数组",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#长度最小的子数组"},[(0,t.Lk)("span",null,"长度最小的子数组")])],-1)),(0,t.Lk)("p",null,[(0,t.bF)(n,{to:"/zh/algorithm/leetcode/array/209_minimum_size_subarray_sum.html"},{default:(0,t.k6)(()=>[...a[17]||(a[17]=[(0,t.eW)("209: 长度最小的子数组",-1)])]),_:1}),a[20]||(a[20]=(0,t.Lk)("br",null,null,-1)),(0,t.bF)(n,{to:"/zh/algorithm/leetcode/array/904_fruit_into_baskets.html"},{default:(0,t.k6)(()=>[...a[18]||(a[18]=[(0,t.eW)("904: 水果成篮",-1)])]),_:1}),a[21]||(a[21]=(0,t.Lk)("br",null,null,-1)),(0,t.bF)(n,{to:"/zh/algorithm/leetcode/array/76_minimum_window_substring.html"},{default:(0,t.k6)(()=>[...a[19]||(a[19]=[(0,t.eW)("76: 最小覆盖子串",-1)])]),_:1})]),a[29]||(a[29]=(0,t.Lk)("h3",{id:"螺旋矩阵",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#螺旋矩阵"},[(0,t.Lk)("span",null,"螺旋矩阵")])],-1)),(0,t.Lk)("p",null,[(0,t.bF)(n,{to:"/zh/algorithm/leetcode/array/54_spiral_matrix.html"},{default:(0,t.k6)(()=>[...a[22]||(a[22]=[(0,t.eW)("54: 螺旋矩阵",-1)])]),_:1}),a[24]||(a[24]=(0,t.Lk)("br",null,null,-1)),(0,t.bF)(n,{to:"/zh/algorithm/leetcode/array/59_spiral_matrix_ii.html"},{default:(0,t.k6)(()=>[...a[23]||(a[23]=[(0,t.eW)("59: 螺旋矩阵II",-1)])]),_:1})]),a[30]||(a[30]=(0,t.Lk)("h2",{id:"总结",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#总结"},[(0,t.Lk)("span",null,"总结")])],-1))])}]]),i=JSON.parse('{"path":"/zh/algorithm/leetcode/array/","title":"数组","lang":"zh-CN","frontmatter":{"title":"数组","icon":"discover","date":"2023-09-27T00:00:00.000Z","dir":{"order":1},"category":"leetcode","tag":"array","sticky":false,"description":"数组的理论知识 当给数组分配内存时，数组中的各个元素是相邻的，所以可以通过下标来访问其中的某个元素。 Array Memory Allocation 习题 二分查找 移除元素 有序数组的平方 长度最小的子数组 螺旋矩阵 总结","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数组\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-27T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-20T14:16:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mike\\"}]}"],["meta",{"property":"og:url","content":"https://thecodedmike.github.io/zh/algorithm/leetcode/array/"}],["meta",{"property":"og:site_name","content":"Mike的博客"}],["meta",{"property":"og:title","content":"数组"}],["meta",{"property":"og:description","content":"数组的理论知识 当给数组分配内存时，数组中的各个元素是相邻的，所以可以通过下标来访问其中的某个元素。 Array Memory Allocation 习题 二分查找 移除元素 有序数组的平方 长度最小的子数组 螺旋矩阵 总结"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-10-20T14:16:36.000Z"}],["meta",{"property":"article:tag","content":"array"}],["meta",{"property":"article:published_time","content":"2023-09-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-20T14:16:36.000Z"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://thecodedmike.github.io/algorithm/leetcode/array/"}]]},"git":{"createdTime":1695811035000,"updatedTime":1697811396000,"contributors":[{"name":"mike","username":"mike","email":"lixiaofeng1115@outlook.com","commits":7,"url":"https://github.com/mike"}]},"readingTime":{"minutes":0.92,"words":275},"filePathRelative":"zh/algorithm/leetcode/array/README.md","excerpt":"<h2>数组的理论知识</h2>\\n<p>当给数组分配内存时，数组中的各个元素是相邻的，所以可以通过下标来访问其中的某个元素。<br>\\n</p>\\n<div class=\\"language-text line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"text\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code class=\\"language-text\\"><span class=\\"line\\"><span>let nums = [10, 11, 12, 13, 14, 15];</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>Array:   10  11  12  13  14  15</span></span>\\n<span class=\\"line\\"><span>index:    0   1   2   3   4   5</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>assert_eq(nums[0], 10);</span></span>\\n<span class=\\"line\\"><span>assert_eq(nums[5], 15);</span></span>\\n<span class=\\"line\\"><span>assert_eq(nums[6], xx); // ERROR，index out of bounds</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')},53127:(e,a,n)=>{e.exports=n.p+"assets/img/array_memory_allocation.d68d9a47.jpg"},75726:(e,a)=>{a.A=(e,a)=>{const n=e.__vccOpts||e;for(const[e,t]of a)n[e]=t;return n}}}]);