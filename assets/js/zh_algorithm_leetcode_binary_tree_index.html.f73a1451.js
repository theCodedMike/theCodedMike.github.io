"use strict";(self.webpackChunkmike_blog=self.webpackChunkmike_blog||[]).push([[55158],{6460:(e,l,n)=>{e.exports=n.p+"assets/img/bfs.ae37eac2.png"},11794:(e,l,n)=>{e.exports=n.p+"assets/img/delete_node_in_a_tree.99d0a798.png"},14288:(e,l,n)=>{e.exports=n.p+"assets/img/insert_node_in_a_tree.cc42468b.png"},19404:(e,l,n)=>{e.exports=n.p+"assets/img/degenerate_tree.b2a26899.png"},21442:(e,l,n)=>{e.exports=n.p+"assets/img/dfs.185c1323.png"},24508:(e,l,n)=>{n.r(l),n.d(l,{comp:()=>L,data:()=>m});var a=n(60362),t=n(32785),i=n(53223),s=n(67319),r=n(28153),d=n(19404),o=n(73700),c=n(60876),k=n(55983),h=n(14288),u=n(11794),p=n(21442),b=n(6460);const _={},L=(0,n(75726).A)(_,[["render",function(e,l){const n=(0,a.g2)("CodeTabs"),_=(0,a.g2)("RouteLink");return(0,a.uX)(),(0,a.CE)("div",null,[l[88]||(l[88]=(0,a.Fv)('<h2 id="二叉树" tabindex="-1"><a class="header-anchor" href="#二叉树"><span>二叉树</span></a></h2><h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h3><p>在计算机科学中，<a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91" target="_blank" rel="noopener noreferrer"><strong>二叉树</strong></a>是每个节点最多只有两个分支（即不存在分支度大于2的节点）的树结构。通常分支被称作<code>左子树</code>或<code>右子树</code>。二叉树的分支具有左右次序，不能随意颠倒。<br><img src="'+t+'" alt="binary_tree" loading="lazy"></p><h3 id="在图论中的定义" tabindex="-1"><a class="header-anchor" href="#在图论中的定义"><span>在图论中的定义</span></a></h3><p>二叉树是一个连通的无环图，并且每一个顶点的度不大于3。有根二叉树还要满足根节点的度不大于2。有了根节点之后，每个顶点定义了唯一的父节点，和最多2个子节点。然而，没有足够的信息来区分左节点和右节点。如果不考虑连通性，允许图中有多个连通分量，这样的结构叫做森林。</p><h3 id="二叉树的类型" tabindex="-1"><a class="header-anchor" href="#二叉树的类型"><span>二叉树的类型</span></a></h3><ol><li><p><strong>满二叉树</strong>：每个节点要么有0个孩子节点要么有2个孩子节点的二叉树，称为<strong>满二叉树</strong>。<br><img src="'+i+'" alt="full binary tree" loading="lazy"></p></li><li><p><strong>完美二叉树</strong>：一棵深度为<code>k</code>，且有<code>2^k − 1</code>个节点的二叉树，称为<strong>完美二叉树</strong>。这种树的特点是每一层上的节点数都是最大节点数。<br><img src="'+s+'" alt="perfect binary tree" loading="lazy"></p></li><li><p><strong>完全二叉树</strong>：在一颗二叉树中，若除最后一层外的其余层都是满的，并且最后一层要么是满的，要么在右边缺少连续若干节点，则此二叉树为<strong>完全二叉树</strong>。<br><img src="'+r+'" alt="complete binary tree, not full binary tree" loading="lazy"></p></li><li><p><strong>退化二叉树</strong>：许多节点只有1个孩子节点，其行为表现更像是单链表的二叉树。<br><img src="'+d+'" alt="degenerate tree" loading="lazy"></p></li><li><p><a href="https://zh.wikipedia.org/zh-cn/%E4%BA%8C%E5%85%83%E6%90%9C%E5%B0%8B%E6%A8%B9" target="_blank" rel="noopener noreferrer"><strong>二叉搜索树</strong></a>：又称二叉查找树、有序二叉树或排序二叉树，是指一棵空树或者具有下列性质的二叉树：</p><ul><li>若任意节点的左子树不空，则左子树上所有节点的值均小于它的根节点的值；</li><li>若任意节点的右子树不空，则右子树上所有节点的值均大于它的根节点的值；</li><li>任意节点的左、右子树也分别为二叉搜索树；<br><img src="'+o+'" alt="AVL" loading="lazy"></li></ul></li><li><p><a href="https://zh.wikipedia.org/wiki/AVL%E6%A0%91" target="_blank" rel="noopener noreferrer"><strong>AVL</strong></a>：AVL树（Adelson-Velsky and Landis Tree）是计算机科学中最早被发明的自平衡二叉搜索树。在AVL树中，任一节点对应的两棵子树的最大高度差为1，因此它也被称为高度平衡树。<br><img src="'+c+'" alt="AVL" loading="lazy"></p></li><li><p><a href="https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91" target="_blank" rel="noopener noreferrer"><strong>红黑树</strong></a>：红黑树（Red–black tree）是每个节点都带有颜色属性的一种自平衡二叉搜索树，其有以下额外要求：</p><ul><li>节点是红色或黑色；</li><li>根是黑色；</li><li>所有叶子都是黑色（叶子是NIL节点）；</li><li>每个红色节点必须有两个黑色的子节点；</li><li>从任一节点到其每个叶子的所有简单路径都包含相同数目的黑色节点；<br><img src="'+k+'" alt="RBT" loading="lazy"></li></ul></li></ol><h3 id="二叉树的性质" tabindex="-1"><a class="header-anchor" href="#二叉树的性质"><span>二叉树的性质</span></a></h3><ul><li><p>对于高度为<code>h</code>的满二叉树，其节点总数<code>n</code>和<code>h</code>的关系为<code>2h + 1 &lt;= n &lt;= 2^(h+1) - 1</code>。根节点的高度为0。对于一颗完美二叉树，其节点总数为<code>1 + 2 + 4 + … + 2^ℎ = 2^(ℎ+1) − 1</code>。</p></li><li><p>对于有<code>n</code>个节点的完美二叉树，其叶子节点个数为<code>l = (n + 1) / 2</code>。</p></li><li><p>对于任意一颗非空二叉树，其叶子节点个数<code>l</code>与度为2的内部节点个数<code>i2</code>的关系为<code>l = i2 + 1</code>。</p></li><li><p>对于有<code>n</code>个节点的二叉树，其最小的树高为<code>ℎ = log2(n + 1) − 1</code>，此时二叉树表现为完全二叉树。</p></li><li><p>对于有<code>l</code>个叶子节点的二叉树，其高度至少是<code>ℎ = log2(l)</code>。</p></li><li><p>对于一颗节点总数为<code>n</code>、边总数为<code>e</code>的非空二叉树，则节点总数与边的关系为<code>e = n - 1</code>。</p></li><li><p>对于一颗节点总数为<code>n</code>的二叉树，其缺失的孩子节点总数为<code>n + 1</code>。</p></li><li><p>对于有<code>n</code>个节点的完全二叉树，其内部节点的个数为<code>⌊n/2⌋</code>。</p></li></ul><h3 id="二叉树的操作" tabindex="-1"><a class="header-anchor" href="#二叉树的操作"><span>二叉树的操作</span></a></h3><h4 id="插入" tabindex="-1"><a class="header-anchor" href="#插入"><span>插入</span></a></h4><ul><li>叶子节点</li><li>内部节点<br><img src="'+h+'" alt="The process of inserting a node into a binary tree" loading="lazy"></li></ul><h4 id="删除" tabindex="-1"><a class="header-anchor" href="#删除"><span>删除</span></a></h4><ul><li>无孩子节点或有1个孩子节点的节点</li><li>有2个孩子节点的节点<br><img src="'+u+'" alt="The process of deleting an internal node in a binary tree" loading="lazy"></li></ul><h4 id="遍历" tabindex="-1"><a class="header-anchor" href="#遍历"><span>遍历</span></a></h4><h5 id="深度优先遍历-dfs" tabindex="-1"><a class="header-anchor" href="#深度优先遍历-dfs"><span>深度优先遍历（DFS）</span></a></h5><figure><img src="'+p+'" alt="depth first traversal of a binary tree" tabindex="0" loading="lazy"><figcaption>depth first traversal of a binary tree</figcaption></figure><ul><li>前序遍历(根左右), 红色●表示其访问顺序: F, B, A, D, C, E, G, I, H</li></ul>',18)),(0,a.bF)(n,{data:[{id:"递归实现"},{id:"迭代实现"}]},{title0:(0,a.k6)(({value:e,isActive:n})=>[...l[0]||(l[0]=[(0,a.eW)("递归实现",-1)])]),title1:(0,a.k6)(({value:e,isActive:n})=>[...l[1]||(l[1]=[(0,a.eW)("迭代实现",-1)])]),tab0:(0,a.k6)(({value:e,isActive:n})=>[...l[2]||(l[2]=[(0,a.Lk)("div",{class:"language-text line-numbers-mode","data-highlighter":"shiki","data-ext":"text",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[(0,a.Lk)("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[(0,a.Lk)("code",{class:"language-text"},[(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"procedure pre_order(node)")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"    if node = null")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"        return")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"    visit(node)")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"    pre_order(node.left)")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"    pre_order(node.right)")])])]),(0,a.Lk)("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"})])],-1)])]),tab1:(0,a.k6)(({value:e,isActive:n})=>[...l[3]||(l[3]=[(0,a.Lk)("div",{class:"language-text line-numbers-mode","data-highlighter":"shiki","data-ext":"text",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[(0,a.Lk)("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[(0,a.Lk)("code",{class:"language-text"},[(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"procedure pre_order(node)")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"    if node = null")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"        return")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"    stack ← empty stack")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"    stack.push(node)")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"    while not stack.isEmpty()")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"        node ← stack.pop()")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"        visit(node)")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"        // right child is pushed first so that left is processed first")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"        if node.right ≠ null")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"            stack.push(node.right)")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"        if node.left ≠ null")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"            stack.push(node.left)")])])]),(0,a.Lk)("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"})])],-1)])]),_:1}),l[89]||(l[89]=(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,"中序遍历(左根右), 绿色●表示其访问顺序: A, B, C, D, E, F, G, H, I")],-1)),(0,a.bF)(n,{data:[{id:"递归实现"},{id:"迭代实现"}]},{title0:(0,a.k6)(({value:e,isActive:n})=>[...l[4]||(l[4]=[(0,a.eW)("递归实现",-1)])]),title1:(0,a.k6)(({value:e,isActive:n})=>[...l[5]||(l[5]=[(0,a.eW)("迭代实现",-1)])]),tab0:(0,a.k6)(({value:e,isActive:n})=>[...l[6]||(l[6]=[(0,a.Lk)("div",{class:"language-text line-numbers-mode","data-highlighter":"shiki","data-ext":"text",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[(0,a.Lk)("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[(0,a.Lk)("code",{class:"language-text"},[(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"procedure in_order(node)")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"    if node = null")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"        return")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"    in_order(node.left)")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"    visit(node)")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"    in_order(node.right)")])])]),(0,a.Lk)("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"})])],-1)])]),tab1:(0,a.k6)(({value:e,isActive:n})=>[...l[7]||(l[7]=[(0,a.Lk)("div",{class:"language-text line-numbers-mode","data-highlighter":"shiki","data-ext":"text",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[(0,a.Lk)("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[(0,a.Lk)("code",{class:"language-text"},[(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"procedure in_order(node)")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"    stack ← empty stack")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"    while not stack.isEmpty() or node ≠ null")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"        if node ≠ null")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"            stack.push(node)")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"            node ← node.left")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"        else")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"            node ← stack.pop()")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"            visit(node)")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"            node ← node.right")])])]),(0,a.Lk)("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"})])],-1)])]),_:1}),l[90]||(l[90]=(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,"后序遍历(左右根), 蓝色●表示其访问顺序: A, C, E, D, B, H, I, G, F")],-1)),(0,a.bF)(n,{data:[{id:"递归实现"},{id:"迭代实现"}]},{title0:(0,a.k6)(({value:e,isActive:n})=>[...l[8]||(l[8]=[(0,a.eW)("递归实现",-1)])]),title1:(0,a.k6)(({value:e,isActive:n})=>[...l[9]||(l[9]=[(0,a.eW)("迭代实现",-1)])]),tab0:(0,a.k6)(({value:e,isActive:n})=>[...l[10]||(l[10]=[(0,a.Lk)("div",{class:"language-text line-numbers-mode","data-highlighter":"shiki","data-ext":"text",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[(0,a.Lk)("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[(0,a.Lk)("code",{class:"language-text"},[(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"procedure post_order(node)")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"    if node = null")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"        return")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"    post_order(node.left)")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"    post_order(node.right)")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"    visit(node)")])])]),(0,a.Lk)("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"})])],-1)])]),tab1:(0,a.k6)(({value:e,isActive:n})=>[...l[11]||(l[11]=[(0,a.Lk)("div",{class:"language-text line-numbers-mode","data-highlighter":"shiki","data-ext":"text",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[(0,a.Lk)("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[(0,a.Lk)("code",{class:"language-text"},[(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"procedure post_order(node)")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"    stack ← empty stack")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"    lastNodeVisited ← null")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"    while not stack.isEmpty() or node ≠ null")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"        if node ≠ null")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"            stack.push(node)")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"            node ← node.left")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"        else")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"            peekNode ← stack.peek()")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"            // if right child exists and traversing node")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"            // from left child, then move right")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"            if peekNode.right ≠ null and lastNodeVisited ≠ peekNode.right")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"                node ← peekNode.right")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"            else")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"                visit(peekNode)")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"                lastNodeVisited ← stack.pop()")])])]),(0,a.Lk)("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"})])],-1)])]),_:1}),l[91]||(l[91]=(0,a.Lk)("h5",{id:"广度优先遍历-bfs",tabindex:"-1"},[(0,a.Lk)("a",{class:"header-anchor",href:"#广度优先遍历-bfs"},[(0,a.Lk)("span",null,"广度优先遍历（BFS）")])],-1)),l[92]||(l[92]=(0,a.Lk)("figure",null,[(0,a.Lk)("img",{src:b,alt:"breadth first search",tabindex:"0",loading:"lazy"}),(0,a.Lk)("figcaption",null,"breadth first search")],-1)),l[93]||(l[93]=(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,"层序遍历: F, B, G, A, D, I, C, E, H")],-1)),(0,a.bF)(n,{data:[{id:"迭代实现"}]},{title0:(0,a.k6)(({value:e,isActive:n})=>[...l[12]||(l[12]=[(0,a.eW)("迭代实现",-1)])]),tab0:(0,a.k6)(({value:e,isActive:n})=>[...l[13]||(l[13]=[(0,a.Lk)("div",{class:"language-text line-numbers-mode","data-highlighter":"shiki","data-ext":"text",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[(0,a.Lk)("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[(0,a.Lk)("code",{class:"language-text"},[(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"procedure level_order(node)")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"    queue ← empty queue")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"    queue.enqueue(node)")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"    while not queue.isEmpty()")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"        node ← queue.dequeue()")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"        visit(node)")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"        if node.left ≠ null")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"            queue.enqueue(node.left)")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"        if node.right ≠ null")]),(0,a.eW)("\n"),(0,a.Lk)("span",{class:"line"},[(0,a.Lk)("span",null,"            queue.enqueue(node.right)")])])]),(0,a.Lk)("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"}),(0,a.Lk)("div",{class:"line-number"})])],-1)])]),_:1}),l[94]||(l[94]=(0,a.Fv)('<h3 id="复杂度" tabindex="-1"><a class="header-anchor" href="#复杂度"><span>复杂度</span></a></h3><h4 id="时间复杂度" tabindex="-1"><a class="header-anchor" href="#时间复杂度"><span>时间复杂度</span></a></h4><table><thead><tr><th>Operation</th><th>Average</th><th>Worst case</th></tr></thead><tbody><tr><td>Search</td><td>O(log(n))</td><td>O(n)</td></tr><tr><td>Insert</td><td>O(log(n))</td><td>O(n)</td></tr><tr><td>Delete</td><td>O(log(n))</td><td>O(n)</td></tr></tbody></table><h4 id="空间复杂度" tabindex="-1"><a class="header-anchor" href="#空间复杂度"><span>空间复杂度</span></a></h4><table><thead><tr><th>Operation</th><th>Average</th><th>Worst case</th></tr></thead><tbody><tr><td>Space</td><td>O(n)</td><td>O(n)</td></tr></tbody></table><h2 id="习题" tabindex="-1"><a class="header-anchor" href="#习题"><span>习题</span></a></h2><h3 id="二叉树的遍历方式" tabindex="-1"><a class="header-anchor" href="#二叉树的遍历方式"><span>二叉树的遍历方式</span></a></h3>',7)),(0,a.Lk)("p",null,[(0,a.bF)(_,{to:"/zh/algorithm/leetcode/binary_tree/144_binary_tree_pre_order_traversal.html"},{default:(0,a.k6)(()=>[...l[14]||(l[14]=[(0,a.eW)("144: 二叉树的前序遍历",-1)])]),_:1}),l[18]||(l[18]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(_,{to:"/zh/algorithm/leetcode/binary_tree/94_binary_tree_in_order_traversal.html"},{default:(0,a.k6)(()=>[...l[15]||(l[15]=[(0,a.eW)("94: 二叉树的中序遍历",-1)])]),_:1}),l[19]||(l[19]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(_,{to:"/zh/algorithm/leetcode/binary_tree/145_binary_tree_post_order_traversal.html"},{default:(0,a.k6)(()=>[...l[16]||(l[16]=[(0,a.eW)("145: 二叉树的后序遍历",-1)])]),_:1}),l[20]||(l[20]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(_,{to:"/zh/algorithm/leetcode/binary_tree/102_binary_tree_level_order_traversal.html"},{default:(0,a.k6)(()=>[...l[17]||(l[17]=[(0,a.eW)("102: 二叉树的层序遍历",-1)])]),_:1})]),l[95]||(l[95]=(0,a.Lk)("h3",{id:"二叉树的层序遍历",tabindex:"-1"},[(0,a.Lk)("a",{class:"header-anchor",href:"#二叉树的层序遍历"},[(0,a.Lk)("span",null,"二叉树的层序遍历")])],-1)),(0,a.Lk)("p",null,[(0,a.bF)(_,{to:"/zh/algorithm/leetcode/binary_tree/107_binary_tree_level_order_traversal_ii.html"},{default:(0,a.k6)(()=>[...l[21]||(l[21]=[(0,a.eW)("107: 二叉树的层序遍历II",-1)])]),_:1}),l[28]||(l[28]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(_,{to:"/zh/algorithm/leetcode/binary_tree/199_binary_tree_right_side_view.html"},{default:(0,a.k6)(()=>[...l[22]||(l[22]=[(0,a.eW)("199: 二叉树的右视图",-1)])]),_:1}),l[29]||(l[29]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(_,{to:"/zh/algorithm/leetcode/binary_tree/637_average_of_levels_in_binary_tree.html"},{default:(0,a.k6)(()=>[...l[23]||(l[23]=[(0,a.eW)("637: 二叉树的层平均值",-1)])]),_:1}),l[30]||(l[30]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(_,{to:"/zh/algorithm/leetcode/binary_tree/429_n_ary_tree_level_order_traversal.html"},{default:(0,a.k6)(()=>[...l[24]||(l[24]=[(0,a.eW)("429: N叉树的层序遍历",-1)])]),_:1}),l[31]||(l[31]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(_,{to:"/zh/algorithm/leetcode/binary_tree/515_find_largest_value_in_each_tree_row.html"},{default:(0,a.k6)(()=>[...l[25]||(l[25]=[(0,a.eW)("515: 在每个树行中找最大值",-1)])]),_:1}),l[32]||(l[32]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(_,{to:"/zh/algorithm/leetcode/binary_tree/116_populating_next_right_pointers_in_each_node.html"},{default:(0,a.k6)(()=>[...l[26]||(l[26]=[(0,a.eW)("116: 填充每个节点的下一个右侧节点指针",-1)])]),_:1}),l[33]||(l[33]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(_,{to:"/zh/algorithm/leetcode/binary_tree/117_populating_next_right_pointers_in_each_node_ii.html"},{default:(0,a.k6)(()=>[...l[27]||(l[27]=[(0,a.eW)("117: 填充每个节点的下一个右侧节点指针II",-1)])]),_:1})]),l[96]||(l[96]=(0,a.Lk)("h3",{id:"二叉树的属性",tabindex:"-1"},[(0,a.Lk)("a",{class:"header-anchor",href:"#二叉树的属性"},[(0,a.Lk)("span",null,"二叉树的属性")])],-1)),(0,a.Lk)("p",null,[(0,a.bF)(_,{to:"/zh/algorithm/leetcode/binary_tree/101_symmetric_tree.html"},{default:(0,a.k6)(()=>[...l[34]||(l[34]=[(0,a.eW)("101: 对称二叉树",-1)])]),_:1}),l[44]||(l[44]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(_,{to:"/zh/algorithm/leetcode/binary_tree/104_maximum_depth_of_binary_tree.html"},{default:(0,a.k6)(()=>[...l[35]||(l[35]=[(0,a.eW)("104: 二叉树的最大深度",-1)])]),_:1}),l[45]||(l[45]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(_,{to:"/zh/algorithm/leetcode/binary_tree/111_minimum_depth_of_binary_tree.html"},{default:(0,a.k6)(()=>[...l[36]||(l[36]=[(0,a.eW)("111: 二叉树的最小深度",-1)])]),_:1}),l[46]||(l[46]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(_,{to:"/zh/algorithm/leetcode/binary_tree/222_count_complete_tree_nodes.html"},{default:(0,a.k6)(()=>[...l[37]||(l[37]=[(0,a.eW)("222: 完全二叉树的节点个数",-1)])]),_:1}),l[47]||(l[47]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(_,{to:"/zh/algorithm/leetcode/binary_tree/110_balanced_binary_tree.html"},{default:(0,a.k6)(()=>[...l[38]||(l[38]=[(0,a.eW)("110: 平衡二叉树",-1)])]),_:1}),l[48]||(l[48]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(_,{to:"/zh/algorithm/leetcode/binary_tree/257_binary_tree_paths.html"},{default:(0,a.k6)(()=>[...l[39]||(l[39]=[(0,a.eW)("257: 二叉树的所有路径",-1)])]),_:1}),l[49]||(l[49]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(_,{to:"/zh/algorithm/leetcode/binary_tree/404_sum_of_left_leaves.html"},{default:(0,a.k6)(()=>[...l[40]||(l[40]=[(0,a.eW)("404: 左叶子之和",-1)])]),_:1}),l[50]||(l[50]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(_,{to:"/zh/algorithm/leetcode/binary_tree/513_find_bottom_left_tree_value.html"},{default:(0,a.k6)(()=>[...l[41]||(l[41]=[(0,a.eW)("513: 找树左下角的值",-1)])]),_:1}),l[51]||(l[51]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(_,{to:"/zh/algorithm/leetcode/binary_tree/112_path_sum.html"},{default:(0,a.k6)(()=>[...l[42]||(l[42]=[(0,a.eW)("112: 路径总和",-1)])]),_:1}),l[52]||(l[52]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(_,{to:"/zh/algorithm/leetcode/binary_tree/113_path_sum_ii.html"},{default:(0,a.k6)(()=>[...l[43]||(l[43]=[(0,a.eW)("113: 路径总和II",-1)])]),_:1})]),l[97]||(l[97]=(0,a.Lk)("h3",{id:"二叉树的修改与构造",tabindex:"-1"},[(0,a.Lk)("a",{class:"header-anchor",href:"#二叉树的修改与构造"},[(0,a.Lk)("span",null,"二叉树的修改与构造")])],-1)),(0,a.Lk)("p",null,[(0,a.bF)(_,{to:"/zh/algorithm/leetcode/binary_tree/226_invert_binary_tree.html"},{default:(0,a.k6)(()=>[...l[53]||(l[53]=[(0,a.eW)("226: 翻转二叉树",-1)])]),_:1}),l[58]||(l[58]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(_,{to:"/zh/algorithm/leetcode/binary_tree/105_construct_binary_tree_from_preorder_and_inorder_traversal.html"},{default:(0,a.k6)(()=>[...l[54]||(l[54]=[(0,a.eW)("105: 从中序与先序遍历序列构造二叉树",-1)])]),_:1}),l[59]||(l[59]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(_,{to:"/zh/algorithm/leetcode/binary_tree/106_construct_binary_tree_from_post_order_and_in_order_traversal.html"},{default:(0,a.k6)(()=>[...l[55]||(l[55]=[(0,a.eW)("106: 从中序与后序遍历序列构造二叉树",-1)])]),_:1}),l[60]||(l[60]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(_,{to:"/zh/algorithm/leetcode/binary_tree/654_maximum_binary_tree.html"},{default:(0,a.k6)(()=>[...l[56]||(l[56]=[(0,a.eW)("654: 最大二叉树",-1)])]),_:1}),l[61]||(l[61]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(_,{to:"/zh/algorithm/leetcode/binary_tree/617_merge_two_binary_trees.html"},{default:(0,a.k6)(()=>[...l[57]||(l[57]=[(0,a.eW)("617: 合并二叉树",-1)])]),_:1})]),l[98]||(l[98]=(0,a.Lk)("h3",{id:"二叉搜索树的属性",tabindex:"-1"},[(0,a.Lk)("a",{class:"header-anchor",href:"#二叉搜索树的属性"},[(0,a.Lk)("span",null,"二叉搜索树的属性")])],-1)),(0,a.Lk)("p",null,[(0,a.bF)(_,{to:"/zh/algorithm/leetcode/binary_tree/700_search_in_a_binary_search_tree.html"},{default:(0,a.k6)(()=>[...l[62]||(l[62]=[(0,a.eW)("700: 二叉搜索树中的搜索",-1)])]),_:1}),l[67]||(l[67]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(_,{to:"/zh/algorithm/leetcode/binary_tree/98_validate_binary_search_tree.html"},{default:(0,a.k6)(()=>[...l[63]||(l[63]=[(0,a.eW)("98: 验证二叉搜索树",-1)])]),_:1}),l[68]||(l[68]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(_,{to:"/zh/algorithm/leetcode/binary_tree/530_minimum_absolute_difference_in_bst.html"},{default:(0,a.k6)(()=>[...l[64]||(l[64]=[(0,a.eW)("530: 二叉搜索树的最小绝对差",-1)])]),_:1}),l[69]||(l[69]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(_,{to:"/zh/algorithm/leetcode/binary_tree/501_find_mode_in_binary_search_tree.html"},{default:(0,a.k6)(()=>[...l[65]||(l[65]=[(0,a.eW)("501: 二叉搜索树中的众数",-1)])]),_:1}),l[70]||(l[70]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(_,{to:"/zh/algorithm/leetcode/binary_tree/538_convert_bst_to_greater_tree.html"},{default:(0,a.k6)(()=>[...l[66]||(l[66]=[(0,a.eW)("538: 把二叉搜索树转换为累加树",-1)])]),_:1})]),l[99]||(l[99]=(0,a.Lk)("h3",{id:"二叉树公共祖先问题",tabindex:"-1"},[(0,a.Lk)("a",{class:"header-anchor",href:"#二叉树公共祖先问题"},[(0,a.Lk)("span",null,"二叉树公共祖先问题")])],-1)),(0,a.Lk)("p",null,[(0,a.bF)(_,{to:"/zh/algorithm/leetcode/binary_tree/236_lowest_common_ancestor_of_a_binary_tree.html"},{default:(0,a.k6)(()=>[...l[71]||(l[71]=[(0,a.eW)("236: 二叉树的最近公共祖先",-1)])]),_:1}),l[73]||(l[73]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(_,{to:"/zh/algorithm/leetcode/binary_tree/235_lowest_common_ancestor_of_a_binary_search_tree.html"},{default:(0,a.k6)(()=>[...l[72]||(l[72]=[(0,a.eW)("235: 二叉搜索树的最近公共祖先",-1)])]),_:1})]),l[100]||(l[100]=(0,a.Lk)("h3",{id:"二叉搜索树的修改与构造",tabindex:"-1"},[(0,a.Lk)("a",{class:"header-anchor",href:"#二叉搜索树的修改与构造"},[(0,a.Lk)("span",null,"二叉搜索树的修改与构造")])],-1)),(0,a.Lk)("p",null,[(0,a.bF)(_,{to:"/zh/algorithm/leetcode/binary_tree/701_insert_into_a_binary_search_tree.html"},{default:(0,a.k6)(()=>[...l[74]||(l[74]=[(0,a.eW)("701: 二叉搜索树中的插入操作",-1)])]),_:1}),l[79]||(l[79]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(_,{to:"/zh/algorithm/leetcode/binary_tree/450_delete_node_in_a_bst.html"},{default:(0,a.k6)(()=>[...l[75]||(l[75]=[(0,a.eW)("450: 删除二叉搜索树中的节点",-1)])]),_:1}),l[80]||(l[80]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(_,{to:"/zh/algorithm/leetcode/binary_tree/669_trim_a_binary_search_tree.html"},{default:(0,a.k6)(()=>[...l[76]||(l[76]=[(0,a.eW)("669: 修剪二叉搜索树",-1)])]),_:1}),l[81]||(l[81]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(_,{to:"/zh/algorithm/leetcode/binary_tree/108_convert_sorted_array_to_binary_search_tree.html"},{default:(0,a.k6)(()=>[...l[77]||(l[77]=[(0,a.eW)("108: 将有序数组转换为二叉搜索树",-1)])]),_:1}),l[82]||(l[82]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(_,{to:"/zh/algorithm/leetcode/binary_tree/109_convert_sorted_list_to_binary_search_tree.html"},{default:(0,a.k6)(()=>[...l[78]||(l[78]=[(0,a.eW)("109: 将有序列表转换为二叉搜索树",-1)])]),_:1})]),l[101]||(l[101]=(0,a.Lk)("h3",{id:"其他",tabindex:"-1"},[(0,a.Lk)("a",{class:"header-anchor",href:"#其他"},[(0,a.Lk)("span",null,"其他")])],-1)),(0,a.Lk)("p",null,[(0,a.bF)(_,{to:"/zh/algorithm/leetcode/binary_tree/100_same_tree.html"},{default:(0,a.k6)(()=>[...l[83]||(l[83]=[(0,a.eW)("100: 相同的树",-1)])]),_:1}),l[86]||(l[86]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(_,{to:"/zh/algorithm/leetcode/binary_tree/572_subtree_of_another_tree.html"},{default:(0,a.k6)(()=>[...l[84]||(l[84]=[(0,a.eW)("572: 另一棵树的子树",-1)])]),_:1}),l[87]||(l[87]=(0,a.Lk)("br",null,null,-1)),(0,a.bF)(_,{to:"/zh/algorithm/leetcode/binary_tree/559_maximum_depth_of_n_ary_tree.html"},{default:(0,a.k6)(()=>[...l[85]||(l[85]=[(0,a.eW)("559: N叉树的最大深度",-1)])]),_:1})]),l[102]||(l[102]=(0,a.Lk)("h2",{id:"总结",tabindex:"-1"},[(0,a.Lk)("a",{class:"header-anchor",href:"#总结"},[(0,a.Lk)("span",null,"总结")])],-1))])}]]),m=JSON.parse('{"path":"/zh/algorithm/leetcode/binary_tree/","title":"二叉树","lang":"zh-CN","frontmatter":{"title":"二叉树","icon":"discover","date":"2023-12-05T00:00:00.000Z","dir":{"order":7},"category":"leetcode","tag":"binary tree","sticky":false,"description":"二叉树 定义 在计算机科学中，二叉树是每个节点最多只有两个分支（即不存在分支度大于2的节点）的树结构。通常分支被称作左子树或右子树。二叉树的分支具有左右次序，不能随意颠倒。 binary_tree 在图论中的定义 二叉树是一个连通的无环图，并且每一个顶点的度不大于3。有根二叉树还要满足根节点的度不大于2。有了根节点之后，每个顶点定义了唯一的父节点，和最...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"二叉树\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-12-05T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-25T10:00:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mike\\"}]}"],["meta",{"property":"og:url","content":"https://thecodedmike.github.io/zh/algorithm/leetcode/binary_tree/"}],["meta",{"property":"og:site_name","content":"Mike的博客"}],["meta",{"property":"og:title","content":"二叉树"}],["meta",{"property":"og:description","content":"二叉树 定义 在计算机科学中，二叉树是每个节点最多只有两个分支（即不存在分支度大于2的节点）的树结构。通常分支被称作左子树或右子树。二叉树的分支具有左右次序，不能随意颠倒。 binary_tree 在图论中的定义 二叉树是一个连通的无环图，并且每一个顶点的度不大于3。有根二叉树还要满足根节点的度不大于2。有了根节点之后，每个顶点定义了唯一的父节点，和最..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-01-25T10:00:12.000Z"}],["meta",{"property":"article:tag","content":"binary tree"}],["meta",{"property":"article:published_time","content":"2023-12-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-25T10:00:12.000Z"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://thecodedmike.github.io/algorithm/leetcode/binary_tree/"}]]},"git":{"createdTime":1695811035000,"updatedTime":1706176812000,"contributors":[{"name":"mike","username":"mike","email":"lixiaofeng1115@outlook.com","commits":44,"url":"https://github.com/mike"}]},"readingTime":{"minutes":6.79,"words":2036},"filePathRelative":"zh/algorithm/leetcode/binary_tree/README.md","excerpt":"<h2>二叉树</h2>\\n<h3>定义</h3>\\n<p>在计算机科学中，<a href=\\"https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><strong>二叉树</strong></a>是每个节点最多只有两个分支（即不存在分支度大于2的节点）的树结构。通常分支被称作<code>左子树</code>或<code>右子树</code>。二叉树的分支具有左右次序，不能随意颠倒。<br>\\n</p>\\n<h3>在图论中的定义</h3>\\n<p>二叉树是一个连通的无环图，并且每一个顶点的度不大于3。有根二叉树还要满足根节点的度不大于2。有了根节点之后，每个顶点定义了唯一的父节点，和最多2个子节点。然而，没有足够的信息来区分左节点和右节点。如果不考虑连通性，允许图中有多个连通分量，这样的结构叫做森林。</p>","autoDesc":true}')},28153:(e,l,n)=>{e.exports=n.p+"assets/img/complete_binary_tree.7ef3d299.png"},32785:(e,l,n)=>{e.exports=n.p+"assets/img/binary_tree.cbf68e7c.png"},53223:(e,l,n)=>{e.exports=n.p+"assets/img/full_binary_tree.b7408a9c.png"},55983:(e,l,n)=>{e.exports=n.p+"assets/img/rbt.9772ba20.png"},60876:(e,l,n)=>{e.exports=n.p+"assets/img/avl.2b8b3b37.png"},67319:(e,l,n)=>{e.exports=n.p+"assets/img/perfect_binary_tree.1a0e6830.png"},73700:(e,l,n)=>{e.exports=n.p+"assets/img/bst.32e6f716.png"},75726:(e,l)=>{l.A=(e,l)=>{const n=e.__vccOpts||e;for(const[e,a]of l)n[e]=a;return n}}}]);