const e=JSON.parse(`{"key":"v-4aa9fbfa","path":"/algorithm/leetcode/binary_tree/654_maximum_binary_tree.html","title":"654, Maximum Binary Tree","lang":"en-US","frontmatter":{"title":"654, Maximum Binary Tree","icon":"discover","date":"2024-01-04T00:00:00.000Z","order":25,"sticky":true,"category":"binary tree","tag":["medium","array","binary tree","stack","divide and conquer","monotonic stack"],"description":"I Problem You are given an integer array nums with no duplicates. A maximum binary tree can be built recursively from nums using the following algorithm: Create a root node whose value is the maximum value in nums. Recursively build the left subtree on the subarray prefix to the left of the maximum value. Recursively build the right subtree on the subarray suffix to the right of the maximum value.","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://thecodedmike.github.io/zh/algorithm/leetcode/binary_tree/654_maximum_binary_tree.html"}],["meta",{"property":"og:url","content":"https://thecodedmike.github.io/algorithm/leetcode/binary_tree/654_maximum_binary_tree.html"}],["meta",{"property":"og:site_name","content":"Mike's Blog"}],["meta",{"property":"og:title","content":"654, Maximum Binary Tree"}],["meta",{"property":"og:description","content":"I Problem You are given an integer array nums with no duplicates. A maximum binary tree can be built recursively from nums using the following algorithm: Create a root node whose value is the maximum value in nums. Recursively build the left subtree on the subarray prefix to the left of the maximum value. Recursively build the right subtree on the subarray suffix to the right of the maximum value."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-04T21:31:57.000Z"}],["meta",{"property":"article:author","content":"Mike"}],["meta",{"property":"article:tag","content":"medium"}],["meta",{"property":"article:tag","content":"array"}],["meta",{"property":"article:tag","content":"binary tree"}],["meta",{"property":"article:tag","content":"stack"}],["meta",{"property":"article:tag","content":"divide and conquer"}],["meta",{"property":"article:tag","content":"monotonic stack"}],["meta",{"property":"article:published_time","content":"2024-01-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-04T21:31:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"654, Maximum Binary Tree\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-04T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-04T21:31:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mike\\"}]}"]]},"headers":[{"level":2,"title":"I Problem","slug":"i-problem","link":"#i-problem","children":[]},{"level":2,"title":"II Solution","slug":"ii-solution","link":"#ii-solution","children":[{"level":3,"title":"Approach 1: Recursion","slug":"approach-1-recursion","link":"#approach-1-recursion","children":[]},{"level":3,"title":"Approach 2: Monotonic Stack","slug":"approach-2-monotonic-stack","link":"#approach-2-monotonic-stack","children":[]}]}],"git":{"createdTime":1704403917000,"updatedTime":1704403917000,"contributors":[{"name":"mike","email":"lixiaofeng1115@outlook.com","commits":1}]},"readingTime":{"minutes":4.37,"words":1310},"filePathRelative":"algorithm/leetcode/binary_tree/654_maximum_binary_tree.md","localizedDate":"January 4, 2024","excerpt":"<h2> I Problem</h2>\\n<p>You are given an integer array <code>nums</code> with no duplicates. A <strong>maximum binary tree</strong> can be built recursively from <code>nums</code> using the following algorithm:</p>\\n<ol>\\n<li>Create a root node whose value is the maximum value in <code>nums</code>.</li>\\n<li>Recursively build the left subtree on the <strong>subarray prefix</strong> to the <strong>left</strong> of the maximum value.</li>\\n<li>Recursively build the right subtree on the <strong>subarray suffix</strong> to the <strong>right</strong> of the maximum value.</li>\\n</ol>","autoDesc":true}`);export{e as data};
