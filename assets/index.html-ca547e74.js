import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as d,c as a,a as e,d as o,w as _,b as t,e as i}from"./app-66dde111.js";const s={},h=i('<h2 id="贪心算法" tabindex="-1"><a class="header-anchor" href="#贪心算法" aria-hidden="true">#</a> 贪心算法</h2><p><strong>贪心算法</strong>（greedy algorithm，又称<strong>贪婪算法</strong>）是指，在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，算法得到的是在某种意义上的局部最优解。</p><p>贪心算法不是对所有问题都能得到整体最优解，关键是贪心策略的选择。</p><p>贪心算法一般分为如下四步：</p><ul><li>将问题分解为若干个子问题</li><li>找出适合的贪心策略</li><li>求解每一个子问题的最优解</li><li>将局部最优解堆叠成全局最优解</li></ul><p>贪心算法没有套路，说白了就是常识性推导加上举反例。</p><h2 id="习题" tabindex="-1"><a class="header-anchor" href="#习题" aria-hidden="true">#</a> 习题</h2>',7),u=e("br",null,null,-1),c=e("br",null,null,-1),m=e("br",null,null,-1),g=e("br",null,null,-1),b=e("br",null,null,-1),f=e("br",null,null,-1),p=e("br",null,null,-1),y=e("br",null,null,-1),z=e("br",null,null,-1),x=e("br",null,null,-1),k=e("br",null,null,-1),w=e("br",null,null,-1),I=e("br",null,null,-1),N=e("br",null,null,-1),V=e("br",null,null,-1),v=e("br",null,null,-1),B=e("br",null,null,-1),j=e("h2",{id:"总结",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#总结","aria-hidden":"true"},"#"),t(" 总结")],-1);function q(C,L){const l=r("RouterLink");return d(),a("div",null,[h,e("p",null,[o(l,{to:"/zh/algorithm/leetcode/greedy/455_assign_cookies.html"},{default:_(()=>[t("455: 分发饼干")]),_:1}),u,o(l,{to:"/zh/algorithm/leetcode/greedy/1005_maximize_sum_of_array_after_k_negations.html"},{default:_(()=>[t("1005: K次取反后最大化的数组和")]),_:1}),c,o(l,{to:"/zh/algorithm/leetcode/greedy/860_lemonade_change.html"},{default:_(()=>[t("860: 柠檬水找零")]),_:1}),m,o(l,{to:"/zh/algorithm/leetcode/greedy/376_wiggle_subsequence.html"},{default:_(()=>[t("376: 摆动序列")]),_:1}),g,o(l,{to:"/zh/algorithm/leetcode/greedy/738_monotone_increasing_digits.html"},{default:_(()=>[t("738: 单调递增的数字")]),_:1}),b,o(l,{to:"/zh/algorithm/leetcode/greedy/122_best_time_to_buy_and_sell_stock_ii.html"},{default:_(()=>[t("122: 买卖股票的最佳时机II")]),_:1}),f,o(l,{to:"/zh/algorithm/leetcode/greedy/714_best_time_to_buy_and_sell_stock_with_transaction_fee.html"},{default:_(()=>[t("714: 买卖股票的最佳时机含手续费")]),_:1}),p,o(l,{to:"/zh/algorithm/leetcode/greedy/135_candy.html"},{default:_(()=>[t("135: 分发糖果")]),_:1}),y,o(l,{to:"/zh/algorithm/leetcode/greedy/406_queue_reconstruction_by_height.html"},{default:_(()=>[t("406: 根据身高重建队列")]),_:1}),z,o(l,{to:"/zh/algorithm/leetcode/greedy/55_jump_game.html"},{default:_(()=>[t("55: 跳跃游戏")]),_:1}),x,o(l,{to:"/zh/algorithm/leetcode/greedy/45_jump_game_ii.html"},{default:_(()=>[t("45: 跳跃游戏II")]),_:1}),k,t(" [452: 用最少数量的箭引爆气球]"),w,t(" [435: 无重叠区间]"),I,t(" [763: 划分字母区间]"),N,t(" [56: 合并区间]"),V,t(" [53: 最大子序和]"),v,t(" [134: 加油站]"),B,t(" [968: 监控二叉树]")]),j])}const K=n(s,[["render",q],["__file","index.html.vue"]]);export{K as default};
