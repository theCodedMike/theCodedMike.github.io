const e=JSON.parse(`{"key":"v-5b19d529","path":"/algorithm/leetcode/stack_queue/225_implement_stack_using_queues.html","title":"225, Implement Stack using Queues","lang":"en-US","frontmatter":{"title":"225, Implement Stack using Queues","icon":"discover","date":"2023-11-28T00:00:00.000Z","order":2,"sticky":true,"category":"stack/queue","tag":["easy","stack","queue","design"],"description":"I Problem Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (push, top, pop, and empty). Implement the MyStack class: void push(int x) Pushes element x to the top of the stack. int pop() Removes the element on the top of the stack and returns it. int top() Returns the element on the top of the stack. boolean empty() Returns true if the stack is empty, false otherwise.","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://thecodedmike.github.io/zh/algorithm/leetcode/stack_queue/225_implement_stack_using_queues.html"}],["meta",{"property":"og:url","content":"https://thecodedmike.github.io/algorithm/leetcode/stack_queue/225_implement_stack_using_queues.html"}],["meta",{"property":"og:site_name","content":"Mike's Blog"}],["meta",{"property":"og:title","content":"225, Implement Stack using Queues"}],["meta",{"property":"og:description","content":"I Problem Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (push, top, pop, and empty). Implement the MyStack class: void push(int x) Pushes element x to the top of the stack. int pop() Removes the element on the top of the stack and returns it. int top() Returns the element on the top of the stack. boolean empty() Returns true if the stack is empty, false otherwise."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-28T16:04:34.000Z"}],["meta",{"property":"article:author","content":"Mike"}],["meta",{"property":"article:tag","content":"easy"}],["meta",{"property":"article:tag","content":"stack"}],["meta",{"property":"article:tag","content":"queue"}],["meta",{"property":"article:tag","content":"design"}],["meta",{"property":"article:published_time","content":"2023-11-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-28T16:04:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"225, Implement Stack using Queues\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-11-28T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-28T16:04:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mike\\"}]}"]]},"headers":[{"level":2,"title":"I Problem","slug":"i-problem","link":"#i-problem","children":[]},{"level":2,"title":"II Solution","slug":"ii-solution","link":"#ii-solution","children":[{"level":3,"title":"Approach 1: Two Queues","slug":"approach-1-two-queues","link":"#approach-1-two-queues","children":[]},{"level":3,"title":"Approach 2: One Queue","slug":"approach-2-one-queue","link":"#approach-2-one-queue","children":[]}]}],"git":{"createdTime":1701187474000,"updatedTime":1701187474000,"contributors":[{"name":"mike","email":"lixiaofeng1115@outlook.com","commits":1}]},"readingTime":{"minutes":2.27,"words":680},"filePathRelative":"algorithm/leetcode/stack_queue/225_implement_stack_using_queues.md","localizedDate":"November 28, 2023","excerpt":"<h2> I Problem</h2>\\n<p>Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (<code>push</code>, <code>top</code>, <code>pop</code>, and <code>empty</code>).</p>\\n<p>Implement the <code>MyStack</code> class:</p>\\n<ul>\\n<li><code>void push(int x)</code> Pushes element x to the top of the stack.</li>\\n<li><code>int pop()</code> Removes the element on the top of the stack and returns it.</li>\\n<li><code>int top()</code> Returns the element on the top of the stack.</li>\\n<li><code>boolean empty()</code> Returns <code>true</code> if the stack is empty, <code>false</code> otherwise.</li>\\n</ul>","autoDesc":true}`);export{e as data};
