import{_ as l,a as n,b as s,c as h,d as o,e as c,f as _,g as m,h as u,i as p}from"./doubly_linked_list_delete_node-93a022cc.js";import{_ as f}from"./plugin-vue_export-helper-c27b6911.js";import{r as g,o as b,c as k,a as e,d,w as r,e as t,b as a}from"./app-e6a43281.js";const x={},L=t('<h2 id="链表" tabindex="-1"><a class="header-anchor" href="#链表" aria-hidden="true">#</a> 链表</h2><p>链表是一种通过指针串联在一起的线性结构，每一个节点由两部分组成，一个是数据域，另一个是指针域。<br><img src="'+l+'" alt="Linked List" loading="lazy"></p><h3 id="链表的类型" tabindex="-1"><a class="header-anchor" href="#链表的类型" aria-hidden="true">#</a> 链表的类型</h3><ul><li>单链表<br><img src="'+n+'" alt="Singly Linked List" loading="lazy"></li><li>双链表<br><img src="'+s+'" alt="Doubly Linked List" loading="lazy"></li><li>循环单链表<br><img src="'+h+'" alt="Circular Singly Linked List" loading="lazy"></li><li>循环双链表<br><img src="'+o+'" alt="Circular Doubly Linked List" loading="lazy"></li></ul><h3 id="链表的内存分配" tabindex="-1"><a class="header-anchor" href="#链表的内存分配" aria-hidden="true">#</a> 链表的内存分配</h3><p>链表中的节点在内存中不是连续分布的 ，而是散乱分布在内存中的某地址上。<br><img src="'+c+'" alt="Linked List Memory Allocation" loading="lazy"></p><h3 id="链表的操作" tabindex="-1"><a class="header-anchor" href="#链表的操作" aria-hidden="true">#</a> 链表的操作</h3><h4 id="添加节点" tabindex="-1"><a class="header-anchor" href="#添加节点" aria-hidden="true">#</a> 添加节点</h4><p><img src="'+_+'" alt="Singly Linked List Add Node" loading="lazy"><br><img src="'+m+'" alt="Doubly Linked List Add Node" loading="lazy"></p><h4 id="删除节点" tabindex="-1"><a class="header-anchor" href="#删除节点" aria-hidden="true">#</a> 删除节点</h4><p><img src="'+u+'" alt="Singly Linked List Delete Node" loading="lazy"><br><img src="'+p+'" alt="Doubly Linked List Delete Node" loading="lazy"></p><h2 id="习题" tabindex="-1"><a class="header-anchor" href="#习题" aria-hidden="true">#</a> 习题</h2><h3 id="移除链表元素" tabindex="-1"><a class="header-anchor" href="#移除链表元素" aria-hidden="true">#</a> 移除链表元素</h3>',13),y=e("h3",{id:"设计链表",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#设计链表","aria-hidden":"true"},"#"),a(" 设计链表")],-1),z=e("h3",{id:"反转链表",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#反转链表","aria-hidden":"true"},"#"),a(" 反转链表")],-1),N=e("h3",{id:"两两交换链表中的节点",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#两两交换链表中的节点","aria-hidden":"true"},"#"),a(" 两两交换链表中的节点")],-1),v=e("h3",{id:"删除链表的倒数第n个节点",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#删除链表的倒数第n个节点","aria-hidden":"true"},"#"),a(" 删除链表的倒数第N个节点")],-1),D=t('<h3 id="链表相交" tabindex="-1"><a class="header-anchor" href="#链表相交" aria-hidden="true">#</a> 链表相交</h3><p>[160: 链表相交]</p><h3 id="环形链表" tabindex="-1"><a class="header-anchor" href="#环形链表" aria-hidden="true">#</a> 环形链表</h3><p>[141: 环形链表]<br> [142: 环形链表II]</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>',5);function S(C,V){const i=g("RouterLink");return b(),k("div",null,[L,e("p",null,[d(i,{to:"/zh/algorithm/leetcode/linkedlist/203_remove_linked_list_elements.html"},{default:r(()=>[a("203: 移除链表元素")]),_:1})]),y,e("p",null,[d(i,{to:"/zh/algorithm/leetcode/linkedlist/707_design_linked_list.html"},{default:r(()=>[a("707: 设计链表")]),_:1})]),z,e("p",null,[d(i,{to:"/zh/algorithm/leetcode/linkedlist/206_reverse_linked_list.html"},{default:r(()=>[a("206: 反转链表")]),_:1})]),N,e("p",null,[d(i,{to:"/zh/algorithm/leetcode/linkedlist/24_swap_nodes_in_pairs.html"},{default:r(()=>[a("24: 两两交换链表中的节点")]),_:1})]),v,e("p",null,[d(i,{to:"/zh/algorithm/leetcode/linkedlist/19_remove_nth_node_from_end_of_list.html"},{default:r(()=>[a("19: 删除链表的倒数第N个节点")]),_:1})]),D])}const I=f(x,[["render",S],["__file","index.html.vue"]]);export{I as default};
