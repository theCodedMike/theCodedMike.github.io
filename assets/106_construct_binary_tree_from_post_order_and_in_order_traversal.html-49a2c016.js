const e=JSON.parse(`{"key":"v-063534c8","path":"/algorithm/leetcode/binary_tree/106_construct_binary_tree_from_post_order_and_in_order_traversal.html","title":"106, Construct Binary Tree from Post-order and In-order Traversal","lang":"en-US","frontmatter":{"title":"106, Construct Binary Tree from Post-order and In-order Traversal","icon":"discover","date":"2024-01-03T00:00:00.000Z","order":24,"sticky":true,"category":"binary tree","tag":["medium","array","hash table","divide and conquer","binary tree"],"description":"I Problem Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree. Example 1 Input: inorder = [9, 3, 15, 20, 7], postorder = [9, 15, 7, 20, 3] Output: [3, 9, 20, null, null, 15, 7]","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://thecodedmike.github.io/zh/algorithm/leetcode/binary_tree/106_construct_binary_tree_from_post_order_and_in_order_traversal.html"}],["meta",{"property":"og:url","content":"https://thecodedmike.github.io/algorithm/leetcode/binary_tree/106_construct_binary_tree_from_post_order_and_in_order_traversal.html"}],["meta",{"property":"og:site_name","content":"Mike's Blog"}],["meta",{"property":"og:title","content":"106, Construct Binary Tree from Post-order and In-order Traversal"}],["meta",{"property":"og:description","content":"I Problem Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree. Example 1 Input: inorder = [9, 3, 15, 20, 7], postorder = [9, 15, 7, 20, 3] Output: [3, 9, 20, null, null, 15, 7]"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-03T15:15:50.000Z"}],["meta",{"property":"article:author","content":"Mike"}],["meta",{"property":"article:tag","content":"medium"}],["meta",{"property":"article:tag","content":"array"}],["meta",{"property":"article:tag","content":"hash table"}],["meta",{"property":"article:tag","content":"divide and conquer"}],["meta",{"property":"article:tag","content":"binary tree"}],["meta",{"property":"article:published_time","content":"2024-01-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-03T15:15:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"106, Construct Binary Tree from Post-order and In-order Traversal\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-03T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-03T15:15:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mike\\"}]}"]]},"headers":[{"level":2,"title":"I Problem","slug":"i-problem","link":"#i-problem","children":[]},{"level":2,"title":"II Solution","slug":"ii-solution","link":"#ii-solution","children":[{"level":3,"title":"Approach 1: Recursion","slug":"approach-1-recursion","link":"#approach-1-recursion","children":[]},{"level":3,"title":"Approach 2: Iteration","slug":"approach-2-iteration","link":"#approach-2-iteration","children":[]}]}],"git":{"createdTime":1704294950000,"updatedTime":1704294950000,"contributors":[{"name":"mike","email":"lixiaofeng1115@outlook.com","commits":1}]},"readingTime":{"minutes":3.24,"words":973},"filePathRelative":"algorithm/leetcode/binary_tree/106_construct_binary_tree_from_post_order_and_in_order_traversal.md","localizedDate":"January 3, 2024","excerpt":"<h2> I Problem</h2>\\n<p>Given two integer arrays <code>inorder</code> and <code>postorder</code> where <code>inorder</code> is the inorder traversal of a binary tree and <code>postorder</code> is the postorder traversal of the same tree, construct and return <em>the binary tree</em>.</p>\\n<p><strong>Example 1</strong><br>\\n<br>\\nInput: inorder = [9, 3, 15, 20, 7], postorder = [9, 15, 7, 20, 3]<br>\\nOutput: [3, 9, 20, null, null, 15, 7]</p>","autoDesc":true}`);export{e as data};
