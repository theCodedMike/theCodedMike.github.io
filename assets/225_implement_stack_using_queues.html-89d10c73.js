const e=JSON.parse('{"key":"v-c3bbe050","path":"/zh/algorithm/leetcode/stack_queue/225_implement_stack_using_queues.html","title":"225, 用队列实现栈","lang":"zh-CN","frontmatter":{"title":"225, 用队列实现栈","icon":"discover","date":"2023-11-28T00:00:00.000Z","order":2,"sticky":true,"category":"stack/queue","tag":["easy","stack","queue","design"],"description":"一、题目描述 请你仅使用两个队列实现一个后入先出（LIFO）的栈，并支持普通栈的全部四种操作（push、top、pop和empty）。 实现MyStack类： void push(int x)将元素x压入栈顶。 int pop()移除并返回栈顶元素。 int top()返回栈顶元素。 boolean empty()如果栈是空的，返回true；否则，返回false。","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://thecodedmike.github.io/algorithm/leetcode/stack_queue/225_implement_stack_using_queues.html"}],["meta",{"property":"og:url","content":"https://thecodedmike.github.io/zh/algorithm/leetcode/stack_queue/225_implement_stack_using_queues.html"}],["meta",{"property":"og:site_name","content":"Mike的博客"}],["meta",{"property":"og:title","content":"225, 用队列实现栈"}],["meta",{"property":"og:description","content":"一、题目描述 请你仅使用两个队列实现一个后入先出（LIFO）的栈，并支持普通栈的全部四种操作（push、top、pop和empty）。 实现MyStack类： void push(int x)将元素x压入栈顶。 int pop()移除并返回栈顶元素。 int top()返回栈顶元素。 boolean empty()如果栈是空的，返回true；否则，返回false。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-11-28T16:04:34.000Z"}],["meta",{"property":"article:author","content":"Mike"}],["meta",{"property":"article:tag","content":"easy"}],["meta",{"property":"article:tag","content":"stack"}],["meta",{"property":"article:tag","content":"queue"}],["meta",{"property":"article:tag","content":"design"}],["meta",{"property":"article:published_time","content":"2023-11-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-28T16:04:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"225, 用队列实现栈\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-11-28T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-28T16:04:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mike\\"}]}"]]},"headers":[{"level":2,"title":"一、题目描述","slug":"一、题目描述","link":"#一、题目描述","children":[]},{"level":2,"title":"二、题解","slug":"二、题解","link":"#二、题解","children":[{"level":3,"title":"方法 1: 两个队列","slug":"方法-1-两个队列","link":"#方法-1-两个队列","children":[]},{"level":3,"title":"方法 2: 一个队列","slug":"方法-2-一个队列","link":"#方法-2-一个队列","children":[]}]}],"git":{"createdTime":1701187474000,"updatedTime":1701187474000,"contributors":[{"name":"mike","email":"lixiaofeng1115@outlook.com","commits":1}]},"readingTime":{"minutes":2.44,"words":733},"filePathRelative":"zh/algorithm/leetcode/stack_queue/225_implement_stack_using_queues.md","localizedDate":"2023年11月28日","excerpt":"<h2> 一、题目描述</h2>\\n<p>请你仅使用两个队列实现一个后入先出（LIFO）的栈，并支持普通栈的全部四种操作（<code>push</code>、<code>top</code>、<code>pop</code>和<code>empty</code>）。</p>\\n<p>实现<code>MyStack</code>类：</p>\\n<ul>\\n<li><code>void push(int x)</code>将元素<code>x</code>压入栈顶。</li>\\n<li><code>int pop()</code>移除并返回栈顶元素。</li>\\n<li><code>int top()</code>返回栈顶元素。</li>\\n<li><code>boolean empty()</code>如果栈是空的，返回<code>true</code>；否则，返回<code>false</code>。</li>\\n</ul>","autoDesc":true}');export{e as data};
