const e=JSON.parse(`{"key":"v-1fe43431","path":"/algorithm/leetcode/binary_tree/617_merge_two_binary_trees.html","title":"617, Merge Two Binary Trees","lang":"en-US","frontmatter":{"title":"617, Merge Two Binary Trees","icon":"discover","date":"2024-01-05T00:00:00.000Z","order":26,"sticky":true,"category":"binary tree","tag":["easy","binary tree","depth first search","breadth first search"],"description":"I Problem You are given two binary trees root1 and root2. Imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. You need to merge the two trees into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of the new tree.","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://thecodedmike.github.io/zh/algorithm/leetcode/binary_tree/617_merge_two_binary_trees.html"}],["meta",{"property":"og:url","content":"https://thecodedmike.github.io/algorithm/leetcode/binary_tree/617_merge_two_binary_trees.html"}],["meta",{"property":"og:site_name","content":"Mike's Blog"}],["meta",{"property":"og:title","content":"617, Merge Two Binary Trees"}],["meta",{"property":"og:description","content":"I Problem You are given two binary trees root1 and root2. Imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. You need to merge the two trees into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of the new tree."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-06T17:47:31.000Z"}],["meta",{"property":"article:author","content":"Mike"}],["meta",{"property":"article:tag","content":"easy"}],["meta",{"property":"article:tag","content":"binary tree"}],["meta",{"property":"article:tag","content":"depth first search"}],["meta",{"property":"article:tag","content":"breadth first search"}],["meta",{"property":"article:published_time","content":"2024-01-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-06T17:47:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"617, Merge Two Binary Trees\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-05T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-06T17:47:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mike\\"}]}"]]},"headers":[{"level":2,"title":"I Problem","slug":"i-problem","link":"#i-problem","children":[]},{"level":2,"title":"II Solution","slug":"ii-solution","link":"#ii-solution","children":[{"level":3,"title":"Approach 1: Depth-First Search","slug":"approach-1-depth-first-search","link":"#approach-1-depth-first-search","children":[]},{"level":3,"title":"Approach 2: Breadth-First Search","slug":"approach-2-breadth-first-search","link":"#approach-2-breadth-first-search","children":[]}]}],"git":{"createdTime":1704563251000,"updatedTime":1704563251000,"contributors":[{"name":"mike","email":"lixiaofeng1115@outlook.com","commits":1}]},"readingTime":{"minutes":4.77,"words":1430},"filePathRelative":"algorithm/leetcode/binary_tree/617_merge_two_binary_trees.md","localizedDate":"January 5, 2024","excerpt":"<h2> I Problem</h2>\\n<p>You are given two binary trees <code>root1</code> and <code>root2</code>.</p>\\n<p>Imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. You need to merge the two trees into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of the new tree.</p>","autoDesc":true}`);export{e as data};
