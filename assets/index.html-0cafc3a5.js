import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as s,c as r,a as l,d as i,w as _,b as n,e as d}from"./app-9d9a5cf4.js";const a={},u=d('<h2 id="贪心算法" tabindex="-1"><a class="header-anchor" href="#贪心算法" aria-hidden="true">#</a> 贪心算法</h2><p><strong>贪心算法</strong>（greedy algorithm，又称<strong>贪婪算法</strong>）是指，在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，算法得到的是在某种意义上的局部最优解。</p><p>贪心算法不是对所有问题都能得到整体最优解，关键是贪心策略的选择。</p><p>贪心算法一般分为如下四步：</p><ul><li>将问题分解为若干个子问题</li><li>找出适合的贪心策略</li><li>求解每一个子问题的最优解</li><li>将局部最优解堆叠成全局最优解</li></ul><p>贪心算法没有套路，说白了就是常识性推导加上举反例。</p><h2 id="习题" tabindex="-1"><a class="header-anchor" href="#习题" aria-hidden="true">#</a> 习题</h2>',7),c=l("br",null,null,-1),h=l("br",null,null,-1),b=l("br",null,null,-1),p=l("br",null,null,-1),m=l("br",null,null,-1),f=l("br",null,null,-1),x=l("br",null,null,-1),g=l("br",null,null,-1),k=l("br",null,null,-1),I=l("br",null,null,-1),N=l("br",null,null,-1),V=l("br",null,null,-1),v=l("br",null,null,-1),B=l("br",null,null,-1),w=l("br",null,null,-1),y=l("br",null,null,-1),C=l("br",null,null,-1),L=l("h2",{id:"总结",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#总结","aria-hidden":"true"},"#"),n(" 总结")],-1);function R(z,E){const e=o("RouterLink");return s(),r("div",null,[u,l("p",null,[i(e,{to:"/zh/algorithm/leetcode/greedy/455_assign_cookies.html"},{default:_(()=>[n("455: 分发饼干")]),_:1}),c,n(" [1005: K次取反后最大化的数组和]"),h,n(" [860: 柠檬水找零]"),b,n(" [376: 摆动序列]"),p,n(" [738: 单调递增的数字]"),m,n(" [122: 买卖股票的最佳时机II]"),f,n(" [714: 买卖股票的最佳时机含手续费]"),x,n(" [135: 分发糖果]"),g,n(" [406: 根据身高重建队列]"),k,n(" [55: 跳跃游戏]"),I,n(" [45: 跳跃游戏II]"),N,n(" [452: 用最少数量的箭引爆气球]"),V,n(" [435: 无重叠区间]"),v,n(" [763: 划分字母区间]"),B,n(" [56: 合并区间]"),w,n(" [53: 最大子序和]"),y,n(" [134: 加油站]"),C,n(" [968: 监控二叉树]")]),L])}const T=t(a,[["render",R],["__file","index.html.vue"]]);export{T as default};
