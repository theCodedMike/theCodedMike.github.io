const e=JSON.parse('{"key":"v-4dbea374","path":"/zh/algorithm/leetcode/stack_queue/232_implement_queue_using_stacks.html","title":"232, 用栈实现队列","lang":"zh-CN","frontmatter":{"title":"232, 用栈实现队列","icon":"discover","date":"2023-11-27T00:00:00.000Z","order":1,"sticky":true,"category":"stack/queue","tag":["easy","stack","queue","design"],"description":"一、题目描述 请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（push、pop、peek、empty）。 实现MyQueue类： void push(int x)将元素x推到队列的末尾 int pop()从队列的开头移除并返回元素 int peek()返回队列开头的元素 boolean empty()如果队列为空，返回true；否则，返回false","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://thecodedmike.github.io/algorithm/leetcode/stack_queue/232_implement_queue_using_stacks.html"}],["meta",{"property":"og:url","content":"https://thecodedmike.github.io/zh/algorithm/leetcode/stack_queue/232_implement_queue_using_stacks.html"}],["meta",{"property":"og:site_name","content":"Mike的博客"}],["meta",{"property":"og:title","content":"232, 用栈实现队列"}],["meta",{"property":"og:description","content":"一、题目描述 请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（push、pop、peek、empty）。 实现MyQueue类： void push(int x)将元素x推到队列的末尾 int pop()从队列的开头移除并返回元素 int peek()返回队列开头的元素 boolean empty()如果队列为空，返回true；否则，返回false"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-11-27T12:31:49.000Z"}],["meta",{"property":"article:author","content":"Mike"}],["meta",{"property":"article:tag","content":"easy"}],["meta",{"property":"article:tag","content":"stack"}],["meta",{"property":"article:tag","content":"queue"}],["meta",{"property":"article:tag","content":"design"}],["meta",{"property":"article:published_time","content":"2023-11-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-27T12:31:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"232, 用栈实现队列\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-11-27T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-27T12:31:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mike\\"}]}"]]},"headers":[{"level":2,"title":"一、题目描述","slug":"一、题目描述","link":"#一、题目描述","children":[]},{"level":2,"title":"二、题解","slug":"二、题解","link":"#二、题解","children":[{"level":3,"title":"方法 1: 双栈法","slug":"方法-1-双栈法","link":"#方法-1-双栈法","children":[]},{"level":3,"title":"方法 2: 优化双栈法","slug":"方法-2-优化双栈法","link":"#方法-2-优化双栈法","children":[]}]}],"git":{"createdTime":1701088309000,"updatedTime":1701088309000,"contributors":[{"name":"mike","email":"lixiaofeng1115@outlook.com","commits":1}]},"readingTime":{"minutes":2.71,"words":813},"filePathRelative":"zh/algorithm/leetcode/stack_queue/232_implement_queue_using_stacks.md","localizedDate":"2023年11月27日","excerpt":"<h2> 一、题目描述</h2>\\n<p>请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（<code>push</code>、<code>pop</code>、<code>peek</code>、<code>empty</code>）。</p>\\n<p>实现<code>MyQueue</code>类：</p>\\n<ul>\\n<li><code>void push(int x)</code>将元素<code>x</code>推到队列的末尾</li>\\n<li><code>int pop()</code>从队列的开头移除并返回元素</li>\\n<li><code>int peek()</code>返回队列开头的元素</li>\\n<li><code>boolean empty()</code>如果队列为空，返回<code>true</code>；否则，返回<code>false</code></li>\\n</ul>","autoDesc":true}');export{e as data};
