import{_ as d,a as n,b as s,c as r,d as o,e as h,f as c,g as _,h as m,i as k}from"./doubly_linked_list_delete_node-93a022cc.js";import{_ as u}from"./plugin-vue_export-helper-c27b6911.js";import{r as f,o as L,c as p,a as e,d as l,w as a,e as y,b as i}from"./app-a3334ba3.js";const g={},b=y('<h2 id="about-linked-list" tabindex="-1"><a class="header-anchor" href="#about-linked-list" aria-hidden="true">#</a> About Linked List</h2><p>Linked list is a linear structure linked together by a series of pointers, with each node consisting of two parts, a data field and a pointer field.<br><img src="'+d+'" alt="Linked List" loading="lazy"></p><h3 id="type-of-linked-list" tabindex="-1"><a class="header-anchor" href="#type-of-linked-list" aria-hidden="true">#</a> Type of Linked List</h3><ul><li>singly linked list<br><img src="'+n+'" alt="Singly Linked List" loading="lazy"></li><li>doubly linked list<br><img src="'+s+'" alt="Doubly Linked List" loading="lazy"></li><li>circular singly linked list<br><img src="'+r+'" alt="Circular Singly Linked List" loading="lazy"></li><li>circular doubly linked list<br><img src="'+o+'" alt="Circular Doubly Linked List" loading="lazy"></li></ul><h3 id="linked-list-memory-allocation" tabindex="-1"><a class="header-anchor" href="#linked-list-memory-allocation" aria-hidden="true">#</a> Linked List Memory Allocation</h3><p>The nodes in a linked list are not continuously distributed in memory, but are scattered at certain addresses in memory.<br><img src="'+h+'" alt="Linked List Memory Allocation" loading="lazy"></p><h3 id="operation-of-linkedlist" tabindex="-1"><a class="header-anchor" href="#operation-of-linkedlist" aria-hidden="true">#</a> Operation of LinkedList</h3><h4 id="add" tabindex="-1"><a class="header-anchor" href="#add" aria-hidden="true">#</a> Add</h4><p><img src="'+c+'" alt="Singly Linked List Add Node" loading="lazy"><br><img src="'+_+'" alt="Doubly Linked List Add Node" loading="lazy"></p><h4 id="delete" tabindex="-1"><a class="header-anchor" href="#delete" aria-hidden="true">#</a> Delete</h4><p><img src="'+m+'" alt="Singly Linked List Delete Node" loading="lazy"><br><img src="'+k+'" alt="Doubly Linked List Delete Node" loading="lazy"></p><h2 id="exercise" tabindex="-1"><a class="header-anchor" href="#exercise" aria-hidden="true">#</a> Exercise</h2><h3 id="remove-linked-list-elements" tabindex="-1"><a class="header-anchor" href="#remove-linked-list-elements" aria-hidden="true">#</a> Remove Linked List Elements</h3>',13),x=e("h3",{id:"design-linked-list",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#design-linked-list","aria-hidden":"true"},"#"),i(" Design Linked List")],-1),v=e("h3",{id:"reverse-linked-list",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#reverse-linked-list","aria-hidden":"true"},"#"),i(" Reverse Linked List")],-1),w=e("h3",{id:"swap-nodes-in-pairs",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#swap-nodes-in-pairs","aria-hidden":"true"},"#"),i(" Swap Nodes in Pairs")],-1),N=e("h3",{id:"remove-nth-node-from-end-of-list",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#remove-nth-node-from-end-of-list","aria-hidden":"true"},"#"),i(" Remove Nth Node From End of List")],-1),z=e("h3",{id:"intersection-of-two-linked-lists",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#intersection-of-two-linked-lists","aria-hidden":"true"},"#"),i(" Intersection of Two Linked Lists")],-1),D=e("h3",{id:"linked-list-cycle",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#linked-list-cycle","aria-hidden":"true"},"#"),i(" Linked List Cycle")],-1),R=e("br",null,null,-1),S=e("h2",{id:"summary",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#summary","aria-hidden":"true"},"#"),i(" Summary")],-1);function C(A,E){const t=f("RouterLink");return L(),p("div",null,[b,e("p",null,[l(t,{to:"/algorithm/leetcode/linkedlist/203_remove_linked_list_elements.html"},{default:a(()=>[i("203: Remove Linked List Elements")]),_:1})]),x,e("p",null,[l(t,{to:"/algorithm/leetcode/linkedlist/707_design_linked_list.html"},{default:a(()=>[i("707: Design Linked List")]),_:1})]),v,e("p",null,[l(t,{to:"/algorithm/leetcode/linkedlist/206_reverse_linked_list.html"},{default:a(()=>[i("206: Reverse Linked List")]),_:1})]),w,e("p",null,[l(t,{to:"/algorithm/leetcode/linkedlist/24_swap_nodes_in_pairs.html"},{default:a(()=>[i("24: Swap Nodes in Pairs")]),_:1})]),N,e("p",null,[l(t,{to:"/algorithm/leetcode/linkedlist/19_remove_nth_node_from_end_of_list.html"},{default:a(()=>[i("19: Remove Nth Node From End of List")]),_:1})]),z,e("p",null,[l(t,{to:"/algorithm/leetcode/linkedlist/160_intersection_of_two_linked_lists.html"},{default:a(()=>[i("160: Intersection of Two Linked Lists")]),_:1})]),D,e("p",null,[l(t,{to:"/algorithm/leetcode/linkedlist/141_linked_list_cycle.html"},{default:a(()=>[i("141: Linked List Cycle")]),_:1}),R,l(t,{to:"/algorithm/leetcode/linkedlist/142_linked_list_cycle_II.html"},{default:a(()=>[i("142: Linked List Cycle II")]),_:1})]),S])}const B=u(g,[["render",C],["__file","index.html.vue"]]);export{B as default};
