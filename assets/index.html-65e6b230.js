const e=JSON.parse(`{"key":"v-69b50658","path":"/algorithm/leetcode/binary_tree/","title":"Binary Tree","lang":"en-US","frontmatter":{"title":"Binary Tree","icon":"discover","date":"2023-12-05T00:00:00.000Z","dir":{"order":7},"category":"leetcode","tag":"binary tree","sticky":false,"description":"Binary Tree Definition In computer science, a binary tree is a tree data structure in which each node has at most two children, referred to as the left child and the right child. That is, it is a k-ary tree with k = 2. A recursive definition using set theory is that a binary tree is a tuple (L, S, R), where L and R are binary trees or the empty set and S is a singleton set containing the root.","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://thecodedmike.github.io/zh/algorithm/leetcode/binary_tree/"}],["meta",{"property":"og:url","content":"https://thecodedmike.github.io/algorithm/leetcode/binary_tree/"}],["meta",{"property":"og:site_name","content":"Mike's Blog"}],["meta",{"property":"og:title","content":"Binary Tree"}],["meta",{"property":"og:description","content":"Binary Tree Definition In computer science, a binary tree is a tree data structure in which each node has at most two children, referred to as the left child and the right child. That is, it is a k-ary tree with k = 2. A recursive definition using set theory is that a binary tree is a tuple (L, S, R), where L and R are binary trees or the empty set and S is a singleton set containing the root."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-02T12:15:23.000Z"}],["meta",{"property":"article:author","content":"Mike"}],["meta",{"property":"article:tag","content":"binary tree"}],["meta",{"property":"article:published_time","content":"2023-12-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-02T12:15:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Binary Tree\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-12-05T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-02T12:15:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mike\\"}]}"]]},"headers":[{"level":2,"title":"Binary Tree","slug":"binary-tree","link":"#binary-tree","children":[{"level":3,"title":"Definition","slug":"definition","link":"#definition","children":[]},{"level":3,"title":"Definition in Graph Theory","slug":"definition-in-graph-theory","link":"#definition-in-graph-theory","children":[]},{"level":3,"title":"Types of Binary Trees","slug":"types-of-binary-trees","link":"#types-of-binary-trees","children":[]},{"level":3,"title":"Properties of Binary Trees","slug":"properties-of-binary-trees","link":"#properties-of-binary-trees","children":[]},{"level":3,"title":"Operations of Binary Trees","slug":"operations-of-binary-trees","link":"#operations-of-binary-trees","children":[]},{"level":3,"title":"Complexity in Big O Notation","slug":"complexity-in-big-o-notation","link":"#complexity-in-big-o-notation","children":[]}]},{"level":2,"title":"Exercise","slug":"exercise","link":"#exercise","children":[{"level":3,"title":"Traversal of Binary Trees","slug":"traversal-of-binary-trees","link":"#traversal-of-binary-trees","children":[]},{"level":3,"title":"Level Order Traversal","slug":"level-order-traversal","link":"#level-order-traversal","children":[]},{"level":3,"title":"Properties of Binary Trees","slug":"properties-of-binary-trees-1","link":"#properties-of-binary-trees-1","children":[]},{"level":3,"title":"Operations of Binary Trees","slug":"operations-of-binary-trees-1","link":"#operations-of-binary-trees-1","children":[]},{"level":3,"title":"Properties of Binary Search Trees","slug":"properties-of-binary-search-trees","link":"#properties-of-binary-search-trees","children":[]},{"level":3,"title":"Common Ancestor of Binary Trees","slug":"common-ancestor-of-binary-trees","link":"#common-ancestor-of-binary-trees","children":[]},{"level":3,"title":"Operations of Binary Search Trees","slug":"operations-of-binary-search-trees","link":"#operations-of-binary-search-trees","children":[]}]},{"level":2,"title":"Summary","slug":"summary","link":"#summary","children":[]}],"git":{"createdTime":1695811035000,"updatedTime":1704197723000,"contributors":[{"name":"mike","email":"lixiaofeng1115@outlook.com","commits":26}]},"readingTime":{"minutes":5.4,"words":1619},"filePathRelative":"algorithm/leetcode/binary_tree/README.md","localizedDate":"December 5, 2023","excerpt":"<h2> Binary Tree</h2>\\n<h3> Definition</h3>\\n<p>In computer science, a <a href=\\"https://en.wikipedia.org/wiki/Binary_tree\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><strong>binary tree</strong></a> is a tree data structure in which each node has at most two children, referred to as the <code>left child</code> and the <code>right child</code>. That is, it is a <a href=\\"https://en.wikipedia.org/wiki/M-ary_tree\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><strong>k-ary tree</strong></a> with k = 2. A <em>recursive definition</em> using set theory is that a binary tree is a tuple (L, S, R), where L and R are binary trees or the empty set and S is a singleton set containing the root.<br>\\n</p>","autoDesc":true}`);export{e as data};
