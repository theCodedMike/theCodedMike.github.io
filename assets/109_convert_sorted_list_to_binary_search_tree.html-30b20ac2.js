const e=JSON.parse(`{"key":"v-1d07b862","path":"/algorithm/leetcode/binary_tree/109_convert_sorted_list_to_binary_search_tree.html","title":"109, Convert Sorted List to Binary Search Tree","lang":"en-US","frontmatter":{"title":"109, Convert Sorted List to Binary Search Tree","icon":"discover","date":"2024-01-20T00:00:00.000Z","order":38,"sticky":true,"category":"binary tree","tag":["medium","linked list","binary tree","binary search tree","divide and conquer"],"description":"I Problem Given the head of a singly linked list where elements are sorted in ascending order, convert it to a height-balanced binary search tree. Example 1 Input: head = [-10, -3, 0, 5, 9] Output: [0, -3, 9, -10, null, 5] Explanation: One possible answer is [0, -3, 9, -10, null, 5], which represents the shown height balanced BST.","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://thecodedmike.github.io/zh/algorithm/leetcode/binary_tree/109_convert_sorted_list_to_binary_search_tree.html"}],["meta",{"property":"og:url","content":"https://thecodedmike.github.io/algorithm/leetcode/binary_tree/109_convert_sorted_list_to_binary_search_tree.html"}],["meta",{"property":"og:site_name","content":"Mike's Blog"}],["meta",{"property":"og:title","content":"109, Convert Sorted List to Binary Search Tree"}],["meta",{"property":"og:description","content":"I Problem Given the head of a singly linked list where elements are sorted in ascending order, convert it to a height-balanced binary search tree. Example 1 Input: head = [-10, -3, 0, 5, 9] Output: [0, -3, 9, -10, null, 5] Explanation: One possible answer is [0, -3, 9, -10, null, 5], which represents the shown height balanced BST."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-20T13:09:48.000Z"}],["meta",{"property":"article:author","content":"Mike"}],["meta",{"property":"article:tag","content":"medium"}],["meta",{"property":"article:tag","content":"linked list"}],["meta",{"property":"article:tag","content":"binary tree"}],["meta",{"property":"article:tag","content":"binary search tree"}],["meta",{"property":"article:tag","content":"divide and conquer"}],["meta",{"property":"article:published_time","content":"2024-01-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-20T13:09:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"109, Convert Sorted List to Binary Search Tree\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-20T13:09:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mike\\"}]}"]]},"headers":[{"level":2,"title":"I Problem","slug":"i-problem","link":"#i-problem","children":[]},{"level":2,"title":"II Solution","slug":"ii-solution","link":"#ii-solution","children":[{"level":3,"title":"Approach 1: Divide and Conquer","slug":"approach-1-divide-and-conquer","link":"#approach-1-divide-and-conquer","children":[]},{"level":3,"title":"Approach 2: Divide and Conquer with In-order Traversal","slug":"approach-2-divide-and-conquer-with-in-order-traversal","link":"#approach-2-divide-and-conquer-with-in-order-traversal","children":[]}]}],"git":{"createdTime":1705756188000,"updatedTime":1705756188000,"contributors":[{"name":"mike","email":"lixiaofeng1115@outlook.com","commits":1}]},"readingTime":{"minutes":2.43,"words":729},"filePathRelative":"algorithm/leetcode/binary_tree/109_convert_sorted_list_to_binary_search_tree.md","localizedDate":"January 20, 2024","excerpt":"<h2> I Problem</h2>\\n<p>Given the <code>head</code> of a singly linked list where elements are sorted in <strong>ascending order</strong>, convert <em>it to a <strong>height-balanced</strong> binary search tree</em>.</p>\\n<p><strong>Example 1</strong><br>\\n<br>\\nInput: head = [-10, -3, 0, 5, 9]<br>\\nOutput: [0, -3, 9, -10, null, 5]<br>\\nExplanation: One possible answer is [0, -3, 9, -10, null, 5], which represents the shown height balanced BST.</p>","autoDesc":true}`);export{e as data};
