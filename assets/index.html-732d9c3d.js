import{_ as c,a as h,b as u,c as b,d as m,e as g,f as v,g as p,h as f,i as y,j as x,k as z}from"./bfs-713d607a.js";import{_ as k}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o as A,c as E,a as e,b as t,d as n,w as l,e as _}from"./app-4d0c5a8a.js";const w={},B=e("h2",{id:"二叉树",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#二叉树","aria-hidden":"true"},"#"),t(" 二叉树")],-1),I=e("h3",{id:"定义",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#定义","aria-hidden":"true"},"#"),t(" 定义")],-1),N={href:"https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91",target:"_blank",rel:"noopener noreferrer"},V=e("strong",null,"二叉树",-1),L=e("code",null,"左子树",-1),q=e("code",null,"右子树",-1),C=e("br",null,null,-1),O=e("img",{src:c,alt:"binary_tree",loading:"lazy"},null,-1),F=e("h3",{id:"在图论中的定义",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#在图论中的定义","aria-hidden":"true"},"#"),t(" 在图论中的定义")],-1),T=e("p",null,"二叉树是一个连通的无环图，并且每一个顶点的度不大于3。有根二叉树还要满足根节点的度不大于2。有了根节点之后，每个顶点定义了唯一的父节点，和最多2个子节点。然而，没有足够的信息来区分左节点和右节点。如果不考虑连通性，允许图中有多个连通分量，这样的结构叫做森林。",-1),D=e("h3",{id:"二叉树的类型",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#二叉树的类型","aria-hidden":"true"},"#"),t(" 二叉树的类型")],-1),S=_('<li><p><strong>满二叉树</strong>：每个节点要么有0个孩子节点要么有2个孩子节点的二叉树，称为<strong>满二叉树</strong>。<br><img src="'+g+'" alt="full binary tree" loading="lazy"></p></li><li><p><strong>完美二叉树</strong>：一棵深度为<code>k</code>，且有<code>2^k − 1</code>个节点的二叉树，称为<strong>完美二叉树</strong>。这种树的特点是每一层上的节点数都是最大节点数。<br><img src="'+v+'" alt="perfect binary tree" loading="lazy"></p></li><li><p><strong>完全二叉树</strong>：在一颗二叉树中，若除最后一层外的其余层都是满的，并且最后一层要么是满的，要么在右边缺少连续若干节点，则此二叉树为<strong>完全二叉树</strong>。<br><img src="'+p+'" alt="complete binary tree, not full binary tree" loading="lazy"></p></li><li><p><strong>退化二叉树</strong>：许多节点只有1个孩子节点，其行为表现更像是单链表的二叉树。<br><img src="'+f+'" alt="degenerate tree" loading="lazy"></p></li>',4),G={href:"https://zh.wikipedia.org/zh-cn/%E4%BA%8C%E5%85%83%E6%90%9C%E5%B0%8B%E6%A8%B9",target:"_blank",rel:"noopener noreferrer"},H=e("strong",null,"二叉搜索树",-1),R=e("ul",null,[e("li",null,"若任意节点的左子树不空，则左子树上所有节点的值均小于它的根节点的值；"),e("li",null,"若任意节点的右子树不空，则右子树上所有节点的值均大于它的根节点的值；"),e("li",null,[t("任意节点的左、右子树也分别为二叉搜索树；"),e("br"),e("img",{src:h,alt:"AVL",loading:"lazy"})])],-1),W={href:"https://zh.wikipedia.org/wiki/AVL%E6%A0%91",target:"_blank",rel:"noopener noreferrer"},j=e("strong",null,"AVL",-1),J=e("br",null,null,-1),K=e("img",{src:u,alt:"AVL",loading:"lazy"},null,-1),M={href:"https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91",target:"_blank",rel:"noopener noreferrer"},P=e("strong",null,"红黑树",-1),Q=e("ul",null,[e("li",null,"节点是红色或黑色；"),e("li",null,"根是黑色；"),e("li",null,"所有叶子都是黑色（叶子是NIL节点）；"),e("li",null,"每个红色节点必须有两个黑色的子节点；"),e("li",null,[t("从任一节点到其每个叶子的所有简单路径都包含相同数目的黑色节点；"),e("br"),e("img",{src:b,alt:"RBT",loading:"lazy"})])],-1),U=_('<h3 id="二叉树的性质" tabindex="-1"><a class="header-anchor" href="#二叉树的性质" aria-hidden="true">#</a> 二叉树的性质</h3><ul><li><p>对于高度为<code>h</code>的满二叉树，其节点总数<code>n</code>和<code>h</code>的关系为<code>2h + 1 &lt;= n &lt;= 2^(h+1) - 1</code>。根节点的高度为0。对于一颗完美二叉树，其节点总数为<code>1 + 2 + 4 + … + 2^ℎ = 2^(ℎ+1) − 1</code>。</p></li><li><p>对于有<code>n</code>个节点的完美二叉树，其叶子节点个数为<code>l = (n + 1) / 2</code>。</p></li><li><p>对于任意一颗非空二叉树，其叶子节点个数<code>l</code>与度为2的内部节点个数<code>i2</code>的关系为<code>l = i2 + 1</code>。</p></li><li><p>对于有<code>n</code>个节点的二叉树，其最小的树高为<code>ℎ = log2(n + 1) − 1</code>，此时二叉树表现为完全二叉树。</p></li><li><p>对于有<code>l</code>个叶子节点的二叉树，其高度至少是<code>ℎ = log2(l)</code>。</p></li><li><p>对于一颗节点总数为<code>n</code>、边总数为<code>e</code>的非空二叉树，则节点总数与边的关系为<code>e = n - 1</code>。</p></li><li><p>对于一颗节点总数为<code>n</code>的二叉树，其缺失的孩子节点总数为<code>n + 1</code>。</p></li><li><p>对于有<code>n</code>个节点的完全二叉树，其内部节点的个数为<code>⌊n/2⌋</code>。</p></li></ul><h3 id="二叉树的操作" tabindex="-1"><a class="header-anchor" href="#二叉树的操作" aria-hidden="true">#</a> 二叉树的操作</h3><h4 id="插入" tabindex="-1"><a class="header-anchor" href="#插入" aria-hidden="true">#</a> 插入</h4><ul><li>叶子节点</li><li>内部节点<br><img src="'+y+'" alt="The process of inserting a node into a binary tree" loading="lazy"></li></ul><h4 id="删除" tabindex="-1"><a class="header-anchor" href="#删除" aria-hidden="true">#</a> 删除</h4><ul><li>无孩子节点或有1个孩子节点的节点</li><li>有2个孩子节点的节点<br><img src="'+x+'" alt="The process of deleting an internal node in a binary tree" loading="lazy"></li></ul><h4 id="遍历" tabindex="-1"><a class="header-anchor" href="#遍历" aria-hidden="true">#</a> 遍历</h4><h5 id="深度优先遍历-dfs" tabindex="-1"><a class="header-anchor" href="#深度优先遍历-dfs" aria-hidden="true">#</a> 深度优先遍历（DFS）</h5><figure><img src="'+z+'" alt="depth first traversal of a binary tree" tabindex="0" loading="lazy"><figcaption>depth first traversal of a binary tree</figcaption></figure><ul><li>前序遍历(根左右), 红色●表示其访问顺序: F, B, A, D, C, E, G, I, H</li></ul>',11),X=e("div",{class:"language-text line-numbers-mode","data-ext":"text"},[e("pre",{class:"language-text"},[e("code",null,`procedure pre_order(node)
    if node = null
        return
    visit(node)
    pre_order(node.left)
    pre_order(node.right)
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Y=e("div",{class:"language-text line-numbers-mode","data-ext":"text"},[e("pre",{class:"language-text"},[e("code",null,`procedure pre_order(node)
    if node = null
        return
    stack ← empty stack
    stack.push(node)
    while not stack.isEmpty()
        node ← stack.pop()
        visit(node)
        // right child is pushed first so that left is processed first
        if node.right ≠ null
            stack.push(node.right)
        if node.left ≠ null
            stack.push(node.left)
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Z=e("ul",null,[e("li",null,"中序遍历(左根右), 绿色●表示其访问顺序: A, B, C, D, E, F, G, H, I")],-1),$=e("div",{class:"language-text line-numbers-mode","data-ext":"text"},[e("pre",{class:"language-text"},[e("code",null,`procedure in_order(node)
    if node = null
        return
    in_order(node.left)
    visit(node)
    in_order(node.right)
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),ee=e("div",{class:"language-text line-numbers-mode","data-ext":"text"},[e("pre",{class:"language-text"},[e("code",null,`procedure in_order(node)
    stack ← empty stack
    while not stack.isEmpty() or node ≠ null
        if node ≠ null
            stack.push(node)
            node ← node.left
        else
            node ← stack.pop()
            visit(node)
            node ← node.right
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),te=e("ul",null,[e("li",null,"后序遍历(左右根), 蓝色●表示其访问顺序: A, C, E, D, B, H, I, G, F")],-1),le=e("div",{class:"language-text line-numbers-mode","data-ext":"text"},[e("pre",{class:"language-text"},[e("code",null,`procedure post_order(node)
    if node = null
        return
    post_order(node.left)
    post_order(node.right)
    visit(node)
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),ne=e("div",{class:"language-text line-numbers-mode","data-ext":"text"},[e("pre",{class:"language-text"},[e("code",null,`procedure post_order(node)
    stack ← empty stack
    lastNodeVisited ← null
    while not stack.isEmpty() or node ≠ null
        if node ≠ null
            stack.push(node)
            node ← node.left
        else
            peekNode ← stack.peek()
            // if right child exists and traversing node
            // from left child, then move right
            if peekNode.right ≠ null and lastNodeVisited ≠ peekNode.right
                node ← peekNode.right
            else
                visit(peekNode)
                lastNodeVisited ← stack.pop()
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),ie=e("h5",{id:"广度优先遍历-bfs",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#广度优先遍历-bfs","aria-hidden":"true"},"#"),t(" 广度优先遍历（BFS）")],-1),re=e("figure",null,[e("img",{src:m,alt:"breadth first search",tabindex:"0",loading:"lazy"}),e("figcaption",null,"breadth first search")],-1),ae=e("ul",null,[e("li",null,"层序遍历: F, B, G, A, D, I, C, E, H")],-1),de=e("div",{class:"language-text line-numbers-mode","data-ext":"text"},[e("pre",{class:"language-text"},[e("code",null,`procedure level_order(node)
    queue ← empty queue
    queue.enqueue(node)
    while not queue.isEmpty()
        node ← queue.dequeue()
        visit(node)
        if node.left ≠ null
            queue.enqueue(node.left)
        if node.right ≠ null
            queue.enqueue(node.right)
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),oe=_('<h3 id="复杂度" tabindex="-1"><a class="header-anchor" href="#复杂度" aria-hidden="true">#</a> 复杂度</h3><h4 id="时间复杂度" tabindex="-1"><a class="header-anchor" href="#时间复杂度" aria-hidden="true">#</a> 时间复杂度</h4><table><thead><tr><th>Operation</th><th>Average</th><th>Worst case</th></tr></thead><tbody><tr><td>Search</td><td>O(log(n))</td><td>O(n)</td></tr><tr><td>Insert</td><td>O(log(n))</td><td>O(n)</td></tr><tr><td>Delete</td><td>O(log(n))</td><td>O(n)</td></tr></tbody></table><h4 id="空间复杂度" tabindex="-1"><a class="header-anchor" href="#空间复杂度" aria-hidden="true">#</a> 空间复杂度</h4><table><thead><tr><th>Operation</th><th>Average</th><th>Worst case</th></tr></thead><tbody><tr><td>Space</td><td>O(n)</td><td>O(n)</td></tr></tbody></table><h2 id="习题" tabindex="-1"><a class="header-anchor" href="#习题" aria-hidden="true">#</a> 习题</h2><h3 id="二叉树的遍历方式" tabindex="-1"><a class="header-anchor" href="#二叉树的遍历方式" aria-hidden="true">#</a> 二叉树的遍历方式</h3>',7),se=e("br",null,null,-1),_e=e("br",null,null,-1),ce=e("br",null,null,-1),he=e("h3",{id:"二叉树的层序遍历",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#二叉树的层序遍历","aria-hidden":"true"},"#"),t(" 二叉树的层序遍历")],-1),ue=e("br",null,null,-1),be=e("br",null,null,-1),me=e("br",null,null,-1),ge=e("br",null,null,-1),ve=e("br",null,null,-1),pe=e("br",null,null,-1),fe=e("h3",{id:"二叉树的属性",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#二叉树的属性","aria-hidden":"true"},"#"),t(" 二叉树的属性")],-1),ye=e("br",null,null,-1),xe=e("br",null,null,-1),ze=e("br",null,null,-1),ke=e("br",null,null,-1),Ae=e("br",null,null,-1),Ee=e("br",null,null,-1),we=e("br",null,null,-1),Be=e("br",null,null,-1),Ie=e("br",null,null,-1),Ne=e("h3",{id:"二叉树的修改与构造",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#二叉树的修改与构造","aria-hidden":"true"},"#"),t(" 二叉树的修改与构造")],-1),Ve=e("br",null,null,-1),Le=e("br",null,null,-1),qe=e("br",null,null,-1),Ce=e("br",null,null,-1),Oe=e("h3",{id:"二叉搜索树的属性",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#二叉搜索树的属性","aria-hidden":"true"},"#"),t(" 二叉搜索树的属性")],-1),Fe=e("br",null,null,-1),Te=e("br",null,null,-1),De=e("br",null,null,-1),Se=e("br",null,null,-1),Ge=e("h3",{id:"二叉树公共祖先问题",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#二叉树公共祖先问题","aria-hidden":"true"},"#"),t(" 二叉树公共祖先问题")],-1),He=e("br",null,null,-1),Re=e("h3",{id:"二叉搜索树的修改与构造",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#二叉搜索树的修改与构造","aria-hidden":"true"},"#"),t(" 二叉搜索树的修改与构造")],-1),We=e("br",null,null,-1),je=e("br",null,null,-1),Je=e("br",null,null,-1),Ke=e("br",null,null,-1),Me=e("h2",{id:"总结",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#总结","aria-hidden":"true"},"#"),t(" 总结")],-1);function Pe(Qe,Ue){const d=s("ExternalLinkIcon"),o=s("CodeTabs"),i=s("RouterLink");return A(),E("div",null,[B,I,e("p",null,[t("在计算机科学中，"),e("a",N,[V,n(d)]),t("是每个节点最多只有两个分支（即不存在分支度大于2的节点）的树结构。通常分支被称作"),L,t("或"),q,t("。二叉树的分支具有左右次序，不能随意颠倒。"),C,O]),F,T,D,e("ol",null,[S,e("li",null,[e("p",null,[e("a",G,[H,n(d)]),t("：又称二叉查找树、有序二叉树或排序二叉树，是指一棵空树或者具有下列性质的二叉树：")]),R]),e("li",null,[e("p",null,[e("a",W,[j,n(d)]),t("：AVL树（Adelson-Velsky and Landis Tree）是计算机科学中最早被发明的自平衡二叉搜索树。在AVL树中，任一节点对应的两棵子树的最大高度差为1，因此它也被称为高度平衡树。"),J,K])]),e("li",null,[e("p",null,[e("a",M,[P,n(d)]),t("：红黑树（Red–black tree）是每个节点都带有颜色属性的一种自平衡二叉搜索树，其有以下额外要求：")]),Q])]),U,n(o,{id:"193",data:[{id:"递归实现"},{id:"迭代实现"}]},{title0:l(({value:r,isActive:a})=>[t("递归实现")]),title1:l(({value:r,isActive:a})=>[t("迭代实现")]),tab0:l(({value:r,isActive:a})=>[X]),tab1:l(({value:r,isActive:a})=>[Y]),_:1}),Z,n(o,{id:"208",data:[{id:"递归实现"},{id:"迭代实现"}]},{title0:l(({value:r,isActive:a})=>[t("递归实现")]),title1:l(({value:r,isActive:a})=>[t("迭代实现")]),tab0:l(({value:r,isActive:a})=>[$]),tab1:l(({value:r,isActive:a})=>[ee]),_:1}),te,n(o,{id:"223",data:[{id:"递归实现"},{id:"迭代实现"}]},{title0:l(({value:r,isActive:a})=>[t("递归实现")]),title1:l(({value:r,isActive:a})=>[t("迭代实现")]),tab0:l(({value:r,isActive:a})=>[le]),tab1:l(({value:r,isActive:a})=>[ne]),_:1}),ie,re,ae,n(o,{id:"244",data:[{id:"迭代实现"}]},{title0:l(({value:r,isActive:a})=>[t("迭代实现")]),tab0:l(({value:r,isActive:a})=>[de]),_:1}),oe,e("p",null,[n(i,{to:"/zh/algorithm/leetcode/binary_tree/144_binary_tree_pre_order_traversal.html"},{default:l(()=>[t("144: 二叉树的前序遍历")]),_:1}),se,n(i,{to:"/zh/algorithm/leetcode/binary_tree/94_binary_tree_in_order_traversal.html"},{default:l(()=>[t("94: 二叉树的中序遍历")]),_:1}),_e,n(i,{to:"/zh/algorithm/leetcode/binary_tree/145_binary_tree_post_order_traversal.html"},{default:l(()=>[t("145: 二叉树的后序遍历")]),_:1}),ce,n(i,{to:"/zh/algorithm/leetcode/binary_tree/102_binary_tree_level_order_traversal.html"},{default:l(()=>[t("102: 二叉树的层序遍历")]),_:1})]),he,e("p",null,[n(i,{to:"/zh/algorithm/leetcode/binary_tree/107_binary_tree_level_order_traversal_ii.html"},{default:l(()=>[t("107: 二叉树的层序遍历II")]),_:1}),ue,n(i,{to:"/zh/algorithm/leetcode/binary_tree/199_binary_tree_right_side_view.html"},{default:l(()=>[t("199: 二叉树的右视图")]),_:1}),be,n(i,{to:"/zh/algorithm/leetcode/binary_tree/637_average_of_levels_in_binary_tree.html"},{default:l(()=>[t("637: 二叉树的层平均值")]),_:1}),me,n(i,{to:"/zh/algorithm/leetcode/binary_tree/429_n_ary_tree_level_order_traversal.html"},{default:l(()=>[t("429: N叉树的层序遍历")]),_:1}),ge,n(i,{to:"/zh/algorithm/leetcode/binary_tree/515_find_largest_value_in_each_tree_row.html"},{default:l(()=>[t("515: 在每个树行中找最大值")]),_:1}),ve,n(i,{to:"/zh/algorithm/leetcode/binary_tree/116_populating_next_right_pointers_in_each_node.html"},{default:l(()=>[t("116: 填充每个节点的下一个右侧节点指针")]),_:1}),pe,n(i,{to:"/zh/algorithm/leetcode/binary_tree/117_populating_next_right_pointers_in_each_node_ii.html"},{default:l(()=>[t("117: 填充每个节点的下一个右侧节点指针II")]),_:1})]),fe,e("p",null,[n(i,{to:"/zh/algorithm/leetcode/binary_tree/101_symmetric_tree.html"},{default:l(()=>[t("101: 对称二叉树")]),_:1}),ye,n(i,{to:"/zh/algorithm/leetcode/binary_tree/104_maximum_depth_of_binary_tree.html"},{default:l(()=>[t("104: 二叉树的最大深度")]),_:1}),xe,n(i,{to:"/zh/algorithm/leetcode/binary_tree/111_minimum_depth_of_binary_tree.html"},{default:l(()=>[t("111: 二叉树的最小深度")]),_:1}),ze,n(i,{to:"/zh/algorithm/leetcode/binary_tree/222_count_complete_tree_nodes.html"},{default:l(()=>[t("222: 完全二叉树的节点个数")]),_:1}),ke,n(i,{to:"/zh/algorithm/leetcode/binary_tree/110_balanced_binary_tree.html"},{default:l(()=>[t("110: 平衡二叉树")]),_:1}),Ae,n(i,{to:"/zh/algorithm/leetcode/binary_tree/257_binary_tree_paths.html"},{default:l(()=>[t("257: 二叉树的所有路径")]),_:1}),Ee,n(i,{to:"/zh/algorithm/leetcode/binary_tree/404_sum_of_left_leaves.html"},{default:l(()=>[t("404: 左叶子之和")]),_:1}),we,n(i,{to:"/zh/algorithm/leetcode/binary_tree/513_find_bottom_left_tree_value.html"},{default:l(()=>[t("513: 找树左下角的值")]),_:1}),Be,n(i,{to:"/zh/algorithm/leetcode/binary_tree/112_path_sum.html"},{default:l(()=>[t("112: 路径总和")]),_:1}),Ie,n(i,{to:"/zh/algorithm/leetcode/binary_tree/113_path_sum_ii.html"},{default:l(()=>[t("113: 路径总和II")]),_:1})]),Ne,e("p",null,[n(i,{to:"/zh/algorithm/leetcode/binary_tree/226_invert_binary_tree.html"},{default:l(()=>[t("226: 翻转二叉树")]),_:1}),Ve,n(i,{to:"/zh/algorithm/leetcode/binary_tree/105_construct_binary_tree_from_preorder_and_inorder_traversal.html"},{default:l(()=>[t("105: 从中序与先序遍历序列构造二叉树")]),_:1}),Le,n(i,{to:"/zh/algorithm/leetcode/binary_tree/106_construct_binary_tree_from_post_order_and_in_order_traversal.html"},{default:l(()=>[t("106: 从中序与后序遍历序列构造二叉树")]),_:1}),qe,n(i,{to:"/zh/algorithm/leetcode/binary_tree/654_maximum_binary_tree.html"},{default:l(()=>[t("654: 最大二叉树")]),_:1}),Ce,n(i,{to:"/zh/algorithm/leetcode/binary_tree/617_merge_two_binary_trees.html"},{default:l(()=>[t("617: 合并二叉树")]),_:1})]),Oe,e("p",null,[n(i,{to:"/zh/algorithm/leetcode/binary_tree/700_search_in_a_binary_search_tree.html"},{default:l(()=>[t("700: 二叉搜索树中的搜索")]),_:1}),Fe,n(i,{to:"/zh/algorithm/leetcode/binary_tree/98_validate_binary_search_tree.html"},{default:l(()=>[t("98: 验证二叉搜索树")]),_:1}),Te,n(i,{to:"/zh/algorithm/leetcode/binary_tree/530_minimum_absolute_difference_in_bst.html"},{default:l(()=>[t("530: 二叉搜索树的最小绝对差")]),_:1}),De,n(i,{to:"/zh/algorithm/leetcode/binary_tree/501_find_mode_in_binary_search_tree.html"},{default:l(()=>[t("501: 二叉搜索树中的众数")]),_:1}),Se,n(i,{to:"/zh/algorithm/leetcode/binary_tree/538_convert_bst_to_greater_tree.html"},{default:l(()=>[t("538: 把二叉搜索树转换为累加树")]),_:1})]),Ge,e("p",null,[n(i,{to:"/zh/algorithm/leetcode/binary_tree/236_lowest_common_ancestor_of_a_binary_tree.html"},{default:l(()=>[t("236: 二叉树的最近公共祖先")]),_:1}),He,n(i,{to:"/zh/algorithm/leetcode/binary_tree/235_lowest_common_ancestor_of_a_binary_search_tree.html"},{default:l(()=>[t("235: 二叉搜索树的最近公共祖先")]),_:1})]),Re,e("p",null,[n(i,{to:"/zh/algorithm/leetcode/binary_tree/701_insert_into_a_binary_search_tree.html"},{default:l(()=>[t("701: 二叉搜索树中的插入操作")]),_:1}),We,n(i,{to:"/zh/algorithm/leetcode/binary_tree/450_delete_node_in_a_bst.html"},{default:l(()=>[t("450: 删除二叉搜索树中的节点")]),_:1}),je,n(i,{to:"/zh/algorithm/leetcode/binary_tree/669_trim_a_binary_search_tree.html"},{default:l(()=>[t("669: 修剪二叉搜索树")]),_:1}),Je,n(i,{to:"/zh/algorithm/leetcode/binary_tree/108_convert_sorted_array_to_binary_search_tree.html"},{default:l(()=>[t("108: 将有序数组转换为二叉搜索树")]),_:1}),Ke,n(i,{to:"/zh/algorithm/leetcode/binary_tree/109_convert_sorted_list_to_binary_search_tree.html"},{default:l(()=>[t("109: 将有序列表转换为二叉搜索树")]),_:1})]),Me])}const $e=k(w,[["render",Pe],["__file","index.html.vue"]]);export{$e as default};
