import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as _,c as i,a as l,d as n,w as o,b as e,e as a}from"./app-445da0f9.js";const d={},h=a('<h2 id="贪心算法" tabindex="-1"><a class="header-anchor" href="#贪心算法" aria-hidden="true">#</a> 贪心算法</h2><p><strong>贪心算法</strong>（greedy algorithm，又称<strong>贪婪算法</strong>）是指，在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，算法得到的是在某种意义上的局部最优解。</p><p>贪心算法不是对所有问题都能得到整体最优解，关键是贪心策略的选择。</p><p>贪心算法一般分为如下四步：</p><ul><li>将问题分解为若干个子问题</li><li>找出适合的贪心策略</li><li>求解每一个子问题的最优解</li><li>将局部最优解堆叠成全局最优解</li></ul><p>贪心算法没有套路，说白了就是常识性推导加上举反例。</p><h2 id="习题" tabindex="-1"><a class="header-anchor" href="#习题" aria-hidden="true">#</a> 习题</h2>',7),u=l("br",null,null,-1),c=l("br",null,null,-1),b=l("br",null,null,-1),m=l("br",null,null,-1),f=l("br",null,null,-1),p=l("br",null,null,-1),g=l("br",null,null,-1),x=l("br",null,null,-1),k=l("br",null,null,-1),y=l("br",null,null,-1),z=l("br",null,null,-1),I=l("br",null,null,-1),N=l("br",null,null,-1),V=l("br",null,null,-1),v=l("br",null,null,-1),B=l("br",null,null,-1),w=l("br",null,null,-1),C=l("h2",{id:"总结",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#总结","aria-hidden":"true"},"#"),e(" 总结")],-1);function L(R,E){const t=r("RouterLink");return _(),i("div",null,[h,l("p",null,[n(t,{to:"/zh/algorithm/leetcode/greedy/455_assign_cookies.html"},{default:o(()=>[e("455: 分发饼干")]),_:1}),u,n(t,{to:"/zh/algorithm/leetcode/greedy/1005_maximize_sum_of_array_after_k_negations.html"},{default:o(()=>[e("1005: K次取反后最大化的数组和")]),_:1}),c,n(t,{to:"/zh/algorithm/leetcode/greedy/860_lemonade_change.html"},{default:o(()=>[e("860: 柠檬水找零")]),_:1}),b,e(" [376: 摆动序列]"),m,e(" [738: 单调递增的数字]"),f,e(" [122: 买卖股票的最佳时机II]"),p,e(" [714: 买卖股票的最佳时机含手续费]"),g,e(" [135: 分发糖果]"),x,e(" [406: 根据身高重建队列]"),k,e(" [55: 跳跃游戏]"),y,e(" [45: 跳跃游戏II]"),z,e(" [452: 用最少数量的箭引爆气球]"),I,e(" [435: 无重叠区间]"),N,e(" [763: 划分字母区间]"),V,e(" [56: 合并区间]"),v,e(" [53: 最大子序和]"),B,e(" [134: 加油站]"),w,e(" [968: 监控二叉树]")]),C])}const T=s(d,[["render",L],["__file","index.html.vue"]]);export{T as default};
