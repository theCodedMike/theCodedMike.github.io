import{_ as a,a as t,b as d,c as s,d as n,e as r,f as l,g as o,h,i as c}from"./doubly_linked_list_delete_node-93a022cc.js";import{_ as m}from"./plugin-vue_export-helper-c27b6911.js";import{r as k,o as L,c as p,a as u,d as f,w as _,e,b as y}from"./app-c658e0e1.js";const b={},g=e('<h2 id="about-linked-list" tabindex="-1"><a class="header-anchor" href="#about-linked-list" aria-hidden="true">#</a> About Linked List</h2><p>Linked list is a linear structure linked together by a series of pointers, with each node consisting of two parts, a data field and a pointer field.<br><img src="'+a+'" alt="Linked List" loading="lazy"></p><h3 id="type-of-linked-list" tabindex="-1"><a class="header-anchor" href="#type-of-linked-list" aria-hidden="true">#</a> Type of Linked List</h3><ul><li>singly linked list<br><img src="'+t+'" alt="Singly Linked List" loading="lazy"></li><li>doubly linked list<br><img src="'+d+'" alt="Doubly Linked List" loading="lazy"></li><li>circular singly linked list<br><img src="'+s+'" alt="Circular Singly Linked List" loading="lazy"></li><li>circular doubly linked list<br><img src="'+n+'" alt="Circular Doubly Linked List" loading="lazy"></li></ul><h3 id="linked-list-memory-allocation" tabindex="-1"><a class="header-anchor" href="#linked-list-memory-allocation" aria-hidden="true">#</a> Linked List Memory Allocation</h3><p>The nodes in a linked list are not continuously distributed in memory, but are scattered at certain addresses in memory.<br><img src="'+r+'" alt="Linked List Memory Allocation" loading="lazy"></p><h3 id="operation-of-linkedlist" tabindex="-1"><a class="header-anchor" href="#operation-of-linkedlist" aria-hidden="true">#</a> Operation of LinkedList</h3><h4 id="add" tabindex="-1"><a class="header-anchor" href="#add" aria-hidden="true">#</a> Add</h4><p><img src="'+l+'" alt="Singly Linked List Add Node" loading="lazy"><br><img src="'+o+'" alt="Doubly Linked List Add Node" loading="lazy"></p><h4 id="delete" tabindex="-1"><a class="header-anchor" href="#delete" aria-hidden="true">#</a> Delete</h4><p><img src="'+h+'" alt="Singly Linked List Delete Node" loading="lazy"><br><img src="'+c+'" alt="Doubly Linked List Delete Node" loading="lazy"></p><h2 id="exercise" tabindex="-1"><a class="header-anchor" href="#exercise" aria-hidden="true">#</a> Exercise</h2><h3 id="remove-linked-list-elements" tabindex="-1"><a class="header-anchor" href="#remove-linked-list-elements" aria-hidden="true">#</a> Remove Linked List Elements</h3>',13),x=e('<h3 id="design-linked-list" tabindex="-1"><a class="header-anchor" href="#design-linked-list" aria-hidden="true">#</a> Design Linked List</h3><p>[707: Design Linked List]</p><h3 id="reverse-linked-list" tabindex="-1"><a class="header-anchor" href="#reverse-linked-list" aria-hidden="true">#</a> Reverse Linked List</h3><p>[206: Reverse Linked List]</p><h3 id="swap-nodes-in-pairs" tabindex="-1"><a class="header-anchor" href="#swap-nodes-in-pairs" aria-hidden="true">#</a> Swap Nodes in Pairs</h3><p>[24: Swap Nodes in Pairs]</p><h3 id="remove-nth-node-from-end-of-list" tabindex="-1"><a class="header-anchor" href="#remove-nth-node-from-end-of-list" aria-hidden="true">#</a> Remove Nth Node From End of List</h3><p>[19: Remove Nth Node From End of List]</p><h3 id="intersection-of-two-linked-lists" tabindex="-1"><a class="header-anchor" href="#intersection-of-two-linked-lists" aria-hidden="true">#</a> Intersection of Two Linked Lists</h3><p>[160: Intersection of Two Linked Lists]</p><h3 id="linked-list-cycle" tabindex="-1"><a class="header-anchor" href="#linked-list-cycle" aria-hidden="true">#</a> Linked List Cycle</h3><p>[141: Linked List Cycle]<br> [142: Linked List Cycle II]</p><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary" aria-hidden="true">#</a> Summary</h2>',13);function v(N,w){const i=k("RouterLink");return L(),p("div",null,[g,u("p",null,[f(i,{to:"/algorithm/leetcode/linkedlist/203_remove_linked_list_elements.html"},{default:_(()=>[y("203: Remove Linked List Elements")]),_:1})]),x])}const S=m(b,[["render",v],["__file","index.html.vue"]]);export{S as default};
