const e=JSON.parse('{"key":"v-92fb2062","path":"/zh/algorithm/leetcode/linkedlist/707_design_linked_list.html","title":"707, 设计链表","lang":"zh-CN","frontmatter":{"title":"707, 设计链表","icon":"discover","date":"2023-10-21T00:00:00.000Z","order":2,"sticky":true,"category":"linkedlist","tag":["medium","linked list","design"],"description":"一、题目描述 你可以选择使用单链表或者双链表，设计并实现自己的链表。 单链表中的节点应该具备两个属性：val和next。val是当前节点的值，next是指向下一个节点的指针/引用。 如果是双向链表，则还需要属性prev以指示链表中的上一个节点。假设链表中的所有节点下标从0开始。 实现MyLinkedList类： MyLinkedList() 初始化MyLinkedList对象。 int get(int index) 获取链表中下标为index的节点的值。如果下标无效，则返回-1。 void addAtHead(int val) 将一个值为val的节点插入到链表中第一个元素之前。在插入完成后，新节点会成为链表的第一个节点。 void addAtTail(int val) 将一个值为val的节点追加到链表中作为链表的最后一个元素。 void addAtIndex(int index, int val) 将一个值为val的节点插入到链表中下标为index的节点之前。如果index等于链表的长度，那么该节点会被追加到链表的末尾。如果index比长度更大，该节点将不会插入到链表中。 void deleteAtIndex(int index) 如果下标有效，则删除链表中下标为index的节点。","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://thecodedmike.github.io/algorithm/leetcode/linkedlist/707_design_linked_list.html"}],["meta",{"property":"og:url","content":"https://thecodedmike.github.io/zh/algorithm/leetcode/linkedlist/707_design_linked_list.html"}],["meta",{"property":"og:site_name","content":"Mike的博客"}],["meta",{"property":"og:title","content":"707, 设计链表"}],["meta",{"property":"og:description","content":"一、题目描述 你可以选择使用单链表或者双链表，设计并实现自己的链表。 单链表中的节点应该具备两个属性：val和next。val是当前节点的值，next是指向下一个节点的指针/引用。 如果是双向链表，则还需要属性prev以指示链表中的上一个节点。假设链表中的所有节点下标从0开始。 实现MyLinkedList类： MyLinkedList() 初始化MyLinkedList对象。 int get(int index) 获取链表中下标为index的节点的值。如果下标无效，则返回-1。 void addAtHead(int val) 将一个值为val的节点插入到链表中第一个元素之前。在插入完成后，新节点会成为链表的第一个节点。 void addAtTail(int val) 将一个值为val的节点追加到链表中作为链表的最后一个元素。 void addAtIndex(int index, int val) 将一个值为val的节点插入到链表中下标为index的节点之前。如果index等于链表的长度，那么该节点会被追加到链表的末尾。如果index比长度更大，该节点将不会插入到链表中。 void deleteAtIndex(int index) 如果下标有效，则删除链表中下标为index的节点。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-10-21T20:00:43.000Z"}],["meta",{"property":"article:author","content":"Mike"}],["meta",{"property":"article:tag","content":"medium"}],["meta",{"property":"article:tag","content":"linked list"}],["meta",{"property":"article:tag","content":"design"}],["meta",{"property":"article:published_time","content":"2023-10-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-21T20:00:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"707, 设计链表\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-21T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-21T20:00:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mike\\"}]}"]]},"headers":[{"level":2,"title":"一、题目描述","slug":"一、题目描述","link":"#一、题目描述","children":[]},{"level":2,"title":"二、题解","slug":"二、题解","link":"#二、题解","children":[{"level":3,"title":"方法 1: 暴力解法","slug":"方法-1-暴力解法","link":"#方法-1-暴力解法","children":[]}]}],"git":{"createdTime":1697918443000,"updatedTime":1697918443000,"contributors":[{"name":"mike","email":"lixiaofeng1115@outlook.com","commits":1}]},"readingTime":{"minutes":6.48,"words":1943},"filePathRelative":"zh/algorithm/leetcode/linkedlist/707_design_linked_list.md","localizedDate":"2023年10月21日","excerpt":"<h2> 一、题目描述</h2>\\n<p>你可以选择使用单链表或者双链表，设计并实现自己的链表。</p>\\n<p>单链表中的节点应该具备两个属性：<code>val</code>和<code>next</code>。<code>val</code>是当前节点的值，<code>next</code>是指向下一个节点的指针/引用。</p>\\n<p>如果是双向链表，则还需要属性<code>prev</code>以指示链表中的上一个节点。假设链表中的所有节点下标从0开始。</p>\\n<p>实现MyLinkedList类：</p>\\n<ul>\\n<li><code>MyLinkedList()</code> 初始化<code>MyLinkedList</code>对象。</li>\\n<li><code>int get(int index)</code> 获取链表中下标为<code>index</code>的节点的值。如果下标无效，则返回-1。</li>\\n<li><code>void addAtHead(int val)</code> 将一个值为<code>val</code>的节点插入到链表中第一个元素之前。在插入完成后，新节点会成为链表的第一个节点。</li>\\n<li><code>void addAtTail(int val)</code> 将一个值为<code>val</code>的节点追加到链表中作为链表的最后一个元素。</li>\\n<li><code>void addAtIndex(int index, int val)</code> 将一个值为<code>val</code>的节点插入到链表中下标为<code>index</code>的节点之前。如果<code>index</code>等于链表的长度，那么该节点会被追加到链表的末尾。如果<code>index</code>比长度更大，该节点将<strong>不会插入</strong>到链表中。</li>\\n<li><code>void deleteAtIndex(int index)</code> 如果下标有效，则删除链表中下标为<code>index</code>的节点。</li>\\n</ul>","autoDesc":true}');export{e as data};
