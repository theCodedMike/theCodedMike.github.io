const e=JSON.parse(`{"key":"v-6f765245","path":"/algorithm/leetcode/binary_tree/98_validate_binary_search_tree.html","title":"98, Validate Binary Search Tree","lang":"en-US","frontmatter":{"title":"98, Validate Binary Search Tree","icon":"discover","date":"2024-01-08T00:00:00.000Z","order":28,"sticky":true,"category":"binary tree","tag":["medium","binary tree","depth first search","binary search tree"],"description":"I Problem Given the root of a binary tree, determine if it is a valid binary search tree (BST). A valid BST is defined as follows: The left subtree of a node contains only nodes with keys less than the node's key. The right subtree of a node contains only nodes with keys greater than the node's key. Both the left and right subtrees must also be binary search trees.","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://thecodedmike.github.io/zh/algorithm/leetcode/binary_tree/98_validate_binary_search_tree.html"}],["meta",{"property":"og:url","content":"https://thecodedmike.github.io/algorithm/leetcode/binary_tree/98_validate_binary_search_tree.html"}],["meta",{"property":"og:site_name","content":"Mike's Blog"}],["meta",{"property":"og:title","content":"98, Validate Binary Search Tree"}],["meta",{"property":"og:description","content":"I Problem Given the root of a binary tree, determine if it is a valid binary search tree (BST). A valid BST is defined as follows: The left subtree of a node contains only nodes with keys less than the node's key. The right subtree of a node contains only nodes with keys greater than the node's key. Both the left and right subtrees must also be binary search trees."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-08T20:37:37.000Z"}],["meta",{"property":"article:author","content":"Mike"}],["meta",{"property":"article:tag","content":"medium"}],["meta",{"property":"article:tag","content":"binary tree"}],["meta",{"property":"article:tag","content":"depth first search"}],["meta",{"property":"article:tag","content":"binary search tree"}],["meta",{"property":"article:published_time","content":"2024-01-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-08T20:37:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"98, Validate Binary Search Tree\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-08T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-08T20:37:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mike\\"}]}"]]},"headers":[{"level":2,"title":"I Problem","slug":"i-problem","link":"#i-problem","children":[]},{"level":2,"title":"II Solution","slug":"ii-solution","link":"#ii-solution","children":[{"level":3,"title":"Approach 1: Squeeze Theorem","slug":"approach-1-squeeze-theorem","link":"#approach-1-squeeze-theorem","children":[]},{"level":3,"title":"Approach 2: In-order traversal is ordered","slug":"approach-2-in-order-traversal-is-ordered","link":"#approach-2-in-order-traversal-is-ordered","children":[]}]}],"git":{"createdTime":1704746257000,"updatedTime":1704746257000,"contributors":[{"name":"mike","email":"lixiaofeng1115@outlook.com","commits":1}]},"readingTime":{"minutes":3.32,"words":997},"filePathRelative":"algorithm/leetcode/binary_tree/98_validate_binary_search_tree.md","localizedDate":"January 8, 2024","excerpt":"<h2> I Problem</h2>\\n<p>Given the <code>root</code> of a binary tree, <em>determine if it is a valid binary search tree (BST)</em>.</p>\\n<p>A <strong>valid BST</strong> is defined as follows:</p>\\n<ul>\\n<li>The left subtree of a node contains only nodes with keys <strong>less than</strong> the node's key.</li>\\n<li>The right subtree of a node contains only nodes with keys <strong>greater than</strong> the node's key.</li>\\n<li>Both the left and right subtrees must also be binary search trees.</li>\\n</ul>","autoDesc":true}`);export{e as data};
