const e=JSON.parse(`{"key":"v-6bec6762","path":"/algorithm/leetcode/binary_tree/235_lowest_common_ancestor_of_a_binary_search_tree.html","title":"235, Lowest Common Ancestor of a Binary Search Tree","lang":"en-US","frontmatter":{"title":"235, Lowest Common Ancestor of a Binary Search Tree","icon":"discover","date":"2024-01-14T00:00:00.000Z","order":33,"sticky":true,"category":"binary tree","tag":["medium","tree","binary tree","binary search tree","depth first search"],"description":"I Problem Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST. According to the definition of LCA on Wikipedia: \\"The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).\\"","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://thecodedmike.github.io/zh/algorithm/leetcode/binary_tree/235_lowest_common_ancestor_of_a_binary_search_tree.html"}],["meta",{"property":"og:url","content":"https://thecodedmike.github.io/algorithm/leetcode/binary_tree/235_lowest_common_ancestor_of_a_binary_search_tree.html"}],["meta",{"property":"og:site_name","content":"Mike's Blog"}],["meta",{"property":"og:title","content":"235, Lowest Common Ancestor of a Binary Search Tree"}],["meta",{"property":"og:description","content":"I Problem Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST. According to the definition of LCA on Wikipedia: \\"The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).\\""}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-14T21:36:21.000Z"}],["meta",{"property":"article:author","content":"Mike"}],["meta",{"property":"article:tag","content":"medium"}],["meta",{"property":"article:tag","content":"tree"}],["meta",{"property":"article:tag","content":"binary tree"}],["meta",{"property":"article:tag","content":"binary search tree"}],["meta",{"property":"article:tag","content":"depth first search"}],["meta",{"property":"article:published_time","content":"2024-01-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-14T21:36:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"235, Lowest Common Ancestor of a Binary Search Tree\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-14T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-14T21:36:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mike\\"}]}"]]},"headers":[{"level":2,"title":"I Problem","slug":"i-problem","link":"#i-problem","children":[]},{"level":2,"title":"II Solution","slug":"ii-solution","link":"#ii-solution","children":[{"level":3,"title":"Approach 1: Two Traversals","slug":"approach-1-two-traversals","link":"#approach-1-two-traversals","children":[]},{"level":3,"title":"Approach 2: One Traversal","slug":"approach-2-one-traversal","link":"#approach-2-one-traversal","children":[]}]}],"git":{"createdTime":1705268181000,"updatedTime":1705268181000,"contributors":[{"name":"mike","email":"lixiaofeng1115@outlook.com","commits":1}]},"readingTime":{"minutes":3.69,"words":1108},"filePathRelative":"algorithm/leetcode/binary_tree/235_lowest_common_ancestor_of_a_binary_search_tree.md","localizedDate":"January 14, 2024","excerpt":"<h2> I Problem</h2>\\n<p>Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.</p>\\n<p>According to the <a href=\\"https://en.wikipedia.org/wiki/Lowest_common_ancestor\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">definition of LCA on Wikipedia</a>: \\"The lowest common ancestor is defined between two nodes <code>p</code> and <code>q</code> as the lowest node in <code>T</code> that has both <code>p</code> and <code>q</code> as descendants (where we allow <strong>a node to be a descendant of itself</strong>).\\"</p>","autoDesc":true}`);export{e as data};
