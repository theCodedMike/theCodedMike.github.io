import{_ as r,a as n,b as o}from"./queue-8f077c89.js";import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as i,c as d,a as e,d as c,w as h,b as t,e as _}from"./app-82a4de53.js";const u={},p=_('<h2 id="栈-队列" tabindex="-1"><a class="header-anchor" href="#栈-队列" aria-hidden="true">#</a> 栈/队列</h2><h3 id="栈" tabindex="-1"><a class="header-anchor" href="#栈" aria-hidden="true">#</a> 栈</h3><p><code>栈</code>是计算机科学中的一种抽象数据类型，只允许在有序的线性数据集合的一端（称为栈顶，top）进行加入数据（<strong>push</strong>）和移除数据（<strong>pop</strong>）。因而按照后进先出（<strong>LIFO</strong>, Last In First Out）的原理运作，栈常用一维数组或链表来实现。常与另一种有序的线性数据集合<strong>队列</strong>相提并论。<br><img src="'+r+'" alt="stack" loading="lazy"></p><p><strong>栈</strong>使用两种基本操作：</p><ul><li>入栈：将元素放入栈的顶端。</li><li>出栈：将栈顶端的元素移除。<br><img src="'+n+'" alt="stack" loading="lazy"></li></ul><p>栈的基本特点：</p><ul><li>先入后出，后入先出。</li><li>除头尾节点之外，每个元素有一个前驱，一个后继。</li></ul><h3 id="队列" tabindex="-1"><a class="header-anchor" href="#队列" aria-hidden="true">#</a> 队列</h3><p><code>队列</code>是计算机科学中的一种抽象数据类型，是先进先出（<strong>FIFO</strong>, First-In-First-Out）的线性表。在具体应用中通常用链表或者数组来实现。队列只允许在后端/尾部（称为rear/back/tail）进行插入操作，在前端/头部（称为front/head）进行删除操作。<br><img src="'+o+'" alt="queue" loading="lazy"></p><p>队列的操作方式和栈类似，唯一的区别在于队列<em>只允许新数据在后端进行添加</em>。</p><h2 id="习题" tabindex="-1"><a class="header-anchor" href="#习题" aria-hidden="true">#</a> 习题</h2>',11),m=e("br",null,null,-1),g=e("br",null,null,-1),b=e("br",null,null,-1),f=e("br",null,null,-1),x=e("br",null,null,-1),k=e("br",null,null,-1),F=e("h2",{id:"总结",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#总结","aria-hidden":"true"},"#"),t(" 总结")],-1);function z(I,L){const a=l("RouterLink");return i(),d("div",null,[p,e("p",null,[c(a,{to:"/zh/algorithm/leetcode/stack_queue/232_implement_queue_using_stacks.html"},{default:h(()=>[t("232: 用栈实现队列")]),_:1}),m,t(" [225: 用队列实现栈]"),g,t(" [20: 有效的括号]"),b,t(" [1047: 删除字符串中的所有相邻重复项]"),f,t(" [150: 逆波兰表达式求值]"),x,t(" [239: 滑动窗口最大值]"),k,t(" [347: 前K个高频元素]")]),F])}const q=s(u,[["render",z],["__file","index.html.vue"]]);export{q as default};
